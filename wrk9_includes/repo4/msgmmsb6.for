!     msgmmsb6.for
!     Copyright(c) M.S. Gerber & Associates 2000
!
!     Created: 5/5/2003 2:20:41 PM
!     Author : MARK S GERBER
!     Last change: MSG 12/7/2012 3:38:45 PM
!     ******************************************************************

! Last change: MSG 5/5/2003 2:12:01 PM
      recursive subroutine init_asset_class_info ! use with lf95
      use end_routine, only: end_program, er_message
      use grx_planning_routines

C SOLD CHECKING ON PARENT BL 2543 INIT_ASSET_CLASS_INFO
C
      USE FINANCIAL_RUN_SWITCHES
      USE FINANCIAL_SWITCHES_COMMON
      USE IREC_ENDPOINT_CONTROL
      USE GRX_PLANNING_ROUTINES
      use spindriftlib
      use prod_arrays_dimensions
      use kepcocom
      use globecom
      USE SIZECOM
      use class_run_switchesc
      use class_run_switchesl1
      use class_run_switchesl4
      SAVE

      INCLUDE 'FINACCOM.MON'
      INCLUDE 'ACRSLCOM.MON'
      
      INCLUDE 'Ac_equiv.MON'
      INCLUDE 'Namescom.mon'
C
      REAL (KIND=4) :: UNAMORT_DEBIT_ISS_EXPENSE_BAL,
     +                 UNAMORT_DEBT_ISS_EXPENSE_BAL,
     +                 CASH_REVENUES_RECEIVED,
     +                 CASH_EXPENSES_PAID
      integer LowerBound
      integer UpperBound
      REAL (KIND=4) :: CongestionAnnualExpenes
      LOGICAL (KIND=4) :: BASE_YEAR_ACTIVE
      LOGICAL*1 DIVIDENDS_CONVERGED_STATE,TAXES_CONVERGED_STATE
      LOGICAL (KIND=1) :: MODEL_ISSUED_DEBT_REPORT
      LOGICAL (KIND=1) :: REPORT_ALL_ACCOUNTS,DEBT_REPORT
      LOGICAL*1 R_REV_TRANSFERS_ARE_ACTIVE,IMPA,
     +          R_EXP_TRANSFERS_ARE_ACTIVE,
     +          WVPA,IPALCO,IPALCO_PROPERTY_TAX/.TRUE./,
     +          DIVIDEND_PAYOUT_RATIO
      REAL RETURN_ECITIES_OBJ_VARS,R_TOTAL_CASH_EXPENSES
      REAL TRANSFR_SECONDAY_REVENUES,
     +     TRANSFER_SEC_REV_QUANITIES_MWH,
     +     TRANSFR_PURCHASE_FUEL_EXPENSES,
     +     TRANSFR_PURCHASE_VOM_EXPENSES,
     +     TRANSFR_PUR_EXP_QUANITIES,
     +     PENSION_VAC_storm_TAX_EXP,
     +     PENSIN_VAC_STRM_TAX_EXP_NONBOOK,
     +     PENSIN_VAC_STRM_TAX_EXP_BOOK,
     +     TEMP_PROPERTY_VALUE,
     +     WVPA_PURCHASE_POWER_EXPENSE_ADJ,
     +     EXP_WVPA_NON_MEMBER_COST_OF_POWER,
     +     EXP_WVPA_MEMBER_COST_OF_POWER,
     +     LONG_TERM_DEBT_RETIREMENTS,
     +     CUST_CAP_PURCHASES_TO_LEVEL_RM
      REAL GET_SCENARIO_BY_INDEX,
     +     THE_RATIO_OF_A_TO_B,
     +     THE_PERCENT_OF_A_TO_B,
     +     MONTHLY_NON_INCOME_TAX_PROCS,
     +     MTG_DEBT_RETIREMENTS,
     +     COMMON_STOCK_ISSUED_2_EQUITY,
     +     COMMON_STOCK_BUY_FROM_EQUITY,
     +     UNMODELLED_SUBS_OWNED_BY_SUBS,
     +     UNMODELLED_SUBS_OWNED_BY_PARENT,
     +     UNMODELED_SUB_DIVIDEND_2_PARENT,
     +     TOTAL_CAP_LEASES_BAL_ADJ,
     +     RC_OTHER_PURCHASE_POWER_EXPENSE,
     +     TF_OTHER_PURCHASE_POWER_EXPENSE,
     +     ODEC_NA3_PURCHASE_EXPENSE,
     +     ODEC_NA3_TIER_RETURN,
     +     ODEC_TIER_RETURN_ON_INTRAINTEREST,
     +     STD_INTEREST_ADDEN,
     +     LTD_INTEREST_ADDEN,
     +     STD_FIRST_HALF_RATE,
     +     STD_SECOND_HALF_RATE,
     +     STI_FIRST_HALF_RATE,
     +     STI_SECOND_HALF_RATE,
     +     LTI_FIRST_HALF_RATE,
     +     LTI_SECOND_HALF_RATE,
     +     CUST_DEPOSITS_FIRST_HALF_RATE,
     +     CUST_DEPOSITS_SECOND_HALF_RATE,
     +     DECOM_FUND_FIRST_HALF_RATE,
     +     DECOM_FUND_SECOND_HALF_RATE,
     +     RETIREMENT_FUND_FIRST_HALF_RATE,
     +     RETIREMENT_FUND_SECND_HALF_RATE,
     +     OCI_DECOM_FUND_FIRST_HALF_RATE,
     +     OCI_DECOM_FUND_SECOND_HALF_RATE,
     +     OCI_RETIREMENT_FUND_FIRST_HALF_RATE,
     +     OCI_RETIREMENT_FUND_SECND_HALF_RATE,
     +     OCI_NUCL_DECOM_FUND_RETURN,
     +     OCI_RETURN_RETIREMENT_FUND,
     +     TEMP_RATE,
     +     CONSOLIDATED_PRIOR_INBALANCE,
     +     NOTES_PAYABLE_CASH_INTEREST,
     +     NOTES_RECEIVALBE_CASH_INTEREST,
     +     LAST_REVENUE_TAX_BASIS,
     +     Exp_PreferredDividends,
     +     Exp_AFDCBorrowed,
     +     Exp_AFDCEquity,
     +     Exp_InterestIncome,
     +     Exp_Dividends

      LOGICAL*1 ASSET_ANALYST_ONLY,VECTOR_FOUND
      LOGICAL*1 DONT_TALLY_THIS_CLASS,BANGOR
      LOGICAL*4 FILE_EXISTS
      REAL*4 DEFERRED_TAXES_DR_TAX_FILE
      REAL*4 PENSION_TAX_DEDUCTION,        
     +       STORM_TAX_DEDUCTION,          
     +       VACATION_TAX_DEDUCTION        
C
      integer*2 class_check/100/,START_STUDY_ENDPOINT,TEMP_I2
!      CHARACTER (LEN=256) :: GET_SCENAME
      CHARACTER (LEN=5) :: GET_SCENAME
      LOGICAL*1 PARENT_HAS_LINKED_SBUS,
     +          PARENT_HAS_LINKED_SUBS,
     +          MONTAUK_ACTIVE,
     +          CREDITS_IN_INCOME_STATEMENT,
     +          MONTAUK_IS_ACTIVE,
     +          CREDITS_ARE_IN_INCOME_STATEMENT,
     +          SYSTEM_BASED_FORECAST,
     +          NERC_REGION_BASED_FORECAST
      LOGICAL*1 VERSION_6_OR_GREATER/.TRUE./
      CHARACTER*1 REPORT_THIS_CLASS
      REAL*4 CONSOLIDATED_FED_NOL_GEN,
     +       CONSOLIDATED_FED_NOL_USED,
     +       CONSOLIDATED_FED_CREDITS_USED,
     +       CONSOLID_AVAILABLE_AMT_CREDITS,
     +       CONSOLD_AVAIL_FED_TAX_CREDIT,
     +       AMT_INCOME_ADDENDUM,
     +       COMMON_STOCK_2_ELIMINATE,
     +       COMMON_STOCK_BUYBACK_ELIMINATED,
     +       MIPS_INCOME_TAX_DEDUCTION,
     +       CONSOLIDATED_FED_TAX_CREDITS,
     +       CONSOLID_FED_SEC_29_TAX_CREDITS,
     +       CONSOLID_FED_SEC_42_TAX_CREDITS,
     +       CONSOLIDATED_STATE_TAX_CREDITS,
     +       CONSOLID_RETAINED_EARNINGS_BAL,
     +       CONSOLID_OCI_EARNINGS_BAL,
     +       CONSOLIDING_ADJ_RETN_EARN_BAL,
     +       SUB_COLUMN_TOTAL_SUB_INCOME,
     +       SUB_COLUMN_TOTAL_SUB_DIVIDEND,
     +       CONSOLD_COMMON_EQUITY_BAL,
     +       CONSOLD_BOY_DEFERRED_TAXES_DR,
     +       CONSOLD_BOY_DEFERRED_TAXES_CR,
     +       CONSOLD_BOY_OTHER_LT_LIABS,
     +       CONSOLD_BOY_ACCOUNTS_PAYABLE,
     +       CONSOLD_BOY_ACCOUNTS_RECIABLE,
     +       CONSOLD_BOY_SUB_INVESTMENT,
     +       CONSOLD_BOY_RETAINED_EARNINGS,
     +       CONSOLIDATED_BOY_FUNDS_BALANCE,
     +       CONSOLIDATED_LTD_BALANCE_WO_CURRENT_LTD,
     +       CONSOLIDATED_LTD_BALANCE,
     +       CONSOLIDATED_INVESTMENT_INCOME_RECEIVABLE,
     +       CONSOLD_BOY_NET_DEFERRED_DEBITS,
     +       CONSOLD_BOY_CWIP,
     +       CONSOLD_BOY_OTHER_ASSETS,
     +       CONSOLD_BOY_CURRENT_ASSETS,
     +       CONSOLD_BOY_OTHER_DEFERRED_CREDITS,
     +       CONSOLD_BOY_REGULATORY_DEFERRED_CREDITS,
     +       CONSOLD_BOY_GAIN_ON_REAQUIRED_DEBT,
C     +       CONSOLD_BOY_,
     +       DD_DEFERRED_EXPENSE_CASH,
     +       DD_ATL_CURRENT_TAX_EXPENSE,
     +       DD_BTL_CURRENT_TAX_EXPENSE,
     +       CONCOLIDATED_INCOME_TAX_ACCRUAL
      INTEGER*2 CS_DECLARATION_MONTH(4),SHARE_LEAD
      LOGICAL*1 WE_ARE_CONSOLIDATING
      REAL*4 CLASS_OTH_LIAB_SALE_ASSETS,NET_DEFERRED_DEBIT_ADJUSTMENT,
     +       DEFERRED_DEBIT_ADJUSTMENT,
     +       RATE_BASE_CASH_ADJ,ADJUSTMENT_2_DEFERRED_TAXES_BAL,
     +       ADJUSTMENT_2_DEFERRED_ITCS_BAL,RETAINED_EARNINGS_ADJ,
     +       EXTRA_ORDINARY_EXPENSE,LT_LIAB_BAL_ADJ,CWIP_BALANCE_ADJ,
     +       BAL_SHEET_RE_SUB_ADJ,EXP_DEFERRED_FUEL_EXPENSE,
     +       CS_BUYBACK_ADJ_RETAINED_ERNING,
     +       CLASS_PTCs(0:12)
      REAL*4 DEF_TAXES_FROM_NOLS_AMT_CREDITS,DEBT_FILE_ISSUE_EXPENSE
C
C INTERNAL VARIABLES THAT ARE NOT IN THE OUTPUT DATA SET
C
      REAL*4,CONSOLIDATING_PRIOR_INBALANCE,
     +       TOTAL_SUB_PRIOR_INBALANCE,
     +       TOTAL_SBU_PRIOR_INBALANCE
      REAL*4,ALLOCATABLE :: SBU_CASH_OTH_ASSET(:),
     +       SBU_DSM_CAPITIAL(:),
     +       SBU_BTL_LEASE_PAYMENTS(:),
     +       SBU_ATL_LEASE_PAYMENTS(:),
     +       SBU_CLASS_OTH_LIAB_SALE_ASSETS(:),
     +       SBU_RETIREE_MEDICAL_PAYMENTS(:),
     +       CLASS_PRIOR_INBALANCE(:)
      REAL*4 EXP_BOOK_DEPRECIATION,
     +       EXP_FILE_PROPERTY_TAXES,
     +       EXP_FILE_OTHER_TAXES,
     +       EXP_FILE_REVENUE_TAXES
      LOGICAL*1 WKP_ACTIVE,WEST_KOOTENAY_POWER,GreatRiver
      INTEGER*2 REPORTING_CLASS_ID,REPORTING_ASSET_CLASS
      REAL*4 R_COVERAGE_RATIO,FEDERAL_TAX_TABLE
      INTEGER*2 ELIMINAITON_CLASS_ID_NUM,PARENT_CLASS_ID_NUM,
     +          ID_NUM,MAX_LINKED_CLASSES,L,LINK_POS,J
C     INTEGER*2 R_PARENT_CLASS_ID
      INTEGER*2, ALLOCATABLE :: DEFINED_CLASS_POINTER_LIST(:),
     +          CLASS_LINKED_LEVEL(:),CLASS_AT_LEVEL(:),
     +          YEAR_CLASS_DEACTIVATED(:),
     +          ACTIVATE_CLASS_IN_YEAR(:)
      INTEGER*2 R_ACTIVATE_YR,R_DEACTIVE_YR,
     +          R_MO_ACTIVE,R_MO_DEACT,
     +          DEFINED_CLASSES,
     +          CLASS_LEVEL,
     +          LAST_CLASS_LEVEL,
     +          LINKED_LEVEL
      REAL*4 TAXES_ACCRUAL_ADJ,
     +       FEDERAL_TAX_EXCLUSION_ADJ,
     +       LTD_LAGGED_INTEREST_PAYMENT,
     +       PS_LAGGED_DIVIDEND_PAYMENT,
     +       ACCOUNTS_RECEIVABLE_BOY,
     +       ACCOUNTS_RECEIVABLE_EOY,
     +       ACCOUNTS_PAYABLE_BOY,
     +       ACCOUNTS_PAYABLE_EOY,
     +       PARENT_CASH_CS_DIVIDEND_PAYMENT,
     +       REGULATORY_DEFERRED_CREDITS_BAL_BOY,
     +       GAIN_ON_REAQUIRED_DEBT_BAL_BOY,
     +       OTHER_DEFERRED_CREDITS_BAL_BOY
      REAL*4, ALLOCATABLE :: ACCOUNTS_RECEIVABLE(:),
     +       ACCOUNTS_PAYABLE(:),
     +       COMMON_DIVIDEND_PAYMENT(:),
     +       FUEL_INVENTORY(:),
     +       DEFERRED_FUEL_BALANCE(:),
     +       OPENING_CASH_BALANCES(:),
     +       CLASS_MATERIALS_N_SUPPLIES(:),
     +       CLASS_GAS_STORAGE(:),
     +       CLASS_DEFERRED_PURCHASE_GAS(:),
     +       ACQUISITION_PREMIUM(:),
     +       LEVEL_SUMATION(:,:),
     +       BALANCE_SHEET_ROLLUPS(:,:,:)
      REAL*4 OPREV_IN_ACCTS_RECEIVABLE,
     +       ADDEN_ACCOUNTS_RECEIVABLE,
     +       EXP_IN_ACCTS_PAYABLE,
     +       ANNUAL_INVOICES_RECEIVED,
     +       ADDEN_ACCOUNTS_PAYABLE
      REAL*4 NEW_SUB_ACQUISITION_GOODWILL
      INTEGER*2 R_YR
      LOGICAL*1 TEST_ELIMINATIONS,SEPARATE_ELIMINATIONS
      LOGICAL*1 RETURN_CL_INTRA_EXPENSES,
     +          SUBS_ACTIVE,REPORT_HEADER_ACTIVE/.FALSE./,
     +          THIS_IS_REPORTING_CLASS,SUBS_ACTIVE_FOR_REPORTING
      CHARACTER*30 R_CLASS_NAME
      INTEGER*2 R_MAX_CLASS_NUM,R_CLASS
C     REAL*4 R_VARIABLE_VALUE(0:*)
C
C SRP STUFF
C
C INTERVAL VARIABLES
C
      LOGICAL*4 WRITE_THE_RESULTS
      LOGICAL*1 ASSET_REPORTS_ACTIVE,ASSET_CLASS_REPORTS,
     +          ST_JOE,WRITE_MONTHLY_INFOR
      INTEGER*2 ITER,MAX_ITER,ASSET_YR,CLASS_COUNTER,
     +          MIN_ITER
      REAL*4 FUNDS,CAPITAL_WITH_STD,R_TEMP,
     +       RETIREMENT_MEDICAL_FUND_RETURN,
     +       OCI_RETIREMENT_MEDICAL_FUND_RETURN,
     +       OCI_NUCL_FUND_RETURN,
     +       TOTAL_CAPITAL,PRIVIOUS_BOOK_VALUE
c     PARAMETER(MAX_ITER=20)
      INTEGER*2 CLASSES_FOUND,LOAD_MASTER_CLASS_LIST,I,READ_TAX_LOSSES
      INTEGER*2 NUM_OF_ACTIVE_CLASSES,INIT_CLASS,ASSET_CLASS_ID,
     +          NUMBER_OF_REPORTING_CLASSES
      INTEGER*4 IOS
      INTEGER*2, ALLOCATABLE :: TEMP_LIST(:),MASTER_CLASS_LIST(:),
     +          SBU_LINKED_LIST(:,:),
     +          SUBs_LINKED_TO_PARENT(:),TEMP_LIST2(:),
     +          TEMP_CLASS_LINKED_LEVEL(:),LINKED_TO(:),
     +          LINKED_TO_COMPANY(:)
      INTEGER*2 MAX_INIT_CLASS_NUM,COMPANY_ID
      INTEGER*2 R_LINKED_CLASS
      LOGICAL*1 R_CLASS_IS_LINKED_TO_PARENT
      INTEGER*4 VALUES_2_ZERO,VALUES_2_INIT
      LOGICAL*1 SALT_RIVER_PROJECT,IOU_UTILITY/.TRUE./,INCOME_CONVERGED,
     +          FUNDS_BALANCE,CONVERGED,TAXES_CONVERGED,
     +          DIVIDENDS_CONVERGED,PARENT_CLASS,SUBSIDIARY_CLASS,
     +          REGULATED_CAPATIAL_STRUCTURE,
     +          RETAIN_POST_RETIREMENT_EARNINGS
      CHARACTER*1 UTILITY_TYPE,REVENUE_TAX_BASIS
      LOGICAL*1 VOID_LOGICAL,CLASS_EMISSIONS_CREDITS,
     +          REPORT_CLASS_EMISSIONS_INFO,ZERO_TOTAL_EMIS_VARS,
     +          RETURN_CL_INTRA_CLASS_REVENUES,CL_INTRA_EXISTS,
     +          RETURN_NOLS_INFO,RETURN_CONSOLIDATED_NOLS_INFO,
     +          RETURN_CURRENT_NOLS_INFO,
     +          WVPA_PROCESS_RATE_STRUCTURES,
     +          WVPA_RATES_TRACKER_OBJECT,
     +          WVPA_RATE_TRACKER_REPORT,
     +          WVPA_MEMBER_ACCRUED_REVS,
     +          WVPA_INIT_TRACKER_BALANCES,
     +          WVPA_SET_FUEL_TRACKER
      REAL*4 RETURN_ON_RATEBASE,LEASOR_NF_AMORTIZATION
      REAL*4 NOT_AVAIL
      PARAMETER(NOT_AVAIL=-999999.)
      CHARACTER*1 DPS,DPR,CASH
      CHARACTER*1 DPS_CASH,DPR_CASH
      PARAMETER(DPS='S',DPR='R',CASH='C',DPS_CASH='H',DPR_CASH='P')
C
C RUN SWITCHES
C
      CHARACTER*1 ADD_2_INCOME_STATEMENT
C
C BALANCE SHEET AND RATE BASE VALUES
C
      REAL*4 TOTAL_LIABILITIES,TOTAL_ASSETS,ASSETS_NEC,
     +       CHANGE_IN_WORKING_CAPITIAL,CUSTOMER_DEPOSITS,
     +       ASSET_CLASS_RATE_BASE,RATE_BASE_ASSET_NEC,
     +       RATE_BASE_CAPITIALIZED_LEASES,
     +       PRODUCTION_CHANGE_IN_RECEIVABLES
     
      REAL*4 RATE_BASE_DEF_TAXES,RATE_BASE_PLANT_IN_SERVICE
      REAL*4 RATE_BASE_DEFERRED_DEBITS,RATE_BASE_NUC_FUEL,
     +     RATE_BASE_CWIP,RATE_BASE_DEF_ITC,
     +     RATE_BASE_NUC_DECOM,RATE_BASE_CIAC
      REAL*4 NF_DEFERRED_DEBITS_RATE_BASE,
     +       NF_SL_TAX_DEPRECIATION
      REAL*4,ALLOCATABLE :: CLASS_NUC_DECOM_TRUST_BAL(:),
     +       CLASS_NUC_DECOM_INC_EARNINGS(:),
     +       CLASS_NUC_DECOM_BAL_EARNINGS(:),
     +     DEFERRED_DEBITS_RATE_BASE(:,:),
     +     DEFERRED_CREDITS_IN_RATE_BASE(:,:),
     +     NUC_FUEL_RATE_BASE(:,:),
     +     CWIP_IN_RATE_BASE(:,:),
     +     NUC_DECOM_RATE_BASE(:,:),
     +     CIAC_RATE_BASE(:,:),
     +     PLANT_IN_SERVICE_RATE_BASE(:,:),
     +     ASSET_NEC_IN_RATE_BASE(:,:),
     +     CLASS_ADDENDUM_2_RATE_BASE(:),
     +     POST_RETIREMENT_MEDICAL_FUND(:),
     +     POST_RETIREMENT_MED_PAYABLE(:),
     +     NUC_DECOM_FUND_LIABILITY(:),
     +     LONG_TERM_INVESTMENTS(:),
     +     CAPITIALIZED_LEASES_RATE_BASE(:,:),
     +     DEBT_FILE_INVESTMENTS(:),
     +     NOTES_RECEIVABLE(:),
     +     GRE_OTH_PROP_TAXES(:),
     +     NOTES_PAYABLE(:),
     +     OTHER_DEFERRED_CREDITS_BAL(:,:),
     +     REGULATORY_DEFERRED_CREDITS_BAL(:,:),
     +     GAIN_ON_REAQUIRED_DEBT_BAL(:,:)
      REAL*4, ALLOCATABLE :: CLASS_GPV(:,:),
     +     NET_UTILITY_PLANT(:,:),
     +     CLASS_CUMULATIVE_DEPRECIATION(:,:),
     +     RATE_BASE(:,:),
     +     CLASS_CWIP(:,:),
     +     CLASS_NET_NF_VALUE(:,:),
     +     CUMULATIVE_NUCLEAR_BURN(:),
     +     NET_NUCLEAR_FUEL_ADJ(:),
     +     CUM_RATE_BASE_NUCLEAR_BURN(:),
     +     CLASS_REVENUES(:),
     +     CUSTOMER_DEPOSITS_BAL(:,:),
     +     CIAC_BALANCE(:,:),
     +     CUMULATIVE_BOOK_DEP_ADJUSTMENTS(:),
     +     CUMULATIVE_GPV_ADJUSTMENTS(:),
     +     AI_CLASS_CWIP(:),
     +     CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS(:)
C     
      REAL*4, ALLOCATABLE :: LINEC(:,:),COMMON_STOCK(:,:),
     +      COMMON_SHARES(:,:),PREFERRED_STOCK(:,:),LONG_TERM_DEBT(:,:),
     +      PREFERRED_STOCK_ADDENDUM(:),
     +       LONG_TERM_DEBT_ADDENDUM(:),
     +       WEIGHTED_CLASS_PS_COST(:),
     +       WEIGHTED_CLASS_LTD_COST(:)
C
C RATIOS AND PERFORMANCE MEASURES
C
      REAL*4 AVERAGE_EQUITY,RETURN_ON_EQUITY,DIVIDEND_PAYOUT,
     +     AVERAGE_SHARES,EARNINGS_PER_SHARE,RETURN_MEASURE,
     +     TOTAL_WEIGHTED_COST,TOTAL_WIEGHTED_CAPITAL
C
C ADJUSTMENTS
C
      REAL*4 INTRA_COMPANY_REVENUE,
     +     INTRA_COMPANY_NF_BURN
C
C INCOME STATEMENT VARIABLES
C
      REAL*4 CASH_4_INVESTMENTS
      REAL*4 BTL_TAXABLE_INCOME,
     +       PARENT_TAXES_PAID,
     +       PARENT_MARKET_TO_BOOK,
     +       PARENT_AVERAGE_SHARES,
     +       PARENT_YEAR_END_SHARES,
     +       PARENT_STOCK_BOOK_VALUE,
     +       PARENT_STOCK_MARKET_PRICE, 
     +       PARENT_DIVIDEND_PER_SHARE,
     +       PARENT_COMMON_STOCK_ISSUED,
     +       PARENT_AVERAGE_STOCK_PRICE,
     +       PARENT_SUBSIDIARY_INCOME,
     +       PARENT_AVERAGE_EQUITY 
      REAL*4 PARENT_EQUITY_RATIO,
     +       PARENT_EQUITY_RATE,
     +       PARENT_EQUITY_RISK_ADJ,
     +       PARENT_PS_RATE,
     +       PARENT_PS_RATIO,
     +       PARENT_LTD_RATE,
     +       PARENT_STD_RATE,
     +       PARENT_STATE_TAX_RATE
      REAL*4 CLASS_INC_EMIS_EXPENSE,CLASS_INC_EMIS_REVENUE,
     +       ATL_EMISSION_CREDIT_EXPENSE,ATL_EMISSION_CREDIT_REVENUE,
     +       WVPA_EMISSIONS_EXPENSE
      REAL*4 EMISSION_CREDIT_EXPENSE,
     +     CLASS_NUCLEAR_FUEL_EXPENSE,
     +     CLASS_BORROWED_AFUDC_RATE,AFUDC_BORROWED_RATE,
     +     STOCK_BOOK_VALUE,
     +     STD_INTEREST,
     +     REVENUES_OTHER,
     +     REVENUES_OPERATING,
     +     GROSS_PLANT_VALUE,
     +     CWIP,
     +     GROSS_PLANT_VALUE_PLUS_CWIP,
     +     CUMULATIVE_DEPRECIATION,
     +     NET_NF_VALUE,
     +     UTILITY_PLANT_NET,
     +     ASSETS_OTHER,
     +     SUBSIDIARY_INVESTMENT,
     +     LEASES_CAPITIALZIED,
     +     DECOMMISIONING_FUND_BAL,
     +     DD_BALANCE_NET,
     +     DEFERRED_REVENUES_CUM,
     +     DEFERRED_TAXES_DR_BAL,
     +     CASH_BALANCE,
     +     ASSET_NEC,
     +     COMMON_STOCK_BAL,
     +     RETAINED_EARNINGS_BAL,
     +     COMMON_EQUITY_BAL,
     +     PREFERRED_STOCK_BAL,
     +     LONG_TERM_DEBT_BAL,
     +     TOTAL_CAPITIAL_BAL,
     +     SHORT_TERM_DEBT_BAL,
     +     CUSTOMER_DEPOSITS_BALANCE,
     +     CIAC_BAL,
     +     DEF_TAX_CR_BAL,
     +     DEF_ITC_BAL,
     +     LIABILITIES_NEC,
     +     TAXABLE_INCOME_B4_DEDUCTIONS,
     +     TAX_DEDUCTIBLE_EXPENSES_BOOK,
     +     ATL_STATE_TAXES,
     +     ATL_FEDERAL_TAXES,
     +     OTHER_AND_ENVIRONMENTAL_TAXES,
     +     TAX_CREDITS,
     +     DIVIDEND_FROM_SUBSIDIARY,
     +     TAX_PAYMENTS_2_PARENT_FROM_SUB, 
     +     INCOME_TAXES_CONSOLIDATED,
     +     CONSOLIDATED_STATE_TAX_RATE,
     +     TAXES_PAID_BY_PARENT,
     +     CONSTRUCTION_AND_NET_INVESTMENT,
     +     CHANGE_IN_FUNDS_B4_FINANCING,
     +     EXTERNAL_FINANCING_PERFORMED,
     +     CHANGE_IN_CASH,
     +     INCOME_BEFORE_CAPITAL_SERVICE,
     +     FUNDS_FROM_OPERATIONS,
C
C TAX ITEMS
C
     +     CLASS_NON_VARIABLE_EXPENSE,
     +     OPERATING_REVENUE_TAX,
     +     CLASS_REVENUE_TAX_REVENUES,
     +     TOTAL_EXPENSE_AND_TAXES,
     +     OPERATING_INCOME,
     +     NET_PROFIT_OR_LOSS, 
     +     CAPITIALIZED_INTEREST,
     +     CONSTRUCTION_TAX_EXPENSE,
     +     TAXABLE_INCOME,
     +     LOCAL_TAX_RATE,
     +     ADJ_2_LOCAL_TAXES,
     +     NORMALIZATION_TAX_RATE,
     +     TOTAL_TAX_EXPENSE,
     +     TOTAL_NON_CASH_EXPENSES,
     +     AI_AFUDC_ON_CASH,
     +     SERVICE_TRANSACTION_EXPENSE,
     +     TOTAL_INCOME_TAXES,
     +     CONSOLIDATED_INCOME_TAXES,
     +     CONSOLIDATED_FEDERAL_TAXES,
     +     CONSOLD_FED_TAXES_B4_CREDITS,
     +     CONSOLIDATED_FED_TAXABLE_INCOME,
     +     CONSOLD_FED_INCOME_AFTER_NOLS,
     +     CONSOLIDATED_STATE_TAXES,
     +     SUB_FEDERAL_TAXABLE_INCOME,
     +     CONSOLIDATED_TAX_ADJUSTMENT,
     +     CONSOLIDATED_TAX_LIB_ADJUSTMENT,
     +     ELIMINATION_CASH_ADJUSTMENT,
     +     SL_TAX_DEPRECIATION,
     +     ATL_CONSOLIDATED_FEDERAL_TAXES,
     +     BTL_CONSOLIDATED_FEDERAL_TAXES,
     +     PARENT_ATL_FEDERAL_TAX,
     +     PARENT_BTL_FEDERAL_TAX
      REAL*4 CONSOLIDATED_LOCAL_TAX_ADJ,
     +     CONSOLIDATED_STATE_TAX_ADJ,
     +     CONSOLIDATED_FED_TAX_ADJ,
     +     INTRA_TAXES_PAYABLE,
     +     SUB_NON_INCOME_TAX_ACCRUALS
      REAL*4 STATE_TAXABLE_INCOME,STATE_TAXABLE_INCOME_AFTER_NOLS,
     +     FEDERAL_TAXABLE_INCOME,FED_TAXABLE_INCOME_AFTER_NOLS,
     +     ADJUST_4_FED_NOLS,ADJUST_4_STATE_NOLS,
     +     CLOSE_CLASS_STATE_TAX_INFO,
     +     CLOSE_CLASS_FED_TAX_INFO,
     +     ADJUST_CONSOLD_4_FED_CREDIT
      REAL*4 VOID_REAL,CLOSE_FED_CREDIT,ADJUST_4_FED_CREDIT,
     +       CLOSE_STATE_CREDIT
      REAL*4 ADJUST_4_FED_CONSOLIDATED_NOLS,CLOSE_CONSOLIDATED_TAX_INFO
      REAL*4 AFUDC_EQUITY,
     +     INCOME_B4_INTEREST,
     +     INTEREST_ON_LONG_TERM_DEBT,
     +     AFUDC_BORROWED,
     +     INCOME_AFTER_INTEREST,
     +     EXTRAORDINARY_EXPENSE,
     +     EARNINGS_AVAILABLE_TO_COMMON,
     +     YEAR_END_UNUSED_CREDIT_BAL
      REAL*4 FEDERAL_INCOME_TAX_RATE,STORE_FEDERAL_TAX_RATE
      INTEGER*2 INCOME_UNIT/0/,ASSET_CLASS_INCOME_HEADER,
     +          LINKED_CLASS_ID,IREC
      INTEGER*4 START_RECORD/3/,OUTPUT_RECORD,
     +          BASE_OUTPUT_RECORD
      CHARACTER*30 ASSET_CLASS_NAME*38,STR_CLASS_NUM*4,
     +             CLASS_NAME(:),
     +             CLASS_TYPE(:)*1,ASSET_CLASS_TYPE*1,
     +             CURRENCY_DENOMINATION(:)*1,
     +             FED_TAX_EXEMPT(:)*20,INT_ASSET_CLASS_NAME,
     +             PARENT_CLASS_NAME,
     +             ASSET_CLASS_TYPE_STR*15
      LOGICAL*1 REPORT_CLASS(:),CONSOLIDATING_CLASS(:),
     +          REPORT_ZEROS_4_CLASS(:)
      INTEGER*2 LINKED_2_CLASS(:)
      ALLOCATABLE :: CLASS_NAME,CLASS_TYPE,LINKED_2_CLASS,
     +               CURRENCY_DENOMINATION,
     +               REPORT_CLASS,
     +               FED_TAX_EXEMPT,
     +               CONSOLIDATING_CLASS,
     +               REPORT_ZEROS_4_CLASS
      INTEGER*2 NUM_OF_SUBSIDIARIES,NUM_OF_BUSINESS_UNITS
      INTEGER*2 SUBS_LINKED_2_PARENT,NUM_OF_REGULATED_UNITS,
     +          CLASSES_IN_LIST,MAX_LINKED_LEVEL 
      LOGICAL*1 ALL_CLASS_BUSINESS_UNITS,ALL_CLASS_SUBSIDIARIES,
     +          MIX_OF_SUBS_AND_BUSINESS_UNITS
      LOGICAL*1 REAL_PROPERTY_TAX_VALUES
      REAL*4 GPV_WITH_CWIP,
     +     GPV_NO_CWIP,
     +     NPV_WITH_CWIP,
     +     NPV_NO_CWIP,ZERO/0./
C
C DEBT SECTION
C
      INTEGER*2 NUM_OF_DB_CLASSES/0/,MAX_DB_CLASS_NUM/0/
      LOGICAL*1 DB_CLASS_EXISTS
      REAL*4 PREFERRED_STOCK_RETIREMENTS,
C    +     LONG_TERM_DEBT_ANNUALIZED_INT,
     +     SHORT_TERM_DEBT_ISSUED
      REAL*4 DEBT_FILE_PREFERRED_DIVIDENDS
      REAL*4 R_PREFERRED_STOCK_ISSUED,R_LONG_TERM_DEBT_ISSUED,
     +     R_INVESTMENT_IN_AFILLIATES,
     +     R_LOANS_TO_AFILLIATES,
     +     OTHER_INCOME_AFILLIATES,
     +     INVESTMENT_IN_AFILLIATES,
     +     INTEREST_INCOME_AFILLIATES,
     +     LOANS_TO_AFILLIATES,
     +     PS_PREM_BAL,
     +     PS_PREM_AMORT,
     +     LTD_PREM_BAL,
     +     LTD_PREM_AMORT,
     +     PS_ISSUING_BAL,
     +     PS_ISSUING_AMORT,
     +     LTD_ISSUING_BAL,
     +     LTD_ISSUING_AMORT,
     +     LTD_PS_ISSUE_TAX_EXPENSE,
     +     LTD_PS_DEFERRED_TAX_BASIS,
     +     LTD_NEW_PREM_ADJUSTMENT,
     +     NET_DEFERRED_CASH_ADJ
      REAL*4, ALLOCATABLE :: ANNINT(:,:),LTDINT(:,:),LTDRET(:,:),
     +     PSDIV(:,:),
     +     PSRED(:,:),RATE_REVENUE(:,:),
     +     ANN_PS_DIV(:,:),
     +     ANN_LTD_INT(:,:),
     +     NET_DEFERRED_EXPENSE_CASH(:,:),
     +     ANNUAL_DEFERRED_CASH_AMORT(:,:)
C      REAL*4 NET_DEFERRED_CASH_VALUE
C
C DEBIT SECTION
C
      REAL*4 ATL_DEF_TAXES
      INTEGER*2 NUM_OF_DD_CLASSES/0/,MAX_DD_CLASS_NUM/0/
      LOGICAL*1 DD_CLASS_EXISTS
      REAL*4 DD_BALANCE,
     +       DD_CUM_AMORTIZATION,
     +       DD_CUM_RB_AMORTIZATION,
     +       BTL_AMORTIZATION_EXP,
     +       BTL_DEFERRED_TAXES_CR,
     +       TOTAL_DEFERRED_TAXES_DR
      REAL*4, ALLOCATABLE :: NET_DD_BALANCE(:,:),
     +       OTHER_DD_BALANCE(:,:),
     +       GOODWILL(:,:),
     +       UNAMORTIZED_INTEREST_BALANCE(:,:),
     +       UNAMORTIZED_ISSUE_EXP_BALANCE(:,:),
     +       CUM_AMORT_ADJUSTMENT(:),
     +       CUM_DD_RATEBASE_ADJUST(:),
     +       CUM_GOODWILL_AT(:),
     +       CUM_REG_ASSET_ADJ_AT(:),
     +       CUM_FASB133_ADJ_AT(:),
     +       CUM_FASB109_ADJ_AT(:),
     +       CUM_DD_UNAMORT_INTR_ADJ_AT(:),
     +       CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT(:),
     +       DEBT_FILE_UNAMORT_INTR_BAL(:),
     +       DEBT_FILE_UNAMORT_ISS_EXP_BAL(:),
     +       DEBIT_FILE_UNAMORT_ISS_EXP_BAL(:),
     +       NUCLEAR_DECOM_FUND_BAL_ADJ_AT(:),
     +       CAP_LEASES_BAL_ADJ_AT(:),
     +       ASSETS_NEC_BAL_ADJ_AT(:),
     +       PREFERRED_STOCK_BAL_ADJ_AT(:),
     +       LTD_BAL_ADJ_AT(:),
     +       STD_BAL_ADJ_AT(:),
     +       NUC_DECOM_LIAB_BAL_ADJ_AT(:),
     +       LIABS_NEC_BAL_ADJ_AT(:),
     +       OTHER_INVESTMENT_BAL_ADJ_AT(:),
     +       NOTES_RECEIVABLE_BAL_ADJ_AT(:),
     +       POST_RETIRE_MEDICAL_BAL_ADJ_AT(:),
     +       DEFERRED_REVENUES_BAL_ADJ_AT(:),
     +       DEFERRED_FUEL_BAL_ADJ_AT(:),
     +       DEFERRED_PURCH_GAS_BAL_ADJ_AT(:),
     +       LT_INVEST_BAL_ADJ_AT(:),
     +       ST_INVEST_BAL_ADJ_AT(:),
     +       FUEL_INVENTORY_BAL_ADJ_AT(:),
     +       GAS_IN_STORAGE_BAL_ADJ_AT(:),
     +       MATRIAL_SUPPLY_BAL_ADJ_AT(:),
     +       ACCOUNTS_RECV_BAL_ADJ_AT(:),
     +       UNBILLED_REV_BAL_ADJ_AT(:),
     +       TAXES_RECEIVABLE_BAL_ADJ_AT(:),
     +       CURRENT_LT_DEBT_BAL_ADJ_AT(:),
     +       NOTES_PAYABLE_BAL_ADJ_AT(:),
     +       CUSTOMER_DEPOSIT_BAL_ADJ_AT(:),
     +       CICA_BAL_ADJ_AT(:),
     +       POST_RETIRE_PAYABLE_BAL_ADJ_AT(:),
     +       ACCRUED_PENSION_BAL_ADJ_AT(:),
     +       DEFERRED_GAINS_BAL_ADJ_AT(:),
     +       storm_RESERVE_BAL_ADJ_AT(:),
     +       ACCOUNTS_PAYABLE_BAL_ADJ_AT(:)
C
C EXISTING ASSETS SECTION
C
      INTEGER*2 NUM_OF_EA_CLASSES/0/,MAX_EA_CLASS_NUM/0/
      LOGICAL*1 EA_CLASS_EXISTS
      REAL*4 EA_TAX_BOOK_DEP,
     +     DEFERRED_TAX_BASIS,
     +     EA_PROPERTY_TAX_GPV,
     +     EA_PROPERTY_TAX_NPV,
     +     EA_DEFERRED_TAXES
C
C FUTURE ASSETS SECTION
C
      INTEGER*2 NUM_OF_FA_CLASSES/0/,MAX_FA_CLASS_NUM/0/
      LOGICAL*1 FA_CLASS_EXISTS,MODEL_ASSET_CLASS_EXISTS
      REAL*4 FA_CUMULATIVE_BOOK_DEP
      REAL*4 FA_CASH,FA_CAPITIALIZED,
     +     FA_AFDC_CASH,FA_AFDC_CAPITIALIZED,FA_ITC_CREDIT,
     +     FA_CURRENT_TAX_EXPENSES,
     +     FA_PROPERTY_TAX_GPV,FA_PROPERTY_TAX_NPV,
     +     FA_EXTRAORDINARY_EXPENSE,
     +     FA_NET_DEFERRED_DEBIT_BAL,NET_DD_WRITE_OFF_BALANCE,
     +     FA_SL_TAX_DEP, ! TBKDPT(I)
     +     FA_WO_ADJUSTMENT_2_CUM_BOOK_DEP, ! TBKDPA(I) write-off adjustment to cumulative book depreciaton
     +     FA_WO_ADJUSTMENT_2_CUM_AFDC_DEP, ! TAFDPA(I) write_off adj to cumulative afdc dep.
     +     FA_AFDC_BORROWED, ! TAFDCB(I)
     +     FA_WO_ADJUSTMENT_2_CUM_AFDC, ! TAFCAJ(I)
     +     FA_WO_ADJUSTMENT_2_CUM_AFEXP,  ! TAFEXP(I)
     +     FA_WO_ADJUSTMENT_2_CUM_DEF_TAX, ! TWODFT(I)
     +     FA_WO_ADJUSTMENT_2_CUM_AFDCF  ! TAFDCF(I)
C
C NUCLEAR FUEL SECTION
C
      INTEGER*2 NUM_OF_NF_CLASSES/0/,MAX_NF_CLASS_NUM/0/
      LOGICAL*1 NF_CLASS_EXISTS
      REAL*4 NF_CASH,
     +     NF_ENTERING_SERVICE,
     +     NF_AFUDC_CAPITIALIZED,
     +     NF_CURRENT_TAX_EXPENSE,
     +     NF_DEFERRED_DEBIT_BALANCE,
     +     NF_EXTRAORDINARY_EXPENSE,
     +     NAFEXP,NF_CLASS_ADJAFC,NWODFT,NAFDCB,NAFDCD,
     +     LEASOR_NF_SL_TAX_DEP,
     +     LEASOR_NF_TAX_DEP,
     +     NF_DEFERRED_TAX_BASIS,
     +     LEASOR_DEFERRED_TAX_BASIS,
     +     MONTHLY_NF_DEFERRED_TAXES_CR
C
C EXPENSE SECTION
C
      INTEGER*2 NUM_OF_EX_CLASSES/0/,MAX_EX_CLASS_NUM/0/
      LOGICAL*1 EX_CLASS_EXISTS
      REAL*4 FUEL_EXPENSE,
     +     PURCHASE_POWER_EXPENSE,
     +     VARIABLE_EXPENSE,
     +     FIXED_EXPENSE,
     +     EXP_FUEL_EXPENSE,
     +     EXP_PURCHASE_POWER_EXPENSE,
     +     EXP_FILE_VARIABLE_EXPENSE,
     +     EXP_FILE_FIXED_EXPENSE,
     +     OWNED_NF_BURN,
     +     OWNED_NF_BURN_EXP_FILE,
     +     OWNED_NF_BURN_SALES_FILE,
     +     OWNED_NF_BURN_CL_RESOURCES,
     +     LEASED_NF_BURN,
     +     LEASED_NF_BURN_EXP_FILE,
     +     LEASED_NF_BURN_SALES_FILE,
     +     LEASED_NF_BURN_CL_RESOURCES,
     +     NUC_FUEL_OWNED_BURN,
     +     NUC_FUEL_LEASED_BURN,
     +     DOE_NUC_FUEL_FEE,DOE_R300_DISPOSAL_COST,
     +     NUC_DECOMMISSIONING_COST,
     +     BTL_NUC_FUEL_DECOM_LIABILITY,
     +     NUC_FUEL_TOTAL_BURN,
     +     NF_NON_CASH_EXPENSE,
     +     NF_CASH_EXPENSE,
     +     EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +     EXPENSE_COLLECT_VIA_BASE_RATES,
     +     NF_BURN_IN_RATEBASE,
     +     DSM_EXPENSE,
     +     DSM_REBATE,
     +     EXPENSE_NOT_COLLECTED_IN_RATES,
     +     EXP_SERVICE_TRANSACTIONS,
     +     CLASS_EXP_EMIS_EXPENSE
      REAL*4 ADJUSTMENT_CLAUSE_REVENUES,
     +     BASE_RATES_REVENUES,
     +     SECONDARY_SALES_NOT_IN_RATES
      REAL*4 REFERENCE_BASE_REVENUES,MARKET_BASE_REVENUES,
     +     CLASS_FORECAST_REVENUES
C
C DSM SECTION
C
      INTEGER*2 NUM_OF_DSM_CLASSES/0/,MAX_DSM_CLASS_NUM/0/
      LOGICAL*1 DSM_ASSET_CLASS_EXISTS
      LOGICAL*1 DSM_EXPENSE_CLASS_EXISTS
      REAL*4 DSM_ADJ_CLAUSE_COLLECTIONS,
     +     DSM_CAPITIAL,
     +     DSM_CAPACITY,
     +     DSM_ENERGY,
     +     DSM_PARTICIPANT_COSTS,
     +     DSM_UTIL_NON_ELEC_COSTS,
     +     DSM_THIRD_PARTY_COSTS,
     +     DSM_OTH_PARTICIPANT_COSTS,
     +     DSM_CUM_BOOK_DEP,
     +     DSM_AFUDC,
     +     DSM_TAX_EXPENSE,
     +     DSM_DEFERRED_DEBIT,
     +     DSM_TAX_PREF_DEP,
     +     RB_DSM_AMORT,
     +     RB_DSM_DEFERRED_TAX_BASIS,
     +     RB_DSM_AFUDC,
     +     RB_DSM_TAX_EXPENSE,
     +     DSM_REGULATED_BOOK_DEP,
     +     DSM_REGULATED_TAX_DEP,
     +     DSM_REGULATED_DEFERRED_DEBIT,
     +     DSM_REGULATED_NPV,
     +     DSM_GPV_PROPERTY_TAX,
     +     DSM_NPV_PROPERTY_TAX,
     +     DSM_SL_TAX_DEP
C
C ENERGY LIMITED EXPENSE IITEMS
C
      INTEGER*2 NUM_OF_ENRG_CLASSES,MAX_ENRG_CLASS_NUM,
     +          RETURN_NUM_OF_HYDRO_CLASSES,RETURN_HYDRO_CLASS_POINTER
      LOGICAL*1 ENRG_CLASS_EXISTS
C
C CAPACITY LIMITED ADDITIONS
C
      INTEGER*2 MAX_CL_CLASS_NUM/0/,RETURN_CAP_LIMITED_POINTER,
     +          NUM_OF_CL_CLASSES,RETURN_NUM_CAP_LIMITED_CLASSES
      LOGICAL*1 CL_CLASS_EXISTS
      INTEGER*2 RETURN_CL_ASSET_CLASS_EXPENSES,VOID_INT2,
     +          RETURN_NUC_CL_ASSET_CLASS_EXPENSES,
     +          RETURN_CONTRACT_CLASS_INFO,
     +          RETURN_ANNUL_CUSTOMER_VARIABLES
      INTEGER*2 RETURN_ANNUL_DERIV_VARIABLES
      LOGICAL*1 RETURN_CL_ASSET_CLASS_PROD,
     +          RETURN_FUEL_DERIV_VARIABLES
C
C NOTE: 1 == PRODUCTION FROM RESOURCE TO MEET NATIVE LOAD
C       2 == DEFINED PURCHASE TO MEET NATIVE LOAD
C       3 == ECONOMY PURCHASE TO MEET NATIVE LOAD
C       4 == ECONOMY SALES WHICH INCREASE LOAD
C
      REAL*4 CL_ANN_CLASS_CAPACITY(4),
     +       CL_ANN_CLASS_ENERGY(4)
C
C REVENUES FROM CLASS FORECAST FILES
C
      INTEGER*2 MAX_RATE_REVENUE_CLASS_NUM/0/,
     +          NUM_OF_RATE_REVENUE_CLASSES/0/
      LOGICAL*1 RATE_REVENUE_CLASS_EXISTS
      REAL*4 RATE_CLASS_ENRG_REVENUES,
     +     RATE_CLASS_DEMAND_REVENUES,
     +     RATE_CLASS_CUSTOMER_REVENUES,
     +     RATE_CLASS_CUSTOMERS,
     +     RATE_CLASS_DEMAND,
     +     RATE_CLASS_ENERGY
      
C
C ASSET ADDITIONS SECTION
C
      INTEGER*2 NUM_OF_AA_CLASSES/0/,MAX_AA_CLASS_NUM/0/
      LOGICAL*1 AA_CLASS_EXISTS
C
      INTEGER*2 MAX_CLASS_NUM,YR,CLASS,CLASS_POS,R_YEAR,R_CLASS_POS
C
C INITIALIZATION FILE 
C
      INTEGER*2 MAX_INITIALIZATION_CLASS_NUM,NUM_OF_INITIZATION_CLASSES
      REAL*4 REGULATORY_ASSETS
C
C PARAMETER  VARIABLES
C
      INTEGER*2 DELETE
      REAL*4 NucDecom_Discount_Rate
      REAL*4, ALLOCATABLE :: INIT_PLANNING_PEAK(:,:),
     +     ABANDS(:,:),AFDC1C(:,:),AFDC2C(:,:),
     +     AFDCDP(:,:),BKDEPC(:,:),
     +     BOOK_VALUE_STOCK(:,:),TOTAL_CAPITIAL(:,:),CEPCUM(:,:),
     +     COMMON_EQUITY(:,:),STOCK_PRICE_YEAR_END(:,:),
     +     DDAMTC(:,:),DEPCUM(:,:),DEF_ITC_BALANCE(:,:),
     +     NAFC1C(:,:),NAFC2C(:,:),NF_IN_PROCESS(:,:),
     +     NFIS(:,:),NNFV(:,:),NPV(:,:),OTHER_ASSETS(:,:),PLANT(:,:),
     +     RBCWIP(:,:),RBDD(:,:),RBNF(:,:),RB_NF_IN_PROCESS(:,:),
     +     REARNC(:,:),SALES(:,:),SHORT_TERM_DEBT(:,:),
     +     INTEREST_ON_SHORT_TERM_DEBT(:,:),
     +     DEF_TAX_CR_BALANCE(:,:),
     +     WCCUM(:,:),OPERATING_REVENUES(:,:),
     +     STD_RATE(:,:),LIQUID_INVESTMENTS(:,:),
     +     NUC_DECOM_FUND_BAL(:,:),CUMTXNORM(:,:),BASE_REVENUE(:,:),
     +     OTHER_REVENUE(:,:),ADJ_CLAUSE_REVENUE(:,:),
     +     OTHER_LT_LIABILITY(:,:),
     +     CUM_DEF_REVENUES(:,:),NPV_RATEBASE(:,:), 
     +     CUM_ITC_DEF_RATEBASE(:,:),RBCWIP_AFDC_METH2(:,:),
     +     CUM_DEF_TAX_RATEBASE(:,:),RB_REG_DD(:,:),
     +     DEFERRED_EXPENSE_BALANCE(:,:),AMTBKPREF(:,:),
     +     AMTNEGBKPREF(:,:),AVAILCREDIT(:,:),
     +     BY_ADJUSTMENT_2_ECONOMIC_ASSETS(:),
     +     WEIGHTED_COST_OF_CAPITAL_BY(:),
     +     PARENT_SUB_CIAC_BALANCE(:),
     +     CIAC_CLASS_BALANCE(:), ! THIS IS THE BALANCE CAUSED BY ACTIVITY ONLY AT THE CLASS LEVEL
     +     INVESTMENT_IN_SUBSIDIARIES(:,:),
     +     CAPITIALZIED_LEASES(:,:),
     +     OPERATING_ASSETS_YEAR_END(:),
     +     DEFERRED_PURCHASE_POWER(:,:),
     +     PENSION_LIABILITY(:,:),
     +     DEFERRED_GAIN_FROM_SALES(:,:),
     +     STORM_RESERVE_BALANCE(:,:),
     +     ExecBenefitsBalance(:,:),
     +     IncentiveCompBalance(:,:),
     +     ACCRUED_VACATION_PAY_BALANCE(:,:),
     +     RB_INCLUDE_DEFERRED_TAX_DR(:,:),
     +     RB_INCLUDE_DEFERRED_REVENUES(:,:),
     +     RB_EXCLUDED_PENSION_LIABILITY(:,:),
     +     RB_EXCLUDED_DEFERRED_ASSET_GAIN(:,:),
     +     RB_EXCLUDED_STORM_RESERVE(:,:),
     +     RB_EXCLUDE_ACCRUED_VACATION_PAY(:,:),
     +     FASB143_NET_ASSET_VALUE(:,:),
     +     FASB143_LT_LIABILITY_VALUE(:,:),
     +     PROPERTY_TAX_BASIS(:,:),  ! 91&92 BASE YEAR
     +     FASB_87_INTANGIBLE_ASSETS(:),
     +     OTHER_COMPREHENSIVE_INCOME_BALANCE(:),   ! 103
     +     OPERATING_REVENUE_TAX_LAGGED_BASIS(:)    ! 104
      INTEGER*2, ALLOCATABLE :: STD_INTEREST_VECTOR(:),
     +          LTD_INTEREST_VECTOR(:),
     +          PS_DIVIDENDS_VECTOR(:),
     +          STI_INTEREST_VECTOR(:),
     +          LTI_INTEREST_VECTOR(:),
     +          CUSTOMER_DEPOSIT_INTREST_VECTOR(:),
     +          DECOM_FUND_INTEREST_VECTOR(:),
     +          RETIREMENT_FUND_INTEREST_VECTOR(:),
     +          CURRENCY_CONVERSION_VECTOR(:)
      REAL FASB_87_DEFERRED_TAX_ADJ_DR
C
C AUTO EXCLUSION VALUES
C
      REAL*4 EXCLUDE_SUB_INVESTMENT,
     +     EXCLUDE_SUB_COMMON_EQUITY,
     +     EXCLUDE_SUB_RETAINED_EARNINGS,
     +     EXCLUDE_SUB_OCI_EARNINGS,
     +     EXCLUDE_SUB_TAX_DEFERRALS_DR,
     +     TOTAL_SUB_COMMON_EQUITY,
     +     TOTAL_SUB_RETAINED_EARNINGS,
     +     TOTAL_SUB_OCI_EARNINGS,
     +     TOTAL_SUB_INVESTMENT,
     +     FIRST_LEVEL_SUB_COMMON_EQUITY,
     +     FIRST_LEVEL_SUB_EARNINGS,
     +     FIRST_LEVEL_SUB_INVESTMENT
      REAL*4 EXCLUDE_TAX_DEFERRALS_DR,
     +     EXCLUDE_STATE_NOL_TAX_DEF_DR,
     +     EXCLUDE_FED_NOL_TAX_DEF_DR,
     +     EXCLUDE_TAX_DEFERRALS_CR,
     +     EXCLUDE_ITC,
     +     EXCLUDE_BTL_TAXES,
     +     EXCLUDE_SUB_INCOME,
     +     EXCLUDE_COMMON_DIVIDENDS,
     +     EXCLUDE_STATE_TAXES,
     +     EXCLUDE_FED_TAXES,
     +     SBU_EXCLUDE_FED_TAXES,
     +     SBU_ATL_EXCLUDE_FED_TAXES,
     +       SUB_TAXABLE_INCOME,
     +       SUB_FED_TAX_PAYMENTS_2_PARENT,
     +       SUB_STATE_TAX_PAYMENTS_2_PARENT,
     +       SUB_FED_TAX_LIABILITY,
     +       SUB_STATE_TAX_LIABILITY,
     +       SUB_TOTAL_BTL_FEDERAL_TAXES,
     +       SUB_TOTAL_ATL_FEDERAL_TAXES,
     +       SUB_TOTAL_BTL_INTRA_FED_TAXES,
     +       BTL_INTRA_FEDERAL_TAXES,
     +       SUB_TOTAL_BTL_INTRA_STATE_TAXES,
     +       BTL_INTRA_STATE_TAXES
      REAL*4, ALLOCATABLE :: SUB_SBU_ACE_TAX_DEPRECIATION(:),
     +       SUB_SBU_TAX_PRE_DEPRECIATION(:),
     +       SUB_EQUITY_NEEDS_FROM_PARENT(:),
     +       SBU_CHANGE_DECOMMISSIONING_LIAB(:),
     +       SUB_INVESTMENT_IN_SUBS(:),
     +       PARENT_ACQUISITION_OF_SUB_COST(:),
     +       PARENT_ACQUISITION_GOODWILL(:),
     +       SUB_DIVIDEND_PAYMENTS_2_PARENT(:),
     +       SUB_EARNINGS_2_COMMON(:),
     +       SUB_EARNINGS_2_EXCLUDE(:),
     +       SUB_TOTAL_SUB_INCOME(:),
     +       SBU_DEFERRED_DEBIT_RATEBASE(:),
     +       SBU_DEFERRED_CREDIT_RATEBASE(:),
     +       SBU_ATL_TAX_EXPENSE(:),
     +       SBU_BTL_TAX_EXPENSE(:)
C
      REAL*4 CONSLD_YEAR_END_OP_ASSETS
C
C A&I VARIABLES
C
      REAL*4 AI_ANNUAL_CLASS_DEP,
     +       AI_ANNUAL_CLASS_TAX_DEP,
     +       AI_ANNUAL_CLASS_DEFERRED_TAX,
     +       AI_ANNUAL_CLASS_PREF_ITEMS,
     +       AI_CLASS_CASH,
     +       AI_CLASS_EXPENSE,
     +       AI_LAGGED_GPV
      REAL*4 R_AI_LAGGED_GPV,
     +       R_AI_CLASS_CASH,
     +       R_AI_ANNUAL_CLASS_DEP,
     +       R_AI_AFUDC_ON_CASH,
     +       R_AI_CLASS_EXPENSE
C
C ST JOE IRP STUFF 
C
      REAL*4 ST_JOE_BASE_ELECTRIC_REVENEUS,R_BASE_ELECTRIC_REVENEUS
      INTEGER*2 ST_JOE_ELECTRIC_CLASS,EMC_PA_CLASS
      PARAMETER (ST_JOE_ELECTRIC_CLASS=0)
C
C DUKE STUFF
C     
      LOGICAL*1 DUKE,DOE_FEES_IN_NUC_FUEL_COST,DUKE_IS_ACTIVE,
     +          CATAWBA_INFO,CPL_IS_ACTIVE,CPL_ACTIVE,
     +          EMPIRE_IS_ACTIVE,EMPIRE,CCN,MPS
      LOGICAL*1 UTILITY_IS_IP,IP_IS_ACTIVE
      LOGICAL*1 AMEREN,AMEREN_IS_ACTIVE/.FALSE./,
     +          PACIFICORP,PACIFICORP_IS_ACTIVE/.FALSE./,
     +          FirstEnergy,FirstEnergy_Is_Active/.FALSE./,
     +          ODEC,ODEC_NA3_ACTIVE
      REAL*4 TOTAL_AMEREN_MARKET_REVENUES,
     +       TOTAL_AMEREN_FUEL_EXPENSE,
     +       TOTAL_AMEREN_VARIABLE_EXPENSE
      REAL*4 LEVEL_MARKET_REVENUES,
     +       LEVEL_FUEL_EXPENSE,
     +       LEVEL_VARIABLE_EXPENSE
      INTEGER*2 RETURN_AMEREN_CL_CLASS_EXPENSES
C     REAL*4 CATAWBA_BY_DEBITS_BALANCE,CATAWBA_BY_DEF_TAX_BALANCE
      REAL*4 CATAWBA_REVENUES,
     +       CATAWBA_EXPENSES,
     +       CATAWBA_CAPACITY_PAYMENTS,
     +       CATAWBA_LEVEL_CAP_PAYMENTS,
     +       CATAWBA_OTHER_NET_REVENUES,
     +       CATAWBA_DEFERRED_DEBITS,
     +       CATAWBA_DEFER_TAXES_BAL_CR,
     +       CATAWBA_DEFERRED_TAXES_CR,
     +       CATAWBA_TOTAL_CAP_PAYMENTS,
     +       CATAWBA_CLASS_BTL_REVENUES
      REAL*4 CPL_ENERGY_2_PA,
     +       CPL_ENERGY_FROM_PA
      REAL*4 CATAWBA_ADJUSTMENT,JOINT_OWNERS_COSTS,
     +       CATAWBA_BURN_ADJUSTMENT
      REAL*4 R_NUC_FUEL_TAX_EXPENSE,
     +       R_NF_DEFERRED_TAX_BASIS,
     +       R_INC_NUCLEAR_FUEL_EXPENSE,
     +       R_NF_OWNED,
     +       R_NF_CASH_EXPENSE,
     +       R_NF_NON_CASH_EXPENSE,
     +       R_NF_SL_DEF_TAX_DEP
      LOGICAL*1 EXCLUDE_SBU_REVENUE_TAX,
     +          EXCLUDE_SBU_OTHER_TAXES,
     +          EXCLUDE_SBU_PROPERTY_TAX,
     +          EXCLUDE_SBU_STATE_INCOME_TAX,
     +          EXCLUDE_SBU_CAPITAL_TAX
      REAL*4 AMOUNT_OF_TAXED_CAPITAL
      REAL*4, ALLOCATABLE :: EXCLUDED_REVENUE_TAX_BASIS(:),
     +       EXCLUDED_REVENUE_TAX_BASIS_A(:),
     +       EXCLUDED_REVENUE_TAX_BASIS_B(:),
     +       EXCLUDED_REVENUE_TAX(:),
     +       EXCLUDED_OTHER_TAXES_REV(:),
     +       EXCLUDED_OTHER_TAXES_EXP(:),
     +       EXCLUDED_OTHER_TAXES(:),
     +       EXCLUDE_CAPITAL_TAXES_STATE(:),
     +       EXCLUDE_CAPITAL_TAXES_FED(:),
     +       EXCLUDE_CAPITAL_TAX_FED_BASIS(:),
     +       EXCLUDE_CAPITAL_TAX_STATE_BASIS(:),
     +       PROPERTY_VALUE_GPV_WITH_CWIP(:),
     +       PROPERTY_VALUE_GPV_NO_CWIP(:),    
     +       PROPERTY_VALUE_NPV_WITH_CWIP(:),
     +       PROPERTY_VALUE_NPV_NO_CWIP(:),
     +       EXCLUDED_SBU_PROPERTY_TAX(:),
     +       NUC_FUEL_RATE_BASE_AT(:),
     +       CWIP_IN_RATE_BASE_AT(:)
      REAL*4 EMBEDDED_PARENT_LTD_COST,
     +       EMBEDDED_PARENT_PS_COST
      REAL*4 CONSOLIDATED_INCOME_TAXES_PAID,
     +       CONSOLIDATED_FEDERAL_TAXES_PAID,
     +       CONSOLIDATED_STATE_TAXES_PAID
C
C MISCELLANEOUS VARIABLES
C
      CHARACTER*1 COUNTRY,USA
      PARAMETER (USA='U')
      LOGICAL*1 COUNTRY_NOT_USA,CALCULATE_ENVIRONMENTAL_TAX
      INTEGER*2 ACTIVE_TAX_LOSS_CLASSES
      REAL*4 SBU_LTD_ELIM,SBU_STD_ELIM,SBU_PS_ELIM
      REAL*4 AMT_INCOME_AFTER_NOL,CONSOLIDATED_AMT_INCOME,
     +       ADJUST_4_AMT_NOLS
      REAL*4 PS_ROLLOVER,SBU_COMMON_STOCK_BOUGHT,
     +       LTD_ROLLOVER,PS_ROLLOVER_DIVIVEND,
     +       LTD_ROLLOVER_INTEREST,
     +       PS_ADDEM_DIVIDEND,
     +       LTD_ADDEM_INTEREST
      REAL*4 DIVIDEND_PS,INTEREST_LTD
      LOGICAL*1 LAST_GROUP_WAS_A_SUBSIDARY
      CHARACTER*1 SBU,SUBSIDIARY,PARENT,REGULATED_GROUP
      PARAMETER (SBU='B',SUBSIDIARY='S',PARENT='P',REGULATED_GROUP='R')
      REAL*4 LT_INVESTMENTS_EARNINGS,
     +       STI_CHANGE_IN_CASH
      REAL*4 EL_MARKET_REVENUES,
     +       EL_MARKET_PURCHASES
      REAL*4 CL_MARKET_REVENUES,
     +       CL_MARKET_PURCHASES,
     +       CL_VAR_MARKET_PURCHASES, 
     +       CL_FIXED_MARKET_PURCHASES 
C
C  ACCURRALS
C
      REAL*4 INTEREST_DIVIDENDS_ACCRUDED,
     +       NEW_FINANCING_ACCRUALS,
     +       COMMON_STOCK_DIV_ACCRUALS
      REAL*4 EOQ_SHARES,
     +       QRT_DIVIDEND_PER_SHARE(4),
     +       QRT_DIVIDEND_ADDENDUM(4)
      REAL*4 PURCHASE_POWER_IN_DEFERRED_FUEL,
     +       POWER_AGENCY_OWNED_COST,
     +       CPL_FUEL_REVENUES
C
      CHARACTER*3 ASSET_CLASS_TYPE_NAME
      REAL*4 AGC_SUBSIDIARY_INCOME,
     +       AGC_EARNINGS_AVAILABLE_2_COMMON,
     +       AGC_COMMON_DIVIDENDS,
     +       AGC_COMMON_STOCK_ISSUED
      LOGICAL*1 APS_ACTIVE,APS_DQE,ACCURAL_ACCOUNTING_ACTIVE
      REAL*4 LTD_ISSUE_YR_INTEREST_PAYMENT,
     +       LTD_ISSUE_YR_INTEREST_BOOKED,
     +       PS_ISSUE_YR_DIVIDEND_BOOKED,
     +       PS_ISSUE_YR_DIVIDEND_PAYMENT
      REAL*4 PARENT_LEVEL_CS_ACQUISIONS,
     +       PARENT_LEVEL_RE_ACQUISIONS
      LOGICAL*1 PA_CONTRACT_ACITVE
      REAL*4 NEW_SUB_RETAINED_EARNINGS,
     +       NEW_SUB_COMMON_STOCK
      REAL*4 STD_MINIMUM_BAL,ADJ_DEFERRED_TAX_DR_BALANCE,
     +       PAID_IN_CAPITAL,
     +       SUBSIDIARY_INVESTMENT_ADJ,
     +       GOODWILL_ADJUSTMENT,
     +       REG_ASSESTS_ADJUSTMENT,
     +       FASB109_ADJUSTMENT,
     +       FASB133_ADJUSTMENT,
     +       UNAMORT_INTEREST_ADJUSTMENT,
     +       NUCLEAR_DECOM_FUND_BAL_ADJ,
     +       CAP_LEASES_BAL_ADJ,
     +       ASSETS_NEC_BAL_ADJ,
     +       PREFERRED_STOCK_BAL_ADJ,
     +       LTD_BAL_ADJ,
     +       STD_BAL_ADJ,
     +       NUC_DECOM_LIAB_BAL_ADJ,
     +       LIABS_NEC_BAL_ADJ,
     +       OTHER_INVESTMENT_BAL_ADJ,
     +       NOTES_RECEIVABLE_BAL_ADJ,
     +       POST_RETIRE_MEDICAL_BAL_ADJ,
     +       DEFERRED_REVENUES_BAL_ADJ,
     +       DEFERRED_FUEL_BAL_ADJ,
     +       DEFERRED_PURCH_GAS_BAL_ADJ,
     +       LT_INVEST_BAL_ADJ,
     +       ST_INVEST_BAL_ADJ,
     +       FUEL_INVENTORY_BAL_ADJ,
     +       GAS_IN_STORAGE_BAL_ADJ,
     +       MATRIAL_SUPPLY_BAL_ADJ,
     +       ACCOUNTS_RECV_BAL_ADJ,
     +       UNBILLED_REV_BAL_ADJ,
     +       TAXES_RECEIVABLE_BAL_ADJ,
     +       CURRENT_LT_DEBT_BAL_ADJ,
     +       NOTES_PAYABLE_BAL_ADJ,
     +       CUSTOMER_DEPOSIT_BAL_ADJ,
     +       CICA_BAL_ADJ,
     +       POST_RETIRE_PAYABLE_BAL_ADJ,
     +       ACCRUED_PENSION_BAL_ADJ,
     +       DEFERRED_GAINS_BAL_ADJ,
     +       storm_RESERVE_BAL_ADJ,
     +       ACCOUNTS_PAYABLE_BAL_ADJ,
     +       ARO_NET_ASSETS_BAL_ADJ,
     +       ARO_LIABILITY_BAL_ADJ,
     +       DEFERRED_PURCHASE_POWER_ADJ,
     +       COI_EARNINGS_ADJ
      REAL (KIND=4):: CASH_TO_POST_RETIRE_MEDICAL_BAL,CASH_TO_CASH,
     +                CASH_TO_ACCRD_MBR_REVENUES_BAL
      REAL*4 CPL_EMC_REVENUES
      REAL*4 INVESTMENTS_MADE,
     +       INVESTMENTS_SOLD,
     +       DEBT_FILE_INVESTMENT_INCOME,
     +       INVESTMENT_INCOME_RECEIVABLE,
     +       NOTES_RECEIVABLE_MADE,
     +       NOTES_RECEIVABLE_CLEARED,
     +       NOTES_PAYABLE_MADE,
     +       NOTES_PAYABLE_CLEARED,
     +       DIVIDEND_70_NONTAXABLE,
     +       INVESTMENTS_BOY,
     +       NOTES_RECEIVABLE_BOY,
     +       NOTES_PAYABLE_BOY,
     +       INTRA_INVESTMENT_INCOME
      REAL*4 DEBT_COMMON_STOCK_ISSUED,
     +       DEBT_COMMON_SHARES_ISSUED,
     +       DEBT_COMMON_STOCK_BUYBACK,
     +       DEBT_COMMON_SHARES_BUYBACK,
     +       DEBT_COMMON_STOCK_BALANCE,
     +       DEBT_COMMON_SHARES_OUTSTANDING,
     +       CS_ISSUE_EXP_BAL,
     +       BOY_ISSUE_EXP_BAL,
     +       CS_ISSUE_EXP_AMORT,
     +       CS_ISSUE_EXP_THIS_PERIOD,
     +       NET_MONTHLY_SHARES(12),
     +       END_OF_MONTH_SHARES(0:12),
     +       MODEL_ISSUED_SHARES,
     +       MONTHLY_CAPITAL_VALUES(0:12)
      REAL (KIND=4) :: R_MONTHLY_RATE(0:12),
     +                 STD_MONTHLY_INTEREST_RATE(0:12),
     +                 STI_MONTHLY_INTEREST_RATE(0:12),
     +                 LTD_NEW_MONTHLY_INTEREST_RATE(0:12),
     +                 LTI_NEW_MONTHLY_INTEREST_RATE(0:12),
     +                 MONTHLY_CUST_DEPOSITS_RATE(0:12),
     +                 MONTHLY_RETIREMENT_FUND_RATE(0:12),
     +                 MONTHLY_NUC_DECOM_RATE(0:12),
     +                 PS_NEW_MONTHLY_INTEREST_RATE(0:12)
      LOGICAL*1 R_RATE_FOUND,
     +          STD_RATE_AVAILABLE,
     +          LTD_RATE_AVAILABLE,
     +          STI_RATE_AVAILABLE,
     +          LTI_RATE_AVAILABLE,
     +          CUST_DEPOSITS_RATE_AVAILABLE,
     +          RETIREMENT_FUND_RATE_AVAILABLE,
     +          NUC_DECOM_RATE_AVAILABLE,
     +          PS_RATE_AVAILABLE
      INTEGER*2 QRT
      LOGICAL*1 MONTHLY_COMMON_SHARES_ACTIVE
      REAL*4 PIOR_LEVEL_ATL_TAX_DEDUCTIONS,
     +       PIOR_LEVEL_BTL_TAX_DEDUCTIONS
      REAL*4 AGC_2_WP/.45/,AGC_2_PE/.28/,AGC_2_MP/.27/ 
      REAL*4 PRIOR_LEVEL_DECOM_FUND_PAYMENTS,
     +       PRI_LEVEL_NOT_DECOM_FUND_RETURN
      REAL*4 FEDERAL_EPA_92_TAX_RATE
      REAL*4 ADJ_2_EARNINGS_DECOM_FUND,
     +       ADJ_2_EARNINGS_POST_RETIREMENT,
     +       ADJ_2_EARNINGS_ST_INVESTMENTS,
     +       ADJ_2_EARNINGS_LT_INVESTMENTS
      LOGICAL*1 USE_ACTUAL_STATE_TAXES,
     +          USE_ACTUAL_FEDERAL_TAXES,
     +          USE_ACTUAL_DEFERRED_TAXES_CR,
     +          USE_ACTUAL_DEFERRED_TAXES_DR,
     +          USE_ACTUAL_BTL_DEF_TAXES_DR,
     +          USE_ACTUAL_BTL_DEF_TAXES_CR
      REAL*4 ANNUAL_STATE_INCOME_TAX,
     +       ANNUAL_FEDERAL_INCOME_TAX,
     +       ACTUAL_DEFERRED_TAXES_DR,
     +       ACTUAL_DEFERRED_TAXES_CR,
     +       ACTUAL_BTL_DEF_TAXES_DR,
     +       ACTUAL_BTL_DEF_TAXES_CR
      REAL*4 BOY_POST_RETIRE_MEDICAL_FUND,
     +       BOY_POST_RETIRE_MED_PAYABLE
      REAL*4 CONSOLID_DEFERRED_TAXES_DR
      REAL*4 ACTUAL_CON_STATE_INCOME_TAX,
     +       ACTUAL_CON_FEDERAL_INCOME_TAX,
     +       ACTUAL_CON_DEFERRED_TAXES_DR,
     +       ACTUAL_CON_DEFERRED_TAXES_CR,
     +       ACTUAL_CON_BTL_DEF_TAXES_DR,
     +       ACTUAL_CON_BTL_DEF_TAXES_CR
      LOGICAL*1 USE_ACTUAL_CON_STATE_TAXES,
     +          USE_ACTUAL_CON_FEDERAL_TAXES,
     +          USE_ACTUAL_CON_DEFERRED_TAX_DR,
     +          USE_ACTUAL_CON_DEFERRED_TAX_CR,
     +          USE_ACTUAL_CON_BTL_DEF_TAXES_DR,
     +          USE_ACTUAL_CON_BTL_DEF_TAXES_CR
      REAL*4 STD_INTEREST_OWED,
     +       REVENUE_TAXES_OWED,
     +       PROPERTY_TAXES_OWED,
     +       STATE_INCOME_TAXES_OWED,
     +       FEDERAL_INCOME_TAXES_OWED,
     +       STATE_TAX_ON_CAPITAL_OWED,
     +       FEDERAL_TAX_ON_CAPITAL_OWED,
     +       OTHER_TAXES_OWED
      REAL*4 INTEREST_ON_STD
      REAL*4 CALCULATED_2_ACTUAL_STATE_ADJ,
     +       CALCULATED_2_ACTUAL_FED_ADJ
      REAL*4 CUSTOMER_DEPOSITS_INTR_PAYABLE,
     +       CUSTOMER_DEPOSIT_INTEREST_ON
      INTEGER*2 MO
      REAL*4 CASH_TAXES_RECEIVABLE_FROM_SUBS
      REAL*4 MONTHLY_COMMON_DIVIDENDS(0:12)
      INTEGER*2 LEAD_SHARE,MONTH
      REAL*4 ST_INVESTMENT_EARNINGS
      REAL*4 CONSOLID_LOST_SEC_29_CREDITS,CONSOLD_AMT_MINIMUM_TAX,
     +       CONSOLID_AMT_CREDITS_USED,CONSOLD_FED_DEF_TAXES_FROM_NOL,
     +       CONSOLD_STATE_DEF_TAX_FROM_NOL
      REAL*4 CON_2_ACTUAL_STATE_ADJ,CON_2_ACTUAL_FEDERAL_ADJ
      REAL*4 CONSOLID_AMT_CREDITS_CREATED,
     +       CON_DEF_TAX_DR_NOLS_AMT_CREDITS
      REAL*4 BTL_CASH_EARNINGS,
     +       CPL_FUEL_REVENUE_RECEIVABLE,
     +       CATAWBA_RECEIVABLES,
     +       CATAWBA_PAYABLES,
     +       MIDAS_ISSUED_LTD,
     +       MIDAS_ISSUED_PS
      REAL*4 CONSOLID_FED_INCOME_TAX_ACCRUAL,
     +       CONSOLID_STATE_INC_TAX_ACCRUAL,
     +       CONSOLID_NON_INCOME_TAX_ACCRUAL,
     +       SUB_TAXES_ACCRUAL,
     +       PARENT_STATE_TAXES_ACCRUAL_ADJ,
     +       PARENT_FEDERAL_TAX_ACCRUAL_ADJ,
     +       PARENT_NON_INCOME_TAX_ACCRL_ADJ
      REAL*4 BOY_NUC_DECOM_FUND_LIABILITY
      logical*1 def_taxes_dr_is_contra
      REAL*4 PARENT_BTL_INTRA_FED_TAXES,
     +       PARENT_BTL_INTRA_STATE_TAXES
      REAL*4 CON_FEDERAL_TAXABLE_INCOME_ADJ,
     +       CON_FED_DEFERRED_TAX_DR_ADJ
      REAL*4 EFFECTIVE_TAX_RATE
      LOGICAL*1 IS_CONSOLIDATING_CLASS
      INTEGER*2 MOVE_TO_CLASS_ID
      LOGICAL*1 OPENING_BALANACE_4_PROPERTY_TAX,
     +          CLOSING_BALANACE_4_PROPERTY_TAX
      INTEGER*2 VARS_2_PASS
      INTEGER*2 LINKS_2_PARENT,CLASSES_ASSIGNED
      LOGICAL*1 MORE_LEVELS
      REAL*4 CAPITAL_MULTIPILER
      LOGICAL*1 USE_ALL_STATE_TAX_BENEFITS_NOW,
     +          USE_ALL_FED_TAX_BENEFITS_NOW
      REAL*4 ADJUST_4_STATE_CREDITS
      REAL*4 CATAWBA_DEFERRED_TAXES_BAL_CR
      CHARACTER*1 ACCOUNT_ACTIVE
      REAL*4 SUB_COMMON_BUYBACK_CS_ADJ,
     +       SUB_COMMON_BUYBACK_RE_ADJ
      REAL DEBT_ISSUED_4_ACQUISITION,
     +     COMMON_ISSUED_4_ACQUISITION,
     +     PREFERRED_ISSUED_4_ACQUISITION,
     +     SINKING_FUND_PAYMENT,
     +     ACQUISITION_EXPENSE
      INTEGER*2 ACQUISITION_MO
      REAL*4, ALLOCATABLE :: CUM_CAPTURED_OPT_METHOD_REVS(:)
      LOGICAL*1 LAHEY_LF95,UI
      REAL*4 GAS_STORAGE_BOY,
     +       MATERIALS_SUPPLIES_BOY,
     +       FUEL_INVENTORY_BOY
C
C KEEP THIS LINE UNTIL INITIALIZATION HAS BASE YEAR RATE
C
c         REPORT_HEADER_ACTIVE = .FALSE.
c         VERSION_6_OR_GREATER = .FALSE.
         CALL RETURN_NUM_OF_EXISTING_CLASSES(NUM_OF_EA_CLASSES,
     +                                                 MAX_EA_CLASS_NUM)
c         CALL RETURN_NUM_OF_EXPENSE_CLASSES(NUM_OF_EX_CLASSES,
c     +                                                 MAX_EX_CLASS_NUM)
         NUM_OF_ENRG_CLASSES = RETURN_NUM_OF_HYDRO_CLASSES(
     +                                               MAX_ENRG_CLASS_NUM)
         CALL RETURN_INITIALIZATION_CLASSES(NUM_OF_CL_CLASSES,
     +                                      MAX_CL_CLASS_NUM)
         CALL RETURN_NUM_OF_DEBT_CLASSES(NUM_OF_DB_CLASSES,
     +                                                 MAX_DB_CLASS_NUM)
         CALL RETURN_NUM_OF_DEBIT_CLASSES(NUM_OF_DD_CLASSES,
     +                                                 MAX_DD_CLASS_NUM)
         CALL RETURN_NUM_OF_NUC_FUEL_CLASSES(NUM_OF_NF_CLASSES,
     +                                                 MAX_NF_CLASS_NUM)
C         CALL RETURN_NUM_OF_FA_CLASSES(NUM_OF_FA_CLASSES,
C     +                                                 MAX_FA_CLASS_NUM)
         CALL RETURN_NUM_OF_DSM_CLASSES(NUM_OF_DSM_CLASSES,
     +                                                MAX_DSM_CLASS_NUM)
         CALL RETURN_CLASS_REVENUE_CLASSES(NUM_OF_RATE_REVENUE_CLASSES,
     +                                       MAX_RATE_REVENUE_CLASS_NUM)
         CALL RETURN_INITIALIZATION_CLASSES(NUM_OF_INITIZATION_CLASSES,
     +                                     MAX_INITIALIZATION_CLASS_NUM)
         MAX_CLASS_NUM = MAX(MAX_EA_CLASS_NUM, ! MAX_EX_CLASS_NUM,
     +                       MAX_DB_CLASS_NUM,MAX_DD_CLASS_NUM,
     +                       MAX_FA_CLASS_NUM,MAX_AA_CLASS_NUM,
     +                       MAX_NF_CLASS_NUM,MAX_DSM_CLASS_NUM,
     +                       MAX_CL_CLASS_NUM,MAX_ENRG_CLASS_NUM,
     +                       MAX_RATE_REVENUE_CLASS_NUM,
     +                       MAX_INITIALIZATION_CLASS_NUM)
C
         IF(MAX_CLASS_NUM <= 0) RETURN
         IF(ALLOCATED(MASTER_CLASS_LIST)) DEALLOCATE(MASTER_CLASS_LIST)
         ALLOCATE(MASTER_CLASS_LIST(0:MAX_CLASS_NUM))
         MASTER_CLASS_LIST = 0
         ALLOCATE(TEMP_LIST(MAX_CLASS_NUM))
C
         IF (MAX_INITIALIZATION_CLASS_NUM > 0) THEN
            CALL RETURN_INITIALIZATION_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(
     +                                     MAX_INITIALIZATION_CLASS_NUM,
     +                                     TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
         IF(MAX_DSM_CLASS_NUM > 0) THEN
            CALL RETURN_DSM_CLASS_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_DSM_CLASS_NUM,
     +                                      TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
         IF(MAX_EA_CLASS_NUM > 0) THEN
            CALL RETURN_EXISTING_CLASS_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_EA_CLASS_NUM,
     +                                      TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
c         IF(MAX_EX_CLASS_NUM > 0) THEN
c            CALL RETURN_EXPENSE_CLASS_POINTER(TEMP_LIST)
c            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_EX_CLASS_NUM,
c     +                                      TEMP_LIST,MASTER_CLASS_LIST)
c         ENDIF
         IF(MAX_ENRG_CLASS_NUM > 0) THEN
            MAX_ENRG_CLASS_NUM = RETURN_HYDRO_CLASS_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_ENRG_CLASS_NUM,
     +                                      TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
c         IF(MAX_CL_CLASS_NUM > 0) THEN
c            MAX_CL_CLASS_NUM = RETURN_CAP_LIMITED_POINTER(TEMP_LIST)
c            CALL RETURN_INITIALIZATION_POINTER(TEMP_LIST)
c            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_CL_CLASS_NUM,
c     +                                      TEMP_LIST,MASTER_CLASS_LIST)
c         ENDIF
         IF(MAX_DD_CLASS_NUM > 0) THEN
            CALL RETURN_DEBIT_CLASS_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_DD_CLASS_NUM,
     +                                      TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
         IF(MAX_DB_CLASS_NUM > 0) THEN
            CALL RETURN_DEBT_CLASS_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_DB_CLASS_NUM,
     +                                      TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
         IF(MAX_NF_CLASS_NUM > 0) THEN
            CALL RETURN_NUC_FUEL_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_NF_CLASS_NUM,
     +                                      TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
C         IF(MAX_FA_CLASS_NUM > 0) THEN
C            CALL RETURN_FA_POINTER(TEMP_LIST)
C            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(MAX_FA_CLASS_NUM,
C     +                                      TEMP_LIST,MASTER_CLASS_LIST)
C         ENDIF
         IF(MAX_RATE_REVENUE_CLASS_NUM > 0) THEN
            CALL RETURN_CLASS_REVENUE_POINTER(TEMP_LIST)
            CLASSES_FOUND = LOAD_MASTER_CLASS_LIST(
     +                                      MAX_RATE_REVENUE_CLASS_NUM,
     +                                      TEMP_LIST,MASTER_CLASS_LIST)
         ENDIF
         DEALLOCATE(TEMP_LIST,STAT=IOS)
C
C
         NUM_OF_ACTIVE_CLASSES = 0
         DO I = 1, MAX_CLASS_NUM
            IF(MASTER_CLASS_LIST(I) /= 0) THEN
               NUM_OF_ACTIVE_CLASSES = NUM_OF_ACTIVE_CLASSES + 1
               MASTER_CLASS_LIST(I) = NUM_OF_ACTIVE_CLASSES
            ENDIF
         ENDDO
         IF(ALLOCATED(CLASS_GPV)) DEALLOCATE(CLASS_GPV,
     +                     CLASS_CUMULATIVE_DEPRECIATION,
     +                     NET_UTILITY_PLANT,
     +                     CLASS_CWIP,CLASS_NET_NF_VALUE,
     +                     CUMULATIVE_NUCLEAR_BURN,RATE_BASE,
     +                     NET_NUCLEAR_FUEL_ADJ,
     +                     DEFERRED_DEBITS_RATE_BASE,
     +                     DEFERRED_CREDITS_IN_RATE_BASE,
     +                     NUC_FUEL_RATE_BASE,
     +                     CWIP_IN_RATE_BASE,
     +                     NUC_DECOM_RATE_BASE,
     +                     CIAC_RATE_BASE,
     +                     PLANT_IN_SERVICE_RATE_BASE,
     +                     ASSET_NEC_IN_RATE_BASE,
     +                     CLASS_ADDENDUM_2_RATE_BASE,
     +                     POST_RETIREMENT_MEDICAL_FUND,
     +                     POST_RETIREMENT_MED_PAYABLE,
     +                     NUC_DECOM_FUND_LIABILITY,
     +                     LONG_TERM_INVESTMENTS,
     +                     DEBT_FILE_INVESTMENTS,
     +                     NOTES_RECEIVABLE,
     +                     GRE_OTH_PROP_TAXES,
     +                     OTHER_DEFERRED_CREDITS_BAL,
     +                     REGULATORY_DEFERRED_CREDITS_BAL,
     +                     GAIN_ON_REAQUIRED_DEBT_BAL,
     +                     NOTES_PAYABLE,
     +                     CAPITIALIZED_LEASES_RATE_BASE,
     +                     LONG_TERM_DEBT,COMMON_SHARES,
     +                     COMMON_STOCK,LINEC,PREFERRED_STOCK,
     +                     CUSTOMER_DEPOSITS_BAL,CIAC_BALANCE,
     +                     CLASS_NAME,CLASS_REVENUES,NET_DD_BALANCE,
     +                     OTHER_DD_BALANCE,
     +                     GOODWILL,
     +                     UNAMORTIZED_INTEREST_BALANCE,
     +                     UNAMORTIZED_ISSUE_EXP_BALANCE,
     +                     CUMULATIVE_BOOK_DEP_ADJUSTMENTS,CLASS_TYPE,
     +                     LINKED_2_CLASS,CUMULATIVE_GPV_ADJUSTMENTS,
     +                     AI_CLASS_CWIP,YEAR_CLASS_DEACTIVATED,
     +                     CLASS_PRIOR_INBALANCE,ACTIVATE_CLASS_IN_YEAR,
     +                     ACCOUNTS_RECEIVABLE,
     +                     CLASS_NUC_DECOM_TRUST_BAL,
     +                     CLASS_NUC_DECOM_INC_EARNINGS,
     +                     CLASS_NUC_DECOM_BAL_EARNINGS,
     +                     ACCOUNTS_PAYABLE,
     +                     COMMON_DIVIDEND_PAYMENT,
     +                     FUEL_INVENTORY,
     +                     CLASS_MATERIALS_N_SUPPLIES,
     +                     CLASS_GAS_STORAGE,
     +                     CLASS_DEFERRED_PURCHASE_GAS,
     +                     ACQUISITION_PREMIUM,
     +                     DEFERRED_FUEL_BALANCE,
     +                     CUM_AMORT_ADJUSTMENT,
     +                     CUM_GOODWILL_AT,
     +                     CUM_REG_ASSET_ADJ_AT,
     +                     CUM_FASB133_ADJ_AT,
     +                     CUM_FASB109_ADJ_AT,
     +                     DEBT_FILE_UNAMORT_INTR_BAL,
     +                     DEBT_FILE_UNAMORT_ISS_EXP_BAL,
     +                     DEBIT_FILE_UNAMORT_ISS_EXP_BAL,
     +                     CUM_DD_UNAMORT_INTR_ADJ_AT,
     +                     CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT,
     +                     CUM_DD_RATEBASE_ADJUST,
     +                     NUCLEAR_DECOM_FUND_BAL_ADJ_AT,
     +                     CAP_LEASES_BAL_ADJ_AT,
     +                     ASSETS_NEC_BAL_ADJ_AT,
     +                     PREFERRED_STOCK_BAL_ADJ_AT,
     +                     LTD_BAL_ADJ_AT,
     +                     STD_BAL_ADJ_AT,
     +                     NUC_DECOM_LIAB_BAL_ADJ_AT,
     +                     LIABS_NEC_BAL_ADJ_AT,
     +                     OTHER_INVESTMENT_BAL_ADJ_AT,
     +                     NOTES_RECEIVABLE_BAL_ADJ_AT,
     +                     POST_RETIRE_MEDICAL_BAL_ADJ_AT,
     +                     DEFERRED_REVENUES_BAL_ADJ_AT,
     +                     DEFERRED_FUEL_BAL_ADJ_AT,
     +                     DEFERRED_PURCH_GAS_BAL_ADJ_AT,
     +                     LT_INVEST_BAL_ADJ_AT,
     +                     ST_INVEST_BAL_ADJ_AT,
     +                     FUEL_INVENTORY_BAL_ADJ_AT,
     +                     GAS_IN_STORAGE_BAL_ADJ_AT,
     +                     MATRIAL_SUPPLY_BAL_ADJ_AT,
     +                     ACCOUNTS_RECV_BAL_ADJ_AT,
     +                     UNBILLED_REV_BAL_ADJ_AT,
     +                     TAXES_RECEIVABLE_BAL_ADJ_AT,
     +                     CURRENT_LT_DEBT_BAL_ADJ_AT,
     +                     NOTES_PAYABLE_BAL_ADJ_AT,
     +                     CUSTOMER_DEPOSIT_BAL_ADJ_AT,
     +                     CICA_BAL_ADJ_AT,
     +                     POST_RETIRE_PAYABLE_BAL_ADJ_AT,
     +                     ACCRUED_PENSION_BAL_ADJ_AT,
     +                     DEFERRED_GAINS_BAL_ADJ_AT,
     +                     storm_RESERVE_BAL_ADJ_AT,
     +                     ACCOUNTS_PAYABLE_BAL_ADJ_AT,
     +                     PREFERRED_STOCK_ADDENDUM,
     +                     LONG_TERM_DEBT_ADDENDUM,
     +                     WEIGHTED_CLASS_PS_COST,
     +                     WEIGHTED_CLASS_LTD_COST,
     +                     CURRENCY_DENOMINATION,
     +                     REPORT_CLASS,
     +                     REPORT_ZEROS_4_CLASS,
     +                     CONSOLIDATING_CLASS,
     +                     CUM_RATE_BASE_NUCLEAR_BURN,
     +                     CUM_CAPTURED_OPT_METHOD_REVS,
     +                     FED_TAX_EXEMPT,
     +                     STD_INTEREST_VECTOR,
     +                     LTD_INTEREST_VECTOR,
     +                     PS_DIVIDENDS_VECTOR,
     +                     STI_INTEREST_VECTOR,
     +                     LTI_INTEREST_VECTOR,
     +                     CUSTOMER_DEPOSIT_INTREST_VECTOR,
     +                     DECOM_FUND_INTEREST_VECTOR,
     +                     RETIREMENT_FUND_INTEREST_VECTOR,
     +                     CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS,
     +                     CURRENCY_CONVERSION_VECTOR)

         ALLOCATE(CLASS_GPV(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NET_UTILITY_PLANT(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_CWIP(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_DEBITS_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +         DEFERRED_CREDITS_IN_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NUC_FUEL_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CWIP_IN_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NUC_DECOM_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CIAC_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PLANT_IN_SERVICE_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ASSET_NEC_IN_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_ADDENDUM_2_RATE_BASE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(POST_RETIREMENT_MEDICAL_FUND(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACCOUNTS_RECEIVABLE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_NUC_DECOM_TRUST_BAL(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_NUC_DECOM_INC_EARNINGS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_NUC_DECOM_BAL_EARNINGS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(FUEL_INVENTORY(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_MATERIALS_N_SUPPLIES(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_GAS_STORAGE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_DEFERRED_PURCHASE_GAS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACQUISITION_PREMIUM(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_FUEL_BALANCE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACCOUNTS_PAYABLE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(COMMON_DIVIDEND_PAYMENT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(POST_RETIREMENT_MED_PAYABLE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NUC_DECOM_FUND_LIABILITY(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LONG_TERM_INVESTMENTS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEBT_FILE_INVESTMENTS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NOTES_RECEIVABLE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(GRE_OTH_PROP_TAXES(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTHER_DEFERRED_CREDITS_BAL(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(REGULATORY_DEFERRED_CREDITS_BAL
     +                                      (2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(GAIN_ON_REAQUIRED_DEBT_BAL(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NOTES_PAYABLE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +         CAPITIALIZED_LEASES_RATE_BASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +         CLASS_CUMULATIVE_DEPRECIATION(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_NET_NF_VALUE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUMULATIVE_NUCLEAR_BURN(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NET_NUCLEAR_FUEL_ADJ(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_RATE_BASE_NUCLEAR_BURN(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_CAPTURED_OPT_METHOD_REVS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_REVENUES(0:MAX_CLASS_NUM))
         ALLOCATE(CLASS_NAME(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_TYPE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CLASS_PRIOR_INBALANCE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LINKED_2_CLASS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(YEAR_CLASS_DEACTIVATED(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACTIVATE_CLASS_IN_YEAR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LINEC(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(COMMON_STOCK(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(COMMON_SHARES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PREFERRED_STOCK(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LONG_TERM_DEBT(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUSTOMER_DEPOSITS_BAL(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CIAC_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NET_DD_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTHER_DD_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(GOODWILL(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +          UNAMORTIZED_INTEREST_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +         UNAMORTIZED_ISSUE_EXP_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_AMORT_ADJUSTMENT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_GOODWILL_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_REG_ASSET_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_FASB133_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_FASB109_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEBT_FILE_UNAMORT_INTR_BAL(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +           DEBT_FILE_UNAMORT_ISS_EXP_BAL(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +          DEBIT_FILE_UNAMORT_ISS_EXP_BAL(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_DD_UNAMORT_INTR_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +         CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +           NUCLEAR_DECOM_FUND_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CAP_LEASES_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ASSETS_NEC_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PREFERRED_STOCK_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LTD_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(STD_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NUC_DECOM_LIAB_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LIABS_NEC_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTHER_INVESTMENT_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NOTES_RECEIVABLE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +          POST_RETIRE_MEDICAL_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_REVENUES_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_FUEL_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +           DEFERRED_PURCH_GAS_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LT_INVEST_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ST_INVEST_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(FUEL_INVENTORY_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(GAS_IN_STORAGE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(MATRIAL_SUPPLY_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACCOUNTS_RECV_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(UNBILLED_REV_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(TAXES_RECEIVABLE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CURRENT_LT_DEBT_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NOTES_PAYABLE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUSTOMER_DEPOSIT_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CICA_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +          POST_RETIRE_PAYABLE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACCRUED_PENSION_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_GAINS_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(storm_RESERVE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACCOUNTS_PAYABLE_BAL_ADJ_AT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_DD_RATEBASE_ADJUST(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +         CUMULATIVE_BOOK_DEP_ADJUSTMENTS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS
     +                                        (0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUMULATIVE_GPV_ADJUSTMENTS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AI_CLASS_CWIP(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PREFERRED_STOCK_ADDENDUM(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LONG_TERM_DEBT_ADDENDUM(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(WEIGHTED_CLASS_PS_COST(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(WEIGHTED_CLASS_LTD_COST(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CURRENCY_DENOMINATION(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(REPORT_CLASS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(REPORT_ZEROS_4_CLASS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CONSOLIDATING_CLASS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(FED_TAX_EXEMPT(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(STD_INTEREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LTD_INTEREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PS_DIVIDENDS_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(STI_INTEREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LTI_INTEREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +         CUSTOMER_DEPOSIT_INTREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DECOM_FUND_INTEREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +         RETIREMENT_FUND_INTEREST_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CURRENCY_CONVERSION_VECTOR(0:NUM_OF_ACTIVE_CLASSES))
C
C
C
C PARAMETER FILE VALUES
C
        IF(ALLOCATED(ABANDS))
     +      DEALLOCATE(ABANDS,AFDC1C,AFDC2C,AFDCDP,BKDEPC,
     +                 BOOK_VALUE_STOCK,TOTAL_CAPITIAL,
     +                 CEPCUM,COMMON_EQUITY,DDAMTC,DEPCUM,
     +                 DEF_ITC_BALANCE,NAFC1C,NAFC2C,NF_IN_PROCESS,
     +                 NFIS,NNFV,NPV,OTHER_ASSETS,PLANT,RBCWIP,RBDD,
     +                 RBNF,RB_NF_IN_PROCESS,REARNC,SALES,
     +                 SHORT_TERM_DEBT,STOCK_PRICE_YEAR_END,
     +                 INTEREST_ON_SHORT_TERM_DEBT,
     +                 DEF_TAX_CR_BALANCE,
     +                 WCCUM,OPERATING_REVENUES,STD_RATE,
     +                 LIQUID_INVESTMENTS,
     +                 NUC_DECOM_FUND_BAL,CUMTXNORM,BASE_REVENUE,
     +                 OTHER_REVENUE,ADJ_CLAUSE_REVENUE,
     +                 OTHER_LT_LIABILITY,
     +                 CUM_DEF_REVENUES,NPV_RATEBASE,
     +                 CUM_ITC_DEF_RATEBASE,RBCWIP_AFDC_METH2,
     +                 CUM_DEF_TAX_RATEBASE,RB_REG_DD,
     +                 DEFERRED_EXPENSE_BALANCE,
     +                 AMTBKPREF,AMTNEGBKPREF,AVAILCREDIT,
     +                 INVESTMENT_IN_SUBSIDIARIES,
     +                 CAPITIALZIED_LEASES,
     +                 DEFERRED_PURCHASE_POWER,
     +                 PENSION_LIABILITY,
     +                 DEFERRED_GAIN_FROM_SALES,
     +                 STORM_RESERVE_BALANCE,
     +                 ExecBenefitsBalance,
     +                 IncentiveCompBalance,
     +                 ACCRUED_VACATION_PAY_BALANCE,
     +                 RB_INCLUDE_DEFERRED_TAX_DR,
     +                 RB_INCLUDE_DEFERRED_REVENUES,
     +                 RB_EXCLUDED_PENSION_LIABILITY,
     +                 RB_EXCLUDED_DEFERRED_ASSET_GAIN,
     +                 RB_EXCLUDED_STORM_RESERVE,
     +                 RB_EXCLUDE_ACCRUED_VACATION_PAY,
     +                 FASB143_NET_ASSET_VALUE,
     +                 FASB143_LT_LIABILITY_VALUE,
     +                 INIT_PLANNING_PEAK,
     +                 FASB_87_INTANGIBLE_ASSETS,
     +                 OTHER_COMPREHENSIVE_INCOME_BALANCE,    ! 103
     +                 OPERATING_REVENUE_TAX_LAGGED_BASIS,    ! 104
     +                 PROPERTY_TAX_BASIS)  ! 91 BASE YEAR


         ALLOCATE(ABANDS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AFDC1C(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AFDC2C(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AFDCDP(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(BKDEPC(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(BOOK_VALUE_STOCK(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(STOCK_PRICE_YEAR_END(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_PURCHASE_POWER(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PENSION_LIABILITY(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_GAIN_FROM_SALES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(STORM_RESERVE_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ExecBenefitsBalance(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(IncentiveCompBalance(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ACCRUED_VACATION_PAY_BALANCE(2,
     +                                         0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RB_INCLUDE_DEFERRED_TAX_DR(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RB_INCLUDE_DEFERRED_REVENUES(2,
     +                                         0:NUM_OF_ACTIVE_CLASSES))   ! 103
         ALLOCATE(RB_EXCLUDED_PENSION_LIABILITY(2,
     +                                         0:NUM_OF_ACTIVE_CLASSES))   ! 103
         ALLOCATE(RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,
     +                                         0:NUM_OF_ACTIVE_CLASSES))   ! 103
         ALLOCATE(RB_EXCLUDED_STORM_RESERVE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RB_EXCLUDE_ACCRUED_VACATION_PAY(2,
     +                                         0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(FASB143_NET_ASSET_VALUE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(FASB143_LT_LIABILITY_VALUE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PROPERTY_TAX_BASIS(2,0:NUM_OF_ACTIVE_CLASSES))  ! 91 BASE YEA)
         ALLOCATE(FASB_87_INTANGIBLE_ASSETS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTHER_COMPREHENSIVE_INCOME_BALANCE(
     +                                         0:NUM_OF_ACTIVE_CLASSES))   ! 103
         ALLOCATE(OPERATING_REVENUE_TAX_LAGGED_BASIS(
     +                                         0:NUM_OF_ACTIVE_CLASSES))   ! 104
         ALLOCATE(TOTAL_CAPITIAL(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CEPCUM(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(COMMON_EQUITY(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DDAMTC(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEPCUM(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEF_ITC_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NAFC1C(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NAFC2C(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NF_IN_PROCESS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NFIS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NNFV(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NPV(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTHER_ASSETS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PLANT(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RBCWIP(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RBDD(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RBNF(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RB_NF_IN_PROCESS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(REARNC(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(SALES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(SHORT_TERM_DEBT(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(
     +           INTEREST_ON_SHORT_TERM_DEBT(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEF_TAX_CR_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(WCCUM(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OPERATING_REVENUES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(STD_RATE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LIQUID_INVESTMENTS(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NUC_DECOM_FUND_BAL(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUMTXNORM(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(BASE_REVENUE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTHER_REVENUE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ADJ_CLAUSE_REVENUE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OTHER_LT_LIABILITY(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_DEF_REVENUES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NPV_RATEBASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_ITC_DEF_RATEBASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RBCWIP_AFDC_METH2(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CUM_DEF_TAX_RATEBASE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RB_REG_DD(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(DEFERRED_EXPENSE_BALANCE(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AMTBKPREF(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AMTNEGBKPREF(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(AVAILCREDIT(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(INVESTMENT_IN_SUBSIDIARIES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CAPITIALZIED_LEASES(2,0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(INIT_PLANNING_PEAK(3,0:NUM_OF_ACTIVE_CLASSES))
C
C
         IF(ALLOCATED(ANNINT)) DEALLOCATE(ANNINT,LTDINT,LTDRET,
     +                                    PSDIV,PSRED,RATE_REVENUE,
     +                                    NET_DEFERRED_EXPENSE_CASH,
     +                                    ANNUAL_DEFERRED_CASH_AMORT,
     +                                    ANN_PS_DIV,ANN_LTD_INT)
         ALLOCATE(ANNINT(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                         0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ANN_PS_DIV(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                         0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ANN_LTD_INT(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                         0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LTDINT(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                         0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(LTDRET(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                         0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PSDIV(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                         0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PSRED(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                         0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(RATE_REVENUE(0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                         0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(NET_DEFERRED_EXPENSE_CASH(
     +                               0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                         0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(ANNUAL_DEFERRED_CASH_AMORT(
     +                               0:MAX_FINANCIAL_SIMULATION_YEARS-1,
     +                                         0:NUM_OF_ACTIVE_CLASSES))
C
         IF(ALLOCATED(WEIGHTED_COST_OF_CAPITAL_BY))
     +                           DEALLOCATE(WEIGHTED_COST_OF_CAPITAL_BY,
     +                                      PARENT_SUB_CIAC_BALANCE,
     +                                      CIAC_CLASS_BALANCE)
         ALLOCATE(WEIGHTED_COST_OF_CAPITAL_BY(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(PARENT_SUB_CIAC_BALANCE(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(CIAC_CLASS_BALANCE(0:NUM_OF_ACTIVE_CLASSES))
         IF(ALLOCATED(BY_ADJUSTMENT_2_ECONOMIC_ASSETS))
     +          DEALLOCATE(BY_ADJUSTMENT_2_ECONOMIC_ASSETS,
     +                     OPERATING_ASSETS_YEAR_END)
         ALLOCATE(
     +         BY_ADJUSTMENT_2_ECONOMIC_ASSETS(0:NUM_OF_ACTIVE_CLASSES))
         ALLOCATE(OPERATING_ASSETS_YEAR_END(0:NUM_OF_ACTIVE_CLASSES))
         CALL INIT_REPORTING_VALUE_ARRAY(VARIABLE_NUMBER)
C
         COUNTRY_NOT_USA = COUNTRY() /= USA
         MONTAUK_IS_ACTIVE = MONTAUK_ACTIVE()
         CREDITS_ARE_IN_INCOME_STATEMENT = CREDITS_IN_INCOME_STATEMENT()
C
C READ TAX LOSS FILES MOVED HERE TO GET TAX RATES
C
         ACTIVE_TAX_LOSS_CLASSES = READ_TAX_LOSSES(MAX_CLASS_NUM,
     +                                            NUM_OF_ACTIVE_CLASSES,
     +                                            MASTER_CLASS_LIST)
      RETURN
C***********************************************************************
      ENTRY ZERO_ASSET_CLASS_ARRAYS
C***********************************************************************
C
         CUSTOMER_DEPOSITS_BAL = 0.
         CIAC_BALANCE = 0.
         CLASS_GPV = 0.
         NET_UTILITY_PLANT = 0.
         CLASS_CWIP = 0.
         NET_DD_BALANCE = 0.
         OTHER_DD_BALANCE = 0.
         GOODWILL = 0.
         UNAMORTIZED_INTEREST_BALANCE = 0.
         UNAMORTIZED_ISSUE_EXP_BALANCE = 0.
         CLASS_CUMULATIVE_DEPRECIATION = 0.
         CLASS_NET_NF_VALUE = 0.
         RATE_BASE = 0.
         DEFERRED_DEBITS_RATE_BASE = 0.
         DEFERRED_CREDITS_IN_RATE_BASE = 0.
         NUC_FUEL_RATE_BASE = 0.
         CWIP_IN_RATE_BASE = 0.
         NUC_DECOM_RATE_BASE = 0.
         CIAC_RATE_BASE = 0.
         PLANT_IN_SERVICE_RATE_BASE = 0.
         ASSET_NEC_IN_RATE_BASE = 0.
         CAPITIALIZED_LEASES_RATE_BASE = 0.
         LINEC = 0.
         COMMON_STOCK = 0.
         COMMON_SHARES = 0.
         PREFERRED_STOCK = 0.
         LONG_TERM_DEBT = 0.
C
         CUMULATIVE_NUCLEAR_BURN = 0.
         NET_NUCLEAR_FUEL_ADJ = 0.
         CUM_RATE_BASE_NUCLEAR_BURN = 0.
         CUM_CAPTURED_OPT_METHOD_REVS = 0.
         CUMULATIVE_BOOK_DEP_ADJUSTMENTS = 0.
         CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS = 0.
         CUMULATIVE_GPV_ADJUSTMENTS = 0.
         AI_CLASS_CWIP = 0.
         CLASS_ADDENDUM_2_RATE_BASE = 0.
         POST_RETIREMENT_MEDICAL_FUND = 0.
         POST_RETIREMENT_MED_PAYABLE = 0.
         OTHER_COMPREHENSIVE_INCOME_BALANCE = 0.
         OPERATING_REVENUE_TAX_LAGGED_BASIS = 0.
         FASB_87_INTANGIBLE_ASSETS = 0.
         ACCOUNTS_RECEIVABLE = 0.
         CLASS_NUC_DECOM_TRUST_BAL = 0.
         CLASS_NUC_DECOM_INC_EARNINGS = 0.
         CLASS_NUC_DECOM_BAL_EARNINGS = 0.
         ACCOUNTS_PAYABLE = 0.
         FUEL_INVENTORY = 0.
         CLASS_MATERIALS_N_SUPPLIES = 0.
         CLASS_GAS_STORAGE = 0.
         CLASS_DEFERRED_PURCHASE_GAS = 0.
         ACQUISITION_PREMIUM = 0.
         DEFERRED_FUEL_BALANCE = 0.
         COMMON_DIVIDEND_PAYMENT = 0.
         NUC_DECOM_FUND_LIABILITY = 0.
         LONG_TERM_INVESTMENTS = 0.
         DEBT_FILE_INVESTMENTS = 0.
         NOTES_RECEIVABLE = 0.
         GRE_OTH_PROP_TAXES = 0.
         NOTES_PAYABLE = 0.
         OTHER_DEFERRED_CREDITS_BAL = 0.
         REGULATORY_DEFERRED_CREDITS_BAL = 0.
         GAIN_ON_REAQUIRED_DEBT_BAL = 0.
         CUM_AMORT_ADJUSTMENT = 0.
         CUM_GOODWILL_AT = 0.
         CUM_REG_ASSET_ADJ_AT = 0.
         CUM_FASB133_ADJ_AT = 0.
         CUM_FASB109_ADJ_AT = 0.
         DEBT_FILE_UNAMORT_INTR_BAL = 0.
         DEBT_FILE_UNAMORT_ISS_EXP_BAL = 0.
         DEBIT_FILE_UNAMORT_ISS_EXP_BAL = 0.
         CUM_DD_UNAMORT_INTR_ADJ_AT = 0.
         CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT = 0.
         NUCLEAR_DECOM_FUND_BAL_ADJ_AT = 0.
         CAP_LEASES_BAL_ADJ_AT = 0.
         ASSETS_NEC_BAL_ADJ_AT = 0.
         PREFERRED_STOCK_BAL_ADJ_AT = 0.
         LTD_BAL_ADJ_AT = 0.
         STD_BAL_ADJ_AT = 0.
         NUC_DECOM_LIAB_BAL_ADJ_AT = 0.
         LIABS_NEC_BAL_ADJ_AT = 0.
         OTHER_INVESTMENT_BAL_ADJ_AT = 0.
         NOTES_RECEIVABLE_BAL_ADJ_AT = 0.
         POST_RETIRE_MEDICAL_BAL_ADJ_AT = 0.
         DEFERRED_REVENUES_BAL_ADJ_AT = 0.
         DEFERRED_FUEL_BAL_ADJ_AT = 0.
         DEFERRED_PURCH_GAS_BAL_ADJ_AT = 0.
         LT_INVEST_BAL_ADJ_AT = 0.
         ST_INVEST_BAL_ADJ_AT = 0.
         FUEL_INVENTORY_BAL_ADJ_AT = 0.
         GAS_IN_STORAGE_BAL_ADJ_AT = 0.
         MATRIAL_SUPPLY_BAL_ADJ_AT = 0.
         ACCOUNTS_RECV_BAL_ADJ_AT = 0.
         UNBILLED_REV_BAL_ADJ_AT = 0.
         TAXES_RECEIVABLE_BAL_ADJ_AT = 0.
         CURRENT_LT_DEBT_BAL_ADJ_AT = 0.
         NOTES_PAYABLE_BAL_ADJ_AT = 0.
         CUSTOMER_DEPOSIT_BAL_ADJ_AT = 0.
         CICA_BAL_ADJ_AT = 0.
         POST_RETIRE_PAYABLE_BAL_ADJ_AT = 0.
         ACCRUED_PENSION_BAL_ADJ_AT = 0.
         DEFERRED_GAINS_BAL_ADJ_AT = 0.
         storm_RESERVE_BAL_ADJ_AT = 0.
         ACCOUNTS_PAYABLE_BAL_ADJ_AT = 0.
         CUM_DD_RATEBASE_ADJUST = 0.
         PREFERRED_STOCK_ADDENDUM = 0.
         LONG_TERM_DEBT_ADDENDUM = 0.
         WEIGHTED_CLASS_PS_COST = 0.
         WEIGHTED_CLASS_LTD_COST = 0.
C
         CLASS_NAME(:) = ' '
         CLASS_TYPE(:) = ' '
         CURRENCY_DENOMINATION(:) = ' '
         REPORT_CLASS(:) = .TRUE.
         REPORT_ZEROS_4_CLASS(:) = .FALSE.
         CONSOLIDATING_CLASS(:) = .FALSE.
         FED_TAX_EXEMPT(:) = ' '
C
C PARAMETER FILE VALUES
C
         ABANDS = 0.
         AFDC1C = 0.
         AFDC2C = 0.
         AFDCDP = 0.
         BKDEPC = 0.
         BOOK_VALUE_STOCK = 0.
         STOCK_PRICE_YEAR_END = 0.
         DEFERRED_PURCHASE_POWER = 0.
         PENSION_LIABILITY = 0.
         DEFERRED_GAIN_FROM_SALES = 0.
         STORM_RESERVE_BALANCE = 0.
         ExecBenefitsBalance = 0.
         IncentiveCompBalance = 0.
         ACCRUED_VACATION_PAY_BALANCE = 0.
         RB_INCLUDE_DEFERRED_TAX_DR = 0.
         RB_INCLUDE_DEFERRED_REVENUES = 0.
         RB_EXCLUDED_PENSION_LIABILITY = 0.
         RB_EXCLUDED_DEFERRED_ASSET_GAIN = 0.
         RB_EXCLUDED_STORM_RESERVE = 0.
         RB_EXCLUDE_ACCRUED_VACATION_PAY = 0.
         FASB143_NET_ASSET_VALUE = 0.
         FASB143_LT_LIABILITY_VALUE = 0.
         TOTAL_CAPITIAL = 0.
         CEPCUM = 0.
         COMMON_EQUITY = 0.
         DDAMTC = 0.
         DEPCUM = 0.
         DEF_ITC_BALANCE = 0.
         NAFC1C = 0.
         NAFC2C = 0.
         NF_IN_PROCESS = 0.
         NFIS = 0.
         NNFV = 0.
         NPV = 0.
         OTHER_ASSETS = 0.
         PLANT = 0.
         RBCWIP = 0.
         RBDD = 0.
         RBNF = 0.
         RB_NF_IN_PROCESS = 0.
         REARNC = 0.
         SALES = 0.
         SHORT_TERM_DEBT = 0.
         INTEREST_ON_SHORT_TERM_DEBT = 0.
         DEF_TAX_CR_BALANCE = 0.
         WCCUM = 0.
         OPERATING_REVENUES = 0.
         STD_RATE = 0.
         LIQUID_INVESTMENTS = 0.
         NUC_DECOM_FUND_BAL = 0.
         CUMTXNORM = 0.
         BASE_REVENUE = 0.
         OTHER_REVENUE = 0.
         ADJ_CLAUSE_REVENUE = 0.
         OTHER_LT_LIABILITY = 0.
         CUM_DEF_REVENUES = 0.
         NPV_RATEBASE  = 0.
         CUM_ITC_DEF_RATEBASE = 0.
         RBCWIP_AFDC_METH2 = 0.
         CUM_DEF_TAX_RATEBASE = 0.
         RB_REG_DD = 0.
         DEFERRED_EXPENSE_BALANCE = 0.
         AMTBKPREF = 0.
         AMTNEGBKPREF = 0.
         AVAILCREDIT = 0.
         INVESTMENT_IN_SUBSIDIARIES = 0.
         CAPITIALZIED_LEASES = 0.
C
         INIT_PLANNING_PEAK = 0.
C
         ANNINT = 0.
         ANN_PS_DIV = 0.
         ANN_LTD_INT = 0.
         LTDINT = 0.
         LTDRET = 0.
         PSDIV = 0.
         PSRED = 0.
         RATE_REVENUE = 0.
         NET_DEFERRED_EXPENSE_CASH = 0.
         ANNUAL_DEFERRED_CASH_AMORT = 0.
C
         BY_ADJUSTMENT_2_ECONOMIC_ASSETS = 0.
         OPERATING_ASSETS_YEAR_END = 0.
         WEIGHTED_COST_OF_CAPITAL_BY = 0.
         PARENT_SUB_CIAC_BALANCE = 0.
         CIAC_CLASS_BALANCE = 0.
         CLASS_PRIOR_INBALANCE = 0.
      RETURN
C***********************************************************************
      ENTRY ASSET_CLASS_ANALYSIS_BY(R_YEAR,WRITE_THE_RESULTS)
C***********************************************************************
C
         VARS_2_PASS = VARIABLE_NUMBER-INT2(1)
         IF(ASSET_CLASS_REPORTS() .AND.
     +                 .NOT. REPORT_HEADER_ACTIVE) THEN
            INCOME_UNIT = ASSET_CLASS_INCOME_HEADER(START_RECORD,
     +                                              VARIABLE_NUMBER)
            REPORT_HEADER_ACTIVE = .TRUE.
         ENDIF
C
         WKP_ACTIVE = WEST_KOOTENAY_POWER()
         YR = R_YEAR
         AA_CLASS_EXISTS = .FALSE.
         ASSET_REPORTS_ACTIVE = WRITE_THE_RESULTS .AND.
     +                          ASSET_CLASS_REPORTS()
         SBU_LTD_ELIM = 0.
         SBU_STD_ELIM = 0.
         SBU_PS_ELIM = 0.
         SBU_UNAMORTIZED_INTEREST_BAL = 0.
         SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL = 0.           ! 339
         TOTAL_SUB_COMMON_EQUITY = 0.
         TOTAL_SUB_RETAINED_EARNINGS = 0.
         TOTAL_SUB_OCI_EARNINGS = 0.
         TOTAL_SUB_INVESTMENT = 0.
         FIRST_LEVEL_SUB_COMMON_EQUITY = 0.
         FIRST_LEVEL_SUB_EARNINGS = 0.
         FIRST_LEVEL_SUB_INVESTMENT = 0.
         YEAR_END_UNUSED_CREDIT_BAL = 0.
         UNMODELLED_SUBS_OWNED_BY_SUBS = 0. ! NON-ZERO BALANCES OF SUBS INITIALIZATION FILE
         UNMODELED_SUB_DIVIDEND_2_PARENT = 0.
         LAST_CLASS_LEVEL = -999
C        VOID_LOGICAL = ZERO_TOTAL_EMIS_VARS()
C
         SEPARATE_ELIMINATIONS = .FALSE.
C
C 10/15/97 SUM OF SBUs AND SUBs
C
         IF(ALLOCATED(BALANCE_SHEET_ROLLUPS))
     +                                 DEALLOCATE(BALANCE_SHEET_ROLLUPS)
         ALLOCATE(BALANCE_SHEET_ROLLUPS(2,0:LAST_TRANSFER_ITEM,
     +                                              0:MAX_LINKED_LEVEL))
         BALANCE_SHEET_ROLLUPS = 0.


         IF(ALLOCATED(LEVEL_SUMATION)) DEALLOCATE(LEVEL_SUMATION)
         ALLOCATE(LEVEL_SUMATION(0:VARIABLE_NUMBER-1,
     +                                              0:MAX_LINKED_LEVEL))
         LEVEL_SUMATION = 0.
C
         ALLOCATE(NUC_FUEL_RATE_BASE_AT(0:MAX_LINKED_LEVEL))
         ALLOCATE(CWIP_IN_RATE_BASE_AT(0:MAX_LINKED_LEVEL))
         ALLOCATE(OPENING_CASH_BALANCES(0:NUM_OF_ACTIVE_CLASSES))
         NUC_FUEL_RATE_BASE_AT = 0.
         CWIP_IN_RATE_BASE_AT = 0.
         OPENING_CASH_BALANCES = 0.
C
         IF(ALLOCATED(SUB_INVESTMENT_IN_SUBS))
     +                               DEALLOCATE(SUB_INVESTMENT_IN_SUBS)
         ALLOCATE(SUB_INVESTMENT_IN_SUBS(0:MAX_LINKED_LEVEL))
         SUB_INVESTMENT_IN_SUBS = 0.
         IF(YR == 1) THEN
C
C PROCESS THE ADDENDUM FILE
C
            CALL ADDENDUMS(.FALSE.)
            DUKE_IS_ACTIVE = DUKE()
            CPL_IS_ACTIVE = CPL_ACTIVE()
            AMEREN_IS_ACTIVE = AMEREN()
            PACIFICORP_IS_ACTIVE = PACIFICORP()
            FirstEnergy_Is_Active = FirstEnergy()
            IF(CPL_IS_ACTIVE)
     +            CALL CPL_INT_DEFERRED_FUEL_ACCNTING(MASTER_CLASS_LIST,
     +                                                CLASS_TYPE)
            EMPIRE_IS_ACTIVE = EMPIRE()
            IP_IS_ACTIVE = UTILITY_IS_IP()
            ST_JOE_BASE_ELECTRIC_REVENEUS = 0.
            CALL READ_ELIMINATIONS(INT2(VARIABLE_NUMBER-1))
C    
C           
C           
            VARIABLE = 0.
            SUBSIDARY_VARIABLES = 0.
            SBU_VARIABLES = 0.
            CALL STORE_REPORTING_VALUES(VARIABLE)
C
C READ TAX LOSS FILES MOVED ABOVE 9/17/98
C
C           ACTIVE_TAX_LOSS_CLASSES = READ_TAX_LOSSES(MAX_CLASS_NUM,
C    +                                            NUM_OF_ACTIVE_CLASSES,
C    +                                            MASTER_CLASS_LIST)
            CALL INIT_READING_CLASS_PARAMETERS(MAX_CLASS_NUM)
            CALL INIT_CLASS_RUN_SWITCH_FILE(MAX_CLASS_NUM)
c            CALL INIT_PRODUCTION_CASH_LAG()
            IF(WVPA()) THEN
               CALL INIT_WVPA_SALES_REVENUE_BY_COOP
               VOID_LOGICAL = WVPA_INIT_TRACKER_BALANCES()
            ELSE
               CALL INIT_SALES_REVENUE_BY_CLASS
            ENDIF
C
C INITIALIZE BALANCE SHEET AND OUTPUT INFORMATION
C
c           NUMBER_OF_REPORTING_CLASSES = DEFINED_CLASSES ! TESTING
c           PARENT_HAS_LINKED_SUBS = .TRUE.
c           PARENT_HAS_LINKED_SBUS = .TRUE.
            SUBS_ACTIVE = DEFINED_CLASSES > 1
            SUBS_ACTIVE_FOR_REPORTING = NUMBER_OF_REPORTING_CLASSES > 1
            IF(SUBS_ACTIVE_FOR_REPORTING) THEN
               REPORTING_CLASS_ID = REPORTING_ASSET_CLASS()
            ELSE  
               REPORTING_CLASS_ID = -1 !IF ONLY ONE CLASS THE PARENT GETS OUTPUTTED
            ENDIF
            IF(ASSET_REPORTS_ACTIVE) THEN
               IF(SUBS_ACTIVE_FOR_REPORTING) THEN
                  BASE_OUTPUT_RECORD = START_RECORD +
     +                                   NUMBER_OF_REPORTING_CLASSES + 1
                  IF(PARENT_HAS_LINKED_SUBS)
     +                       BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD + 1
                  IF(PARENT_HAS_LINKED_SBUS)
     +                       BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD + 1
C                 IF(NUM_OF_REGULATED_UNITS > 0)
C    +                       BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD + 1
               ELSE
                  BASE_OUTPUT_RECORD = START_RECORD
                  REPORTING_CLASS_ID = -1 ! ONLY THE PARENT GETS OUTPUTTED
               ENDIF
            ENDIF
            CONSLD_YEAR_END_OP_ASSETS = 0
c        RETURN
c           LAST_GROUP_WAS_A_SUBSIDARY = .TRUE.
C WRITE THE CONSOLIDATED INFORMATION
         IF(END_POINT == START_STUDY_ENDPOINT().AND.
     +                                       GRX_ITERATIONS == 0) THEN ! OPEN OUTPUT FILE
            TEMP_I2 = START_STUDY_ENDPOINT()
            WRITE(4,*) ' 091312 END_POINT START_STUDY_ENDPOINT',
     +                                                 END_POINT,TEMP_I2
            INQUIRE(FILE='MSG'//trim(GET_SCENAME())//'.STR',
     +                                                EXIST=FILE_EXISTS)
            IF(FILE_EXISTS) THEN
               CALL ERASE('MSG'//trim(GET_SCENAME())//'.STR')
            ENDIF
            IF(LAHEY_LF95()) THEN
               OPEN(23487,FILE='MSG'//trim(GET_SCENAME())//'.STR',
     +                           ACCESS='TRANSPARENT',STATUS='REPLACE')
               WRITE(23487) 'LF95 '
            ELSE
               OPEN(23487,FILE='MSG'//trim(GET_SCENAME())//'.STR',
     +          ACCESS='SEQUENTIAL',FORM='UNFORMATTED',STATUS='REPLACE')
            ENDIF
         ENDIF
            CLASS = DEFINED_CLASS_POINTER_LIST(1)
            PARENT_CLASS = CLASS == PARENT_CLASS_ID_NUM
            CLASS_POS = MASTER_CLASS_LIST(CLASS)
            PARENT_CLASS_NAME = CLASS_NAME(CLASS_POS)
            IF(DEFINED_CLASSES == 1) THEN
               ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))
               WRITE(23487) END_POINT,
     +                 INT2(0),
     +                 ASSET_CLASS_NAME,
     +                 'Par',
     +                 INT2(PARENT_CLASS_ID_NUM-1),
     +                 INT2(BASE_YEAR),
     +                 INT2(2050)
            ELSE
             ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))//' (Con)'
             WRITE(23487) END_POINT,
     +                   INT2(0),
     +                   ASSET_CLASS_NAME,
     +                   'CON',
     +                   INT2(-1),
     +                   INT2(BASE_YEAR),
     +                   INT2(2050)
C WRITE THE PARENT AND STRUCTURE INFORMATION 
             DO CLASS_COUNTER = 1,DEFINED_CLASSES
                CLASS = DEFINED_CLASS_POINTER_LIST(CLASS_COUNTER)
                PARENT_CLASS = CLASS == PARENT_CLASS_ID_NUM
                CLASS_POS = MASTER_CLASS_LIST(CLASS)
                IF(PARENT_CLASS) THEN
                   ASSET_CLASS_NAME =
     +                        trim(CLASS_NAME(CLASS_POS))//' (Parent)'                  
                ELSEIF(trim(CLASS_NAME(CLASS_POS)) /= ' ')THEN
                  ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))
                ELSE
                   WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
                   ASSET_CLASS_NAME = 'Class '//STR_CLASS_NUM
                ENDIF
                IF(PARENT_CLASS) THEN
                   ASSET_CLASS_TYPE_NAME = 'Par'
                ELSEIF(CLASS_TYPE(CLASS_POS) == SBU) THEN
                   ASSET_CLASS_TYPE_NAME = 'SBU'
                ELSEIF(CLASS_TYPE(CLASS_POS) == SUBSIDIARY) THEN
                   ASSET_CLASS_TYPE_NAME = 'Sub'
                ELSEIF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                   ASSET_CLASS_TYPE_NAME = 'Reg'
                ELSE
                   ASSET_CLASS_TYPE_NAME = 'XXX'
                ENDIF
                IF(BASE_YEAR+ACTIVATE_CLASS_IN_YEAR(CLASS_POS) >
     +                                            LAST_STUDY_YEAR) CYCLE
                WRITE(23487) END_POINT,
     +                 INT2(CLASS_AT_LEVEL(CLASS_COUNTER)),
     +                 ASSET_CLASS_NAME,
     +                 ASSET_CLASS_TYPE_NAME,
     +                 INT2(CLASS-1),
     +                INT2(BASE_YEAR+ACTIVATE_CLASS_IN_YEAR(CLASS_POS)),
     +                INT2(BASE_YEAR+YEAR_CLASS_DEACTIVATED(CLASS_POS))
             ENDDO
            ENDIF
            DO CLASS_COUNTER = DEFINED_CLASSES,1,-1
C
               CLASS = DEFINED_CLASS_POINTER_LIST(CLASS_COUNTER)
               CLASS_LEVEL = CLASS_AT_LEVEL(CLASS_COUNTER)
               PARENT_CLASS = CLASS == PARENT_CLASS_ID_NUM
               CLASS_POS = MASTER_CLASS_LIST(CLASS)
               SUBSIDIARY_CLASS = CLASS_TYPE(CLASS_POS) == SUBSIDIARY
               THIS_IS_REPORTING_CLASS = CLASS == REPORTING_CLASS_ID
               DONT_TALLY_THIS_CLASS =
     +                ACTIVATE_CLASS_IN_YEAR(CLASS_POS) >= YR .AND.
     +                             ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > 0
               if(class == class_check + 1) then
                  CLASS_POS = MASTER_CLASS_LIST(CLASS)
               endif
C              
c              IF(LAST_GROUP_WAS_A_SUBSIDARY) THEN
c                 SBU_VARIABLES = 0.
c                 SBU_LTD_ELIM = 0.
c                 SBU_STD_ELIM = 0.
c                 SBU_PS_ELIM = 0.
c                 SBU_UNAMORTIZED_INTEREST_BAL = 0.
c              ENDIF
c              LAST_GROUP_WAS_A_SUBSIDARY = CLASS_TYPE(CLASS_POS) /= SBU
c    +                    .AND. CLASS_TYPE(CLASS_POS) /= REGULATED_GROUP ! PARENT OR SUB
               IF(PARENT_CLASS .AND. SUBS_ACTIVE) THEN
C
                  PARENT_AVERAGE_SHARES = COMMON_SHARES(2,CLASS_POS)
                  PARENT_YEAR_END_SHARES = COMMON_SHARES(2,CLASS_POS)
                  EXCLUDE_SUB_COMMON_EQUITY = SUBSIDARY_VARIABLES(77)
                  EXCLUDE_SUB_RETAINED_EARNINGS=SUBSIDARY_VARIABLES(78)
                  EXCLUDE_SUB_OCI_EARNINGS = SUBSIDARY_VARIABLES(730) ! FE 7/8/04
                  EXCLUDE_SUB_TAX_DEFERRALS_DR= SUBSIDARY_VARIABLES(73)
                  SUBSIDARY_VARIABLES(61) = NOT_AVAIL ! RETURN_ON_RATEBASE
                  IF(ASSET_REPORTS_ACTIVE .AND.
     +                                      PARENT_HAS_LINKED_SBUS) THEN
C
C BASE YEAR SHAREHOLDER VALUE
C
                     ASSET_CLASS_NAME = 'SBU Totals'
                     CALL PASS_PARENT_2_SBU_TOTALS(
     +                                    VARS_2_PASS,
     +                                    LEVEL_SUMATION(0,CLASS_LEVEL),
     +                                    SBU_VARIABLES)
                     SBU_VARIABLES(339) =   ! RESET CLASS_UNAMORTIZED_INTEREST_BAL
     +                                      SBU_VARIABLES(628)   ! UNAMORT_DEBT_INTEREST_BAL
     +                                      + SBU_VARIABLES(629) !UNAMORT_DEBIT_INTEREST_BAL
                     CALL CLASS_SHAREHOLDER_VALUE_NA(SBU_VARIABLES)
C
                     SBU_VARIABLES(61) = NOT_AVAIL ! RETURN_ON_RATEBASE
                     OUTPUT_CLASS_ID = -10000.
                     SBU_VARIABLES(441) = OUTPUT_CLASS_ID
                     SBU_VARIABLES(641) = SBU_VARIABLES(76)
     +                                    - SBU_VARIABLES(90) ! ASSET_MINUS_LIABS
                     SBU_VARIABLES(642) = 0.
                     TOTAL_SBU_PRIOR_INBALANCE = SBU_VARIABLES(641)
                     WRITE(INCOME_UNIT,REC=BASE_OUTPUT_RECORD)
     +                                               PRT_ENDPOINT(),
     +                                               FLOAT(BASE_YEAR),
     +                                               ASSET_CLASS_NAME,
     +                                               SBU_VARIABLES
                     IF(FirstEnergy_Is_Active)
     +                  CALL FE_PCA_LEGAL_REPORTS(FLOAT(BASE_YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            BASE_OUTPUT_RECORD,
     +                                            SBU_VARIABLES)
                     BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
                  ENDIF
                  SUBSIDARY_VARIABLES(77) = TOTAL_SUB_COMMON_EQUITY
                  SUBSIDARY_VARIABLES(78) = TOTAL_SUB_RETAINED_EARNINGS
                  SUBSIDARY_VARIABLES(730) = TOTAL_SUB_OCI_EARNINGS
c                  SUBSIDARY_VARIABLES(91) = TOTAL_SUB_INVESTMENT
                  
                  SUBSIDARY_VARIABLES(79) = SUBSIDARY_VARIABLES(77) +
     +                                      SUBSIDARY_VARIABLES(78)
                  EXCLUDE_SUB_COMMON_EQUITY = SUBSIDARY_VARIABLES(77)
                  EXCLUDE_SUB_RETAINED_EARNINGS=SUBSIDARY_VARIABLES(78)
!                  EXCLUDE_SUB_OCI_EARNINGS = 0.  FE 7/7/04
                  EXCLUDE_SUB_INVESTMENT = SUBSIDARY_VARIABLES(91)
                  SUBSIDARY_VARIABLES(82) = SUBSIDARY_VARIABLES(79)
     +                                      + SUBSIDARY_VARIABLES(80)
     +                                      + SUBSIDARY_VARIABLES(81)
     +                                      + SUBSIDARY_VARIABLES(730)
                  SUBSIDARY_VARIABLES(713) = SUBSIDARY_VARIABLES(412)
     +                                      + SUBSIDARY_VARIABLES(86)
     +                                      + SUBSIDARY_VARIABLES(87)
     +                                      + SUBSIDARY_VARIABLES(88)
     +                                      + SUBSIDARY_VARIABLES(710)
     +                                      + SUBSIDARY_VARIABLES(711)
     +                                      + SUBSIDARY_VARIABLES(712)
                  SUBSIDARY_VARIABLES(90) = SUBSIDARY_VARIABLES(82)
     +                                      + SUBSIDARY_VARIABLES(83)
     +                                      + SUBSIDARY_VARIABLES(84)
     +                                      + SUBSIDARY_VARIABLES(85)
     +                                      + SUBSIDARY_VARIABLES(89)
     +                                      + SUBSIDARY_VARIABLES(287)
     +                                      + SUBSIDARY_VARIABLES(288)
     +                                      + SUBSIDARY_VARIABLES(389)
     +                                      + SUBSIDARY_VARIABLES(403)
     +                                      + SUBSIDARY_VARIABLES(411)
     +                                      + SUBSIDARY_VARIABLES(413)
     +                                      + SUBSIDARY_VARIABLES(414)
     +                                      + SUBSIDARY_VARIABLES(637)
     +                                      + SUBSIDARY_VARIABLES(713)
     +                                      + SUBSIDARY_VARIABLES(905)
     +                                      + SUBSIDARY_VARIABLES(906)
                  SUBSIDARY_VARIABLES(641) = SUBSIDARY_VARIABLES(76)
     +                                       - SUBSIDARY_VARIABLES(90) ! ASSET_MINUS_LIABS
                  SUBSIDARY_VARIABLES(642) = 0.
                  TOTAL_SUB_PRIOR_INBALANCE = SUBSIDARY_VARIABLES(641)
                  IF(ASSET_REPORTS_ACTIVE .AND.
     +                                      PARENT_HAS_LINKED_SUBS) THEN
                     ASSET_CLASS_NAME = 'Subsidiary Totals'
                     CALL CLASS_SHAREHOLDER_VALUE_NA(
     +                                              SUBSIDARY_VARIABLES)
C
                     OUTPUT_CLASS_ID = -11000
                     SUBSIDARY_VARIABLES(441) = OUTPUT_CLASS_ID
                     SUBSIDARY_VARIABLES(641) = SUBSIDARY_VARIABLES(76)
     +                                          -SUBSIDARY_VARIABLES(90) ! ASSET_MINUS_LIABS
                     SUBSIDARY_VARIABLES(642) = 0.
                     TOTAL_SUB_PRIOR_INBALANCE=SUBSIDARY_VARIABLES(641)
                     WRITE(INCOME_UNIT,REC=BASE_OUTPUT_RECORD)
     +                                               PRT_ENDPOINT(),
     +                                               FLOAT(BASE_YEAR),
     +                                               ASSET_CLASS_NAME,
     +                                               SUBSIDARY_VARIABLES
                     IF(FirstEnergy_Is_Active)
     +                  CALL FE_PCA_LEGAL_REPORTS(FLOAT(BASE_YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            BASE_OUTPUT_RECORD,
     +                                            SUBSIDARY_VARIABLES)
                     BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
                  ENDIF
                  SUBSIDARY_VARIABLES(61) = 0.
                  IF(REPORTING_CLASS_ID == -3) THEN
                     CALL STORE_REPORTING_VALUES(SUBSIDARY_VARIABLES)
                     THIS_IS_REPORTING_CLASS = .FALSE.
                  ENDIF
                  IF(REPORTING_CLASS_ID == -4) THEN
                     CALL STORE_REPORTING_VALUES(SBU_VARIABLES)
                     THIS_IS_REPORTING_CLASS = .FALSE.
                  ENDIF
               ENDIF
               IF(CLASS > 0 .AND. MASTER_CLASS_LIST(CLASS) == 0) CYCLE
               CALL EXISTING_ASSET_BY_INFO(CLASS,CLASS_GPV(2,CLASS_POS),
     +                       CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS))
               CALL DEBIT_BY_INFO(CLASS,
     +                        NET_DD_BALANCE(2,CLASS_POS),
     +                        DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS),
     +                        UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS),
     +                        OTHER_DD_BALANCE(2,CLASS_POS),
     +                        GOODWILL(2,CLASS_POS),
     +                        CLASS_REGULATORY_ASSETS,
     +                        FASB_109,
     +                        FASB_133,
     +                       UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS))
               CALL DEFERRED_CREDITS_BY_INFO(CLASS,
     +                     DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS),
     +                     OTHER_DEFERRED_CREDITS_BAL(2,CLASS_POS),
     +                     REGULATORY_DEFERRED_CREDITS_BAL(2,CLASS_POS),
     +                     GAIN_ON_REAQUIRED_DEBT_BAL(2,CLASS_POS),
     +                     DEFERRED_GAIN_FROM_SALES(2,CLASS_POS))
               CALL DEBT_BY_ISSUE_EXP_BAL(CLASS,
     +                                 PS_ISSUING_BAL,
     +                                 LTD_ISSUING_BAL,
     +                                 DEBT_FILE_INVESTMENTS(CLASS_POS),
     +                                 NOTES_RECEIVABLE(CLASS_POS),
     +                                 NOTES_PAYABLE(CLASS_POS),
     +                                 CURRENT_LTD_RETIREMENTS)
               CALL DEBT_COMMON_STOCK_BY_INFO(CLASS,
     +                                   DEBT_COMMON_STOCK_BALANCE,
     +                                   DEBT_COMMON_SHARES_OUTSTANDING,
     +                                   CS_ISSUE_EXP_BAL)
               DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)=CS_ISSUE_EXP_BAL
     +                                                 + PS_ISSUING_BAL
c     +                                                 + LTD_ISSUING_BAL
               DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS) = LTD_ISSUING_BAL
               NET_DD_BALANCE(2,CLASS_POS) = NET_DD_BALANCE(2,CLASS_POS)
     +                        + DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
     +                        + DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS)
c               OTHER_DD_BALANCE(2,CLASS_POS) =
c     +                                    OTHER_DD_BALANCE(2,CLASS_POS)
C     +                                    + PS_ISSUING_BAL
C     +                                    + LTD_ISSUING_BAL
c     +                                    + CS_ISSUE_EXP_BAL ! is shown as an interest or dividends
c               UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS) =
c     +                         UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
c     +                         + PS_ISSUING_BAL
c     +                         + LTD_ISSUING_BAL
               CALL NUCLEAR_FUEL_BY_INFO(CLASS,
     +                                  CLASS_NET_NF_VALUE(2,CLASS_POS),
     +                                  NUC_FUEL_RATE_BASE(2,CLASS_POS),
     +                                  NFIS(2,CLASS_POS))
               CALL FUTURE_ASSET_BY_INFO(CLASS,CLASS_CWIP(2,CLASS_POS),
     +                                   CWIP_IN_RATE_BASE(2,CLASS_POS))
C
C              IF(DUKE_IS_ACTIVE) THEN
C                 NET_DD_BALANCE(2,CLASS_POS) =
C    +                                  NET_DD_BALANCE(2,CLASS_POS) +
C    +                                  CATAWBA_BY_DEBITS_BALANCE(CLASS)
C                 DEF_TAX_CR_BALANCE(2,CLASS_POS) =
C    +                                 DEF_TAX_CR_BALANCE(2,CLASS_POS) +
C    +                                 CATAWBA_BY_DEF_TAX_BALANCE(CLASS)
C              ENDIF
               WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
               IF(CLASS == 0 .AND. SUBS_ACTIVE_FOR_REPORTING) THEN
                  ASSET_CLASS_NAME =
     +                           trim(CLASS_NAME(CLASS_POS))//' (Con)'
               ELSEIF(PARENT_CLASS .AND. SUBS_ACTIVE_FOR_REPORTING) THEN
                  ASSET_CLASS_NAME =
     +                      trim(CLASS_NAME(CLASS_POS))//STR_CLASS_NUM
     +                                                   //' (Parent)'
               ELSEIF(trim(CLASS_NAME(CLASS_POS)) /= ' ')THEN
                  ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))
     +                                                   //STR_CLASS_NUM                  
               ELSE
                  ASSET_CLASS_NAME = 'Class '//STR_CLASS_NUM
               ENDIF
               WRITE(STR_CLASS_NUM,'(I2)') CLASS_LEVEL
               IF(CLASS_TYPE(CLASS_POS) == SBU) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (SBU)'//
     +                                                     STR_CLASS_NUM                  
                  SBU_UNAMORT_DEBIT_INTEREST_BAL =
     +                         SBU_UNAMORT_DEBIT_INTEREST_BAL +
     +                         UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
                  SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL =
     +                        UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
     +                        + SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL           ! 339
                  
               ELSEIF(SUBSIDIARY_CLASS) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Sub)'//
     +                                                     STR_CLASS_NUM                  
               ELSEIF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Reg)'//
     +                                                     STR_CLASS_NUM                  
               ENDIF
c               DO I = 0, VARS_2_PASS
               SBU_VARIABLES(0:VARS_2_PASS) =
     +                         LEVEL_SUMATION(0:VARS_2_PASS,CLASS_LEVEL)
               LEVEL_SUMATION(0:VARS_2_PASS,CLASS_LEVEL) = 0.
c               ENDDO
C               CALL PASS_LEVEL_2_VARS(VARS_2_PASS,
C     +                                LEVEL_SUMATION(0,CLASS_LEVEL),
C     +                                SBU_VARIABLES)
               BY_ADJUSTMENT_2_ECONOMIC_ASSETS(CLASS_POS) =
     +                        BY_ADJUSTMENT_2_ECONOMIC_ASSETS(CLASS_POS)
     +                        + SBU_VARIABLES(262)
               CLASS_ADDENDUM_2_RATE_BASE(CLASS_POS) =
     +                             CLASS_ADDENDUM_2_RATE_BASE(CLASS_POS)
     +                             + SBU_VARIABLES(145)
               DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS) =
     +                            DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
     +                            + SBU_VARIABLES(146)
               UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS) =
     +                         UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
     +                         + SBU_UNAMORT_DEBIT_INTEREST_BAL
               UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS) =
     +                        UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
     +                        + SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL           ! 339
               CLASS_UNAMORTIZED_ISSUE_EXP_BALANCE =
     +                        UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
               UNAMORT_DEBIT_ISS_EXPENSE_BAL =
     +                         DEBIT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
               UNAMORT_DEBT_ISS_EXPENSE_BAL =
     +                          DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
               UNAMORT_DEBT_INTEREST_BAL =
     +                             DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS)
               UNAMORT_DEBIT_INTEREST_BAL = 
     +                         UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
               CLASS_UNAMORTIZED_INTEREST_BAL =
     +                                      UNAMORT_DEBT_INTEREST_BAL
     +                                      + UNAMORT_DEBIT_INTEREST_BAL
               IF(CLASS_TYPE(CLASS_POS) /= SBU .AND.
     +                    CLASS_TYPE(CLASS_POS) /= REGULATED_GROUP) THEN ! PARENT OR SUB
                  CALL SBU_2_PARENT_ADJUSTMENTS(CLASS_POS,.TRUE.)
               ELSE
                  CALL SBU_2_PARENT_ADJUSTMENTS(CLASS_POS,.TRUE.)
               ENDIF
               PARENT_SUB_CIAC_BALANCE(CLASS_POS) =
     +                                         CIAC_BALANCE(2,CLASS_POS)
C
C BALANCE SHEET ASSETS (63-100)
C               VARIABLE = 0.
C              CUMULATIVE_GPV_ADJUSTMENTS(CLASS_POS) =
C    +                               NUC_DECOM_FUND_LIABILITY(CLASS_POS)
               IF(CLASS_TYPE(CLASS_POS) == SUBSIDIARY .AND.
     +                                 .NOT. DONT_TALLY_THIS_CLASS) THEN
                  UNMODELLED_SUBS_OWNED_BY_SUBS =
     +                         UNMODELLED_SUBS_OWNED_BY_SUBS
     +                         + INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS)
               ELSE
               
               ENDIF
               PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS) =
     +                CLASS_GPV(2,CLASS_POS)-
     +                        CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS)
c               RATE_BASE(2,CLASS_POS)=
c     +                          PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS)+
c     +                          DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS) +
c     +                          NUC_FUEL_RATE_BASE(2,CLASS_POS) + 
c     +                          CWIP_IN_RATE_BASE(2,CLASS_POS) +
c     +                          NUC_DECOM_RATE_BASE(2,CLASS_POS) -
c     +                          CUM_DEF_TAX_RATEBASE(2,CLASS_POS) -
c     +                          CUM_ITC_DEF_RATEBASE(2,CLASS_POS) -
c     +                          CIAC_RATE_BASE(2,CLASS_POS) +
c     +                          ASSET_NEC_IN_RATE_BASE(2,CLASS_POS)
               UNAMORT_DEBT_INTEREST_BAL =
     +                             DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS)
               UNAMORT_DEBIT_INTEREST_BAL = 
     +                         UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
               UNAMORT_DEBT_ISS_EXPENSE_BAL =
     +                          DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
               RATE_BASE(2,CLASS_POS) =
     +                  PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS) 
     +                  + DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
     +                  - DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS)
     +                  + NUC_FUEL_RATE_BASE(2,CLASS_POS)
     +                  + CWIP_IN_RATE_BASE(2,CLASS_POS)
     +                  + NUC_DECOM_RATE_BASE(2,CLASS_POS)
     +                  + RB_INCLUDE_DEFERRED_TAX_DR(2,CLASS_POS)
     +                  + RB_INCLUDE_DEFERRED_REVENUES(2,CLASS_POS)
     +                  - CUM_DEF_TAX_RATEBASE(2,CLASS_POS)
     +                  - CUM_ITC_DEF_RATEBASE(2,CLASS_POS)
     +                  - CIAC_RATE_BASE(2,CLASS_POS)
     +                  - RB_EXCLUDED_PENSION_LIABILITY(2,CLASS_POS)
     +                  - RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,CLASS_POS)
     +                  - RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS)
     +                  - RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS)
     +                  + ASSET_NEC_IN_RATE_BASE(2,CLASS_POS)
               NET_UTILITY_PLANT(2,CLASS_POS) = CLASS_GPV(2,CLASS_POS) +
     +                      CLASS_CWIP(2,CLASS_POS) -
     +                      CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS) +
     +                      CLASS_NET_NF_VALUE(2,CLASS_POS)
               VARIABLE(53) = COMMON_SHARES(2,CLASS_POS)
               VARIABLE(299) = COMMON_SHARES(2,CLASS_POS)
               VARIABLE(63) = CLASS_GPV(2,CLASS_POS)  
C    +                             + NUC_DECOM_FUND_LIABILITY(CLASS_POS)
               VARIABLE(64) = CLASS_CWIP(2,CLASS_POS)
               VARIABLE(65) = CLASS_GPV(2,CLASS_POS) + 
     +                        CLASS_CWIP(2,CLASS_POS) 
c    +                      + NUC_DECOM_FUND_LIABILITY(CLASS_POS) !PLANT
               VARIABLE(66) = CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS)
               VARIABLE(67) = CLASS_NET_NF_VALUE(2,CLASS_POS)
               VARIABLE(68) = NET_UTILITY_PLANT(2,CLASS_POS)
c    +                             + NUC_DECOM_FUND_LIABILITY(CLASS_POS)
               VARIABLE(69) = OTHER_ASSETS(2,CLASS_POS)
               VARIABLE(390) = ACCOUNTS_RECEIVABLE(CLASS_POS)
               VARIABLE(391) = FUEL_INVENTORY(CLASS_POS)
               VARIABLE(469) = CLASS_MATERIALS_N_SUPPLIES(CLASS_POS)
               VARIABLE(468) = CLASS_GAS_STORAGE(CLASS_POS)
               VARIABLE(467) = CLASS_DEFERRED_PURCHASE_GAS(CLASS_POS)
               IF(PARENT_CLASS) THEN          
                  INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS) =
     +                           INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS)
c    +                                +    EXCLUDE_SUB_COMMON_EQUITY
c    +                                +    EXCLUDE_SUB_RETAINED_EARNINGS
     +                           + FIRST_LEVEL_SUB_COMMON_EQUITY
     +                           + FIRST_LEVEL_SUB_EARNINGS
               ELSE
                  INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS) =
     +                           INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS)
     +                           + SUB_INVESTMENT_IN_SUBS(CLASS_LEVEL)
                  SUB_INVESTMENT_IN_SUBS(CLASS_LEVEL) = 0.
               ENDIF
               VARIABLE(91) = INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS)
               VARIABLE(92) = CAPITIALZIED_LEASES(2,CLASS_POS)
               VARIABLE(70) = NUC_DECOM_FUND_BAL(2,CLASS_POS)
               VARIABLE(71) = NET_DD_BALANCE(2,CLASS_POS)
               VARIABLE(466) = OTHER_DD_BALANCE(2,CLASS_POS)
               VARIABLE(462) = GOODWILL(2,CLASS_POS)
               VARIABLE(72) = CUM_DEF_REVENUES(2,CLASS_POS)
               VARIABLE(73) = CUMTXNORM(2,CLASS_POS)
               VARIABLE(74) = LIQUID_INVESTMENTS(2,CLASS_POS)
               VARIABLE(286) = POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
               VARIABLE(289) = LONG_TERM_INVESTMENTS(CLASS_POS) +
     +                         DEBT_FILE_INVESTMENTS(CLASS_POS)
               OPENING_CASH_BALANCES(CLASS_POS) =
     +                                LIQUID_INVESTMENTS(2,CLASS_POS)
     +                                + LONG_TERM_INVESTMENTS(CLASS_POS)
     +                                + DEBT_FILE_INVESTMENTS(CLASS_POS)
               VARIABLE(402) = NOTES_RECEIVABLE(CLASS_POS)
               VARIABLE(410) = DEFERRED_PURCHASE_POWER(2,CLASS_POS)
C               VARIABLE(636) = FASB143_NET_ASSET_VALUE(2,CLASS_POS)
C     +            + BALANCE_SHEET_ROLLUPS(2,ARO Liabilities,CLASS_LEVEL)
               CLASS_DEFERRED_FUEL_BALANCE =
     +                                  DEFERRED_FUEL_BALANCE(CLASS_POS) ! VARIABLE(392)
               CLASS_FASB87_BALANCE =
     +                              FASB_87_INTANGIBLE_ASSETS(CLASS_POS)
               VARIABLE(75) = WCCUM(2,CLASS_POS) + LINEC(2,CLASS_POS)
               VARIABLE(76) = NET_UTILITY_PLANT(2,CLASS_POS)
c    +                        + NUC_DECOM_FUND_LIABILITY(CLASS_POS)
     +                        + OTHER_ASSETS(2,CLASS_POS) 
     +                        + INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS)
     +                        + CAPITIALZIED_LEASES(2,CLASS_POS)
     +                        + NUC_DECOM_FUND_BAL(2,CLASS_POS)
     +                        + NET_DD_BALANCE(2,CLASS_POS)
     +                        + CLASS_FASB87_BALANCE
     +                        + CUM_DEF_REVENUES(2,CLASS_POS)
     +                        + CUMTXNORM(2,CLASS_POS) 
     +                        + LIQUID_INVESTMENTS(2,CLASS_POS)
     +                        + POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +                        + NOTES_RECEIVABLE(CLASS_POS)
     +                        + LONG_TERM_INVESTMENTS(CLASS_POS)
     +                        + DEBT_FILE_INVESTMENTS(CLASS_POS)
     +                        + WCCUM(2,CLASS_POS)
     +                        + LINEC(2,CLASS_POS)
     +                        + ACCOUNTS_RECEIVABLE(CLASS_POS)
     +                        + FUEL_INVENTORY(CLASS_POS)
     +                        + DEFERRED_PURCHASE_POWER(2,CLASS_POS)
     +                        + CLASS_DEFERRED_FUEL_BALANCE
     +                        + CLASS_MATERIALS_N_SUPPLIES(CLASS_POS)
     +                        + CLASS_GAS_STORAGE(CLASS_POS)
     +                        + CLASS_DEFERRED_PURCHASE_GAS(CLASS_POS)
     +                        + VARIABLE(636) ! NET ARO ASSET VALUE
C
               VARIABLE(77) = COMMON_STOCK(2,CLASS_POS)
               VARIABLE(78) = REARNC(2,CLASS_POS)
               VARIABLE(79) = COMMON_EQUITY(2,CLASS_POS)
               CLASS_OCI_BALANCE =
     +                     OTHER_COMPREHENSIVE_INCOME_BALANCE(CLASS_POS)  ! 730
               TOTAL_EQUITY_WITH_OCI = CLASS_OCI_BALANCE ! 731
     +                                 + COMMON_EQUITY(2,CLASS_POS)
               VARIABLE(80) = PREFERRED_STOCK(2,CLASS_POS)
               VARIABLE(81) = LONG_TERM_DEBT(2,CLASS_POS)
               VARIABLE(82) = COMMON_EQUITY(2,CLASS_POS)
     +                        + PREFERRED_STOCK(2,CLASS_POS)
     +                        + LONG_TERM_DEBT(2,CLASS_POS)
     +                        + CLASS_OCI_BALANCE
               TOTAL_CAPITIAL_WITH_OCI = TOTAL_CAPITIAL_BAL
               VARIABLE(83) = OTHER_LT_LIABILITY(2,CLASS_POS)
               VARIABLE(637) = FASB143_LT_LIABILITY_VALUE(2,CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(2,ARO Liabilities,CLASS_LEVEL)
c     +                         + SBU_VARIABLES(637) ! NET ARO LIAB VALUE
               VARIABLE(403) = NOTES_PAYABLE(CLASS_POS)
               VARIABLE(84) = SHORT_TERM_DEBT(2,CLASS_POS)
               VARIABLE(85) = CUSTOMER_DEPOSITS_BAL(2,CLASS_POS)
               VARIABLE(86) = CIAC_BALANCE(2,CLASS_POS)
               VARIABLE(87) = DEF_TAX_CR_BALANCE(2,CLASS_POS)
               VARIABLE(88) = DEF_ITC_BALANCE(2,CLASS_POS)
               VARIABLE(287) = POST_RETIREMENT_MED_PAYABLE(CLASS_POS)
               VARIABLE(288) = NUC_DECOM_FUND_LIABILITY(CLASS_POS)
               VARIABLE(389) = ACCOUNTS_PAYABLE(CLASS_POS)
               VARIABLE(411) = PENSION_LIABILITY(2,CLASS_POS)
               VARIABLE(412) = DEFERRED_GAIN_FROM_SALES(2,CLASS_POS)
               VARIABLE(413) = STORM_RESERVE_BALANCE(2,CLASS_POS)
               VARIABLE(905) = ExecBenefitsBalance(2,CLASS_POS)
               VARIABLE(906) = IncentiveCompBalance(2,CLASS_POS)
               VARIABLE(414) = ACCRUED_VACATION_PAY_BALANCE(2,CLASS_POS)
               VARIABLE(89) = LINEC(2,CLASS_POS)
               REGULATORY_DEFERRED_CREDITS_BAL_EOY =
     +            REGULATORY_DEFERRED_CREDITS_BAL(2,CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(2,Regulatory Deferred Credits,
     +                                                      CLASS_LEVEL)
               OTHER_DEFERRED_CREDITS_BAL_EOY =
     +                 OTHER_DEFERRED_CREDITS_BAL(2,CLASS_POS)
     +                 + BALANCE_SHEET_ROLLUPS(2,Other Deferred Credits,
     +                                                      CLASS_LEVEL)
               GAIN_ON_REAQUIRED_DEBT_BAL_EOY =
     +                    GAIN_ON_REAQUIRED_DEBT_BAL(2,CLASS_POS)
     +                    + BALANCE_SHEET_ROLLUPS(2,Reaquired Debt Gain,
     +                                                      CLASS_LEVEL)
               TOTAL_DEFERRED_CREDITS_BAL =                             ! 713
     +                             DEFERRED_GAIN_FROM_SALES(2,CLASS_POS) ! 412
     +                             + CIAC_BALANCE(2,CLASS_POS)           ! 86
     +                             + DEF_TAX_CR_BALANCE(2,CLASS_POS)     ! 87
     +                             + DEF_ITC_BALANCE(2,CLASS_POS)        ! 88
     +                             + OTHER_DEFERRED_CREDITS_BAL_EOY      ! 712
     +                             + REGULATORY_DEFERRED_CREDITS_BAL_EOY ! 711
     +                             + GAIN_ON_REAQUIRED_DEBT_BAL_EOY      ! 710
               CONSOLD_BOY_OTHER_DEFERRED_CREDITS =
     +                                          SUBSIDARY_VARIABLES(712)
               CONSOLD_BOY_REGULATORY_DEFERRED_CREDITS =
     +                                          SUBSIDARY_VARIABLES(711)
               CONSOLD_BOY_GAIN_ON_REAQUIRED_DEBT =
     +                                          SUBSIDARY_VARIABLES(710)
               VARIABLE(90) = REARNC(2,CLASS_POS)
     +                       + COMMON_STOCK(2,CLASS_POS) 
     +                       + CLASS_OCI_BALANCE
     +                       + PREFERRED_STOCK(2,CLASS_POS)
     +                       + LONG_TERM_DEBT(2,CLASS_POS)
     +                       + NOTES_PAYABLE(CLASS_POS)
     +                       + OTHER_LT_LIABILITY(2,CLASS_POS)
     +                       + VARIABLE(637) ! NET ARO LIAB VALUE
     +                       + SHORT_TERM_DEBT(2,CLASS_POS)
     +                       + CUSTOMER_DEPOSITS_BAL(2,CLASS_POS)
     +                       + POST_RETIREMENT_MED_PAYABLE(CLASS_POS)
     +                       + NUC_DECOM_FUND_LIABILITY(CLASS_POS)
     +                       + ACCOUNTS_PAYABLE(CLASS_POS)
     +                       + PENSION_LIABILITY(2,CLASS_POS)
     +                       + STORM_RESERVE_BALANCE(2,CLASS_POS)
     +                       + ExecBenefitsBalance(2,CLASS_POS)
     +                       + IncentiveCompBalance(2,CLASS_POS)
     +                       + ACCRUED_VACATION_PAY_BALANCE(2,CLASS_POS)
     +                       + TOTAL_DEFERRED_CREDITS_BAL 
     +                       + LINEC(2,CLASS_POS)
               ASSET_MINUS_LIABS = VARIABLE(76) - VARIABLE(90)
               ANNUAL_CHANGE_ASSET_MINUS_LIABS = 0.
               CLASS_PRIOR_INBALANCE(CLASS_POS) = ASSET_MINUS_LIABS
               LTD_BALANCE_WO_CURRENT_LTD = LONG_TERM_DEBT(2,CLASS_POS)
     +                                      - CURRENT_LTD_RETIREMENTS
               TOTAL_CAPITIAL_BAL_WO_CURRENT_LTD = TOTAL_CAPITIAL_BAL
     +                                         - CURRENT_LTD_RETIREMENTS
C              IF(CLASS_TYPE(CLASS_POS) == SBU) THEN ! ASSET_CLASS_TYPE
C                 SBU_LTD_ELIM=SBU_LTD_ELIM+LONG_TERM_DEBT(2,CLASS_POS)
C                 SBU_STD_ELIM=SBU_STD_ELIM+SHORT_TERM_DEBT(2,CLASS_POS)
C                 SBU_PS_ELIM=SBU_PS_ELIM+PREFERRED_STOCK(2,CLASS_POS)
C              ENDIF
C
C RATE BASE STUFF
C
               VARIABLE(62)  = RATE_BASE(2,CLASS_POS)
     +                         + CLASS_ADDENDUM_2_RATE_BASE(CLASS_POS)
               VARIABLE(143) = PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS)
               VARIABLE(144) = CUM_DEF_TAX_RATEBASE(2,CLASS_POS)
               VARIABLE(145) = CLASS_ADDENDUM_2_RATE_BASE(CLASS_POS)
               VARIABLE(146) = DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
               VARIABLE(147) = NUC_FUEL_RATE_BASE(2,CLASS_POS)
               VARIABLE(369) = NUC_FUEL_RATE_BASE(2,CLASS_POS)
               VARIABLE(254) = NF_IN_PROCESS(2,CLASS_POS)
               VARIABLE(148) = CWIP_IN_RATE_BASE(2,CLASS_POS)
               VARIABLE(370) = CWIP_IN_RATE_BASE(2,CLASS_POS)
               VARIABLE(149) = CUM_ITC_DEF_RATEBASE(2,CLASS_POS)
               VARIABLE(150) = NUC_DECOM_RATE_BASE(2,CLASS_POS)
               VARIABLE(151) = CIAC_RATE_BASE(2,CLASS_POS)
               VARIABLE(152) = ASSET_NEC_IN_RATE_BASE(2,CLASS_POS)
               VARIABLE(153)=CAPITIALIZED_LEASES_RATE_BASE(2,CLASS_POS)
               VARIABLE(415) = RB_INCLUDE_DEFERRED_TAX_DR(2,CLASS_POS)
               VARIABLE(416) = RB_INCLUDE_DEFERRED_REVENUES(2,CLASS_POS)
               VARIABLE(417)=RB_EXCLUDED_PENSION_LIABILITY(2,CLASS_POS)
               VARIABLE(418) =
     +                      RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,CLASS_POS)
               VARIABLE(419) = RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS)
               VARIABLE(420) =
     +                      RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS)
C BASE YEAR OPERATING_ASSETS_YEAR_END
               OPERATING_ASSETS_YEAR_END(CLASS_POS) =
     +                        NET_UTILITY_PLANT(2,CLASS_POS) +
     +                        WCCUM(2,CLASS_POS) -
     +                        DEF_TAX_CR_BALANCE(2,CLASS_POS) +
     +                        BY_ADJUSTMENT_2_ECONOMIC_ASSETS(CLASS_POS)
               VARIABLE(261) = WCCUM(2,CLASS_POS)
               VARIABLE(262)=BY_ADJUSTMENT_2_ECONOMIC_ASSETS(CLASS_POS)
               VARIABLE(263) = OPERATING_ASSETS_YEAR_END(CLASS_POS)
C
               IF(CLASS_LEVEL >= 0) THEN
c moved to eliminate adding SUB to SUB 12/30/97
c                 CALL TALLY_RESULTS_INFO(VARS_2_PASS,
c    +                                  VARIABLE,
c    +                                  LEVEL_SUMATION(0,CLASS_LEVEL-1))
                  IF(CLASS_TYPE(CLASS_POS) == SBU .OR.
     +                    CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                     IF(.NOT. DONT_TALLY_THIS_CLASS)
     +                     CALL TALLY_RESULTS_INFO(VARS_2_PASS,
     +                                  VARIABLE,
     +                                  LEVEL_SUMATION(0,CLASS_LEVEL-1))
                     LEVEL_SUMATION(89,CLASS_LEVEL-1) = 0.  ! LIAB NEC
                     LEVEL_SUMATION(75,CLASS_LEVEL-1) = 0.  ! ASSET NEC
C                    NUC_FUEL_RATE_BASE_AT(CLASS_LEVEL-1) = 
C    +                            NUC_FUEL_RATE_BASE_AT(CLASS_LEVEL-1) +
C    +                                   NUC_FUEL_RATE_BASE(2,CLASS_POS)
C                    CWIP_IN_RATE_BASE_AT(CLASS_LEVEL-1) =
C    +                             CWIP_IN_RATE_BASE_AT(CLASS_LEVEL-1) +
C    +                                    CWIP_IN_RATE_BASE(2,CLASS_POS)
                     IF(.NOT. DONT_TALLY_THIS_CLASS)
     +                      CALL TALLY_RESULTS_INFO(VARS_2_PASS,
     +                                           VARIABLE,SBU_VARIABLES)
                     SBU_VARIABLES(89) = 0. ! LIAB NEC
                     SBU_VARIABLES(75) = 0. ! ASSET NEC
                  ELSEIF(CLASS_LEVEL >= 0) THEN
                     IF(CONSOLIDATING_CLASS(CLASS_POS)) THEN
                        IF(.NOT. DONT_TALLY_THIS_CLASS)
     +                         CALL SUB_CONSOLIDATING_ADJUSTMENTS(
     +                                     VARS_2_PASS,
     +                                     VARIABLE,SUBSIDARY_VARIABLES)
                     ELSE   
                     IF(.NOT. DONT_TALLY_THIS_CLASS)
     +                        CALL TALLY_RESULTS_INFO(VARS_2_PASS,
     +                                     VARIABLE,SUBSIDARY_VARIABLES)
                     ENDIF
                     IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                        CONSLD_YEAR_END_OP_ASSETS =
     +                              CONSLD_YEAR_END_OP_ASSETS +
     +                              OPERATING_ASSETS_YEAR_END(CLASS_POS)
                        TOTAL_SUB_COMMON_EQUITY = VARIABLE(77)
     +                                         + TOTAL_SUB_COMMON_EQUITY
                        TOTAL_SUB_RETAINED_EARNINGS = VARIABLE(78)
     +                                     + TOTAL_SUB_RETAINED_EARNINGS
                        TOTAL_SUB_OCI_EARNINGS = VARIABLE(730)
     +                                          + TOTAL_SUB_OCI_EARNINGS
                        TOTAL_SUB_INVESTMENT = VARIABLE(91)
     +                                         + TOTAL_SUB_INVESTMENT
                        IF(CLASS_LEVEL == 1) THEN
                           FIRST_LEVEL_SUB_COMMON_EQUITY = VARIABLE(77)+
     +                                     FIRST_LEVEL_SUB_COMMON_EQUITY
                           FIRST_LEVEL_SUB_EARNINGS =
     +                                          FIRST_LEVEL_SUB_EARNINGS
     +                                          + VARIABLE(78)  ! RETAINED BALANCE
     +                                          + VARIABLE(730) ! OCI BALANCE FE
                           FIRST_LEVEL_SUB_INVESTMENT = VARIABLE(91) +
     +                                        FIRST_LEVEL_SUB_INVESTMENT
                        ENDIF
                        IF(CLASS_LEVEL > 1) THEN
                           SUB_INVESTMENT_IN_SUBS(CLASS_LEVEL-1) =
     +                             SUB_INVESTMENT_IN_SUBS(CLASS_LEVEL-1)
     +                             + VARIABLE(77)
     +                             + VARIABLE(78)
     +                             + VARIABLE(730) ! OCI BALANCE ! FE
                           SUB_INVESTMENT_IN_SUBS(CLASS_LEVEL) = 0.
                        ENDIF
                     ENDIF
                     IF(CLASS_LEVEL > 1) THEN
                           SUB_INVESTMENT_IN_SUBS(CLASS_LEVEL) = 0.
                     ENDIF
                  ENDIF
               ENDIF
C            
               VARIABLE(61) = NOT_AVAIL ! RETURN_ON_RATEBASE
C
C BASE YEAR SHAREHOLDER VALUE
C
               CALL CLASS_SHAREHOLDER_VALUE_NA(VARIABLE)
               IF(ASSET_REPORTS_ACTIVE .AND. (PARENT_CLASS .OR.
     +                                    REPORT_CLASS(CLASS_POS))) THEN
                  VARIABLE(641) = VARIABLE(76)
     +                            - VARIABLE(90) ! ASSET_MINUS_LIABS
                  VARIABLE(642) = 0.
                  CLASS_PRIOR_INBALANCE(CLASS_POS) = VARIABLE(641)
C
                  IF(REPORT_ZEROS_4_CLASS(CLASS_POS) .AND.
     +                      ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > YR) THEN
                     VARIABLE = 0.
                  ENDIF
                  OUTPUT_CLASS_ID = CLASS - 1
                  WRITE(INCOME_UNIT,REC=BASE_OUTPUT_RECORD)
     +                                              PRT_ENDPOINT(),
     +                                              FLOAT(BASE_YEAR),
     +                                              ASSET_CLASS_NAME,
     +                                              VARIABLE
                  IF(FirstEnergy_Is_Active)
     +                  CALL FE_PCA_LEGAL_REPORTS(FLOAT(BASE_YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            BASE_OUTPUT_RECORD,
     +                                            VARIABLE)
                  BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
               ENDIF
               CALL MOVE_BALANCE_SHEET_ITEMS()
               IF(THIS_IS_REPORTING_CLASS .OR.
     +               (PARENT_CLASS .AND. REPORTING_CLASS_ID == -1)) THEN
                  CALL STORE_REPORTING_VALUES(VARIABLE)
                  THIS_IS_REPORTING_CLASS = .FALSE.
               ENDIF
               IF(PARENT_CLASS .AND. SUBS_ACTIVE) THEN
                  IF(NUM_OF_SUBSIDIARIES > 0) THEN
                     EXCLUDE_SUB_INVESTMENT = SUBSIDARY_VARIABLES(91)
     +                                 - UNMODELLED_SUBS_OWNED_BY_SUBS
     +                                 - UNMODELLED_SUBS_OWNED_BY_PARENT
c                    EXCLUDE_SUB_INVESTMENT = EXCLUDE_SUB_COMMON_EQUITY+
c    +                                    EXCLUDE_SUB_RETAINED_EARNINGS+
c    +                                    EXCLUDE_SUB_INVESTMENT
C                    VARIABLE(91) = VARIABLE(91)+SUBSIDARY_VARIABLES(91) 
                  ELSE
                     EXCLUDE_SUB_INVESTMENT =
     +                                 - UNMODELLED_SUBS_OWNED_BY_PARENT
                  ENDIF
                  VARIABLE = 0.
C
C  GET ELIMINATION INFORMATION FOR THE BASE YEAR.
C
                  CALL EXISTING_ASSET_BY_INFO(ELIMINAITON_CLASS_ID_NUM,
     +                               CLASS_GPV(2,0),
     +                               CLASS_CUMULATIVE_DEPRECIATION(2,0))
                  CALL DEBIT_BY_INFO(ELIMINAITON_CLASS_ID_NUM,
     +                               NET_DD_BALANCE(2,0),
     +                               DEFERRED_DEBITS_RATE_BASE(2,0),
     +                               UNAMORTIZED_INTEREST_BALANCE(2,0),
     +                               OTHER_DD_BALANCE(2,0),
     +                               GOODWILL(2,0),
     +                               CLASS_REGULATORY_ASSETS,
     +                               FASB_109,
     +                               FASB_133,
     +                               UNAMORTIZED_ISSUE_EXP_BALANCE(2,0))
                  CALL DEFERRED_CREDITS_BY_INFO(
     +                             ELIMINAITON_CLASS_ID_NUM,
     +                             DEFERRED_CREDITS_IN_RATE_BASE(2,0),
     +                             OTHER_DEFERRED_CREDITS_BAL(2,0),
     +                             REGULATORY_DEFERRED_CREDITS_BAL(2,0),
     +                             GAIN_ON_REAQUIRED_DEBT_BAL(2,0),
     +                             DEFERRED_GAIN_FROM_SALES(2,0))
                  CALL NUCLEAR_FUEL_BY_INFO(ELIMINAITON_CLASS_ID_NUM,
     +                                  CLASS_NET_NF_VALUE(2,0),
     +                                  NUC_FUEL_RATE_BASE(2,0),
     +                                  NFIS(2,0))
                  CALL FUTURE_ASSET_BY_INFO(ELIMINAITON_CLASS_ID_NUM,
     +                                           CLASS_CWIP(2,0),
     +                                           CWIP_IN_RATE_BASE(2,0))
                  CALL DEBT_BASE_YEAR_ELIM(ELIMINAITON_CLASS_ID_NUM,
     +                                     R_PREFERRED_STOCK_ISSUED,
     +                                     R_LONG_TERM_DEBT_ISSUED,
     +                                     R_INVESTMENT_IN_AFILLIATES,
     +                                     R_LOANS_TO_AFILLIATES,
     +                                     PS_PREM_BAL,
     +                                     LTD_PREM_BAL,
     +                                     PS_ISSUING_BAL,
     +                                     LTD_ISSUING_BAL,
     +                                     DEBT_FILE_INVESTMENTS(0),
     +                                     NOTES_RECEIVABLE(0),
     +                                     NOTES_PAYABLE(0))
                  DEBT_FILE_UNAMORT_ISS_EXP_BAL(0) = PS_ISSUING_BAL
     +                                               + LTD_ISSUING_BAL
                  NET_DD_BALANCE(2,0) = NET_DD_BALANCE(2,0)
     +                                + DEBT_FILE_UNAMORT_ISS_EXP_BAL(0)
c     +                                  + PS_ISSUING_BAL
c     +                                  + LTD_ISSUING_BAL
C                  OTHER_DD_BALANCE(2,0) = OTHER_DD_BALANCE(2,0)
C     +                                    + PS_ISSUING_BAL
C     +                                    + LTD_ISSUING_BAL
                  UNAMORT_DEBT_INTEREST_BAL =
     +                                     DEBT_FILE_UNAMORT_INTR_BAL(0)
                  UNAMORT_DEBIT_INTEREST_BAL = 
     +                                 UNAMORTIZED_INTEREST_BALANCE(2,0)
                  CLASS_UNAMORTIZED_ISSUE_EXP_BALANCE =
     +                                UNAMORTIZED_ISSUE_EXP_BALANCE(2,0)
                  UNAMORT_DEBT_ISS_EXPENSE_BAL =
     +                                  DEBT_FILE_UNAMORT_ISS_EXP_BAL(0)
                  CLASS_UNAMORTIZED_INTEREST_BAL =
     +                                       UNAMORT_DEBIT_INTEREST_BAL
     +                                       + UNAMORT_DEBT_INTEREST_BAL
c                  UNAMORTIZED_INTEREST_BALANCE(2,0) =
c     +                                 UNAMORTIZED_INTEREST_BALANCE(2,0)
c     +                                 + PS_ISSUING_BAL
c     +                                 + LTD_ISSUING_BAL
c                  CLASS_UNAMORTIZED_INTEREST_BAL =
c     +                                 UNAMORTIZED_INTEREST_BALANCE(2,0)
                  PLANT_IN_SERVICE_RATE_BASE(2,0) = CLASS_GPV(2,0) -
     +                                CLASS_CUMULATIVE_DEPRECIATION(2,0)
                  RATE_BASE(2,0) =
     +                         PLANT_IN_SERVICE_RATE_BASE(2,0) 
     +                         + DEFERRED_DEBITS_RATE_BASE(2,0)
     +                         - DEFERRED_CREDITS_IN_RATE_BASE(2,0)
     +                         + NUC_FUEL_RATE_BASE(2,0)
     +                         + CWIP_IN_RATE_BASE(2,0)
     +                         - NUC_DECOM_RATE_BASE(2,0) 
     +                         - CUM_DEF_TAX_RATEBASE(2,0)
     +                         - CUM_ITC_DEF_RATEBASE(2,0)
     +                         - CIAC_RATE_BASE(2,0) 
     +                         + ASSET_NEC_IN_RATE_BASE(2,0)
                  NET_UTILITY_PLANT(2,0) = CLASS_GPV(2,0)
     +                         + CLASS_CWIP(2,0)
     +                         - CLASS_CUMULATIVE_DEPRECIATION(2,0)
     +                         + CLASS_NET_NF_VALUE(2,0)
C
                  VARIABLE(63) = CLASS_GPV(2,0)  
C    +                                     + NUC_DECOM_FUND_LIABILITY(0)
                  VARIABLE(64) = CLASS_CWIP(2,0)
                  VARIABLE(65) = CLASS_GPV(2,0) + CLASS_CWIP(2,0)
C    +                           + NUC_DECOM_FUND_LIABILITY(0)      !PLANT
                  VARIABLE(66) = CLASS_CUMULATIVE_DEPRECIATION(2,0)
                  VARIABLE(67) = CLASS_NET_NF_VALUE(2,0)
                  VARIABLE(68) = NET_UTILITY_PLANT(2,0)
C    +                           + NUC_DECOM_FUND_LIABILITY(0)
                  OTHER_ASSETS(2,0) = OTHER_ASSETS(2,0)
     +                                + R_INVESTMENT_IN_AFILLIATES
     +                                + R_LOANS_TO_AFILLIATES
                  VARIABLE(69) = OTHER_ASSETS(2,0)
                  OTHER_COMPREHENSIVE_INCOME_BALANCE(0) =
     +                             OTHER_COMPREHENSIVE_INCOME_BALANCE(0)
     +                             + EXCLUDE_SUB_OCI_EARNINGS
                  INVESTMENT_IN_SUBSIDIARIES(2,0) = 
     +                           INVESTMENT_IN_SUBSIDIARIES(2,0)
     +                           + EXCLUDE_SUB_INVESTMENT
                  VARIABLE(91) = INVESTMENT_IN_SUBSIDIARIES(2,0)
                  VARIABLE(92) = CAPITIALZIED_LEASES(2,0)
                  VARIABLE(70) = NUC_DECOM_FUND_BAL(2,0)
                  VARIABLE(71) = NET_DD_BALANCE(2,0)
                  VARIABLE(466) = OTHER_DD_BALANCE(2,0)
                  VARIABLE(462) = GOODWILL(2,0)
                  VARIABLE(72) = CUM_DEF_REVENUES(2,0)
c                 CUMTXNORM(2,0) = CUMTXNORM(2,0) + ! removed 3/13/98
c    +                              EXCLUDE_SUB_TAX_DEFERRALS_DR
                  VARIABLE(73) = CUMTXNORM(2,0)
                  VARIABLE(74) = LIQUID_INVESTMENTS(2,0)
                  VARIABLE(286) = POST_RETIREMENT_MEDICAL_FUND(0)
                  VARIABLE(389) = ACCOUNTS_PAYABLE(0)
                  VARIABLE(289) = LONG_TERM_INVESTMENTS(0) +
     +                            DEBT_FILE_INVESTMENTS(0)
                  OPENING_CASH_BALANCES(0) = LIQUID_INVESTMENTS(2,0)
     +                                     + LONG_TERM_INVESTMENTS(0)
     +                                     + DEBT_FILE_INVESTMENTS(0)
                  VARIABLE(402) = NOTES_RECEIVABLE(0)
                  VARIABLE(75) = WCCUM(2,0) + LINEC(2,0)
                  VARIABLE(391) = FUEL_INVENTORY(0)
                  VARIABLE(469) = CLASS_MATERIALS_N_SUPPLIES(0)
                  VARIABLE(468) = CLASS_GAS_STORAGE(0)
                  VARIABLE(467) = CLASS_DEFERRED_PURCHASE_GAS(0)
c                 VARIABLE(392) = DEFERRED_FUEL_BALANCE(0)
                  CLASS_DEFERRED_FUEL_BALANCE = DEFERRED_FUEL_BALANCE(0) ! VARIABLE(392)
                  VARIABLE(410) = DEFERRED_PURCHASE_POWER(2,0)
                  VARIABLE(636) = FASB143_NET_ASSET_VALUE(2,0)
                  VARIABLE(76) = NET_UTILITY_PLANT(2,0)
C    +                         + NUC_DECOM_FUND_LIABILITY(0)
     +                         + OTHER_ASSETS(2,0)
     +                         + INVESTMENT_IN_SUBSIDIARIES(2,0)
     +                         + CAPITIALZIED_LEASES(2,0)
     +                         + NUC_DECOM_FUND_BAL(2,0)
     +                         + NET_DD_BALANCE(2,0)
     +                         + CLASS_DEFERRED_FUEL_BALANCE
     +                         + FUEL_INVENTORY(0)
     +                         + CUM_DEF_REVENUES(2,0)
     +                         + CUMTXNORM(2,0)
     +                         + NOTES_RECEIVABLE(0)
     +                         + LIQUID_INVESTMENTS(2,0)
     +                         + POST_RETIREMENT_MEDICAL_FUND(0)
     +                         + LONG_TERM_INVESTMENTS(0)
     +                         + DEBT_FILE_INVESTMENTS(0)
     +                         + DEFERRED_PURCHASE_POWER(2,0)
     +                         + ACCOUNTS_RECEIVABLE(0)
     +                         + WCCUM(2,0)
     +                         + LINEC(2,0)
     +                         + CLASS_MATERIALS_N_SUPPLIES(0)
     +                         + CLASS_GAS_STORAGE(0)
     +                         + CLASS_DEFERRED_PURCHASE_GAS(0)
     +                         + FASB143_NET_ASSET_VALUE(2,0)
C
                  COMMON_STOCK(2,0) = COMMON_STOCK(2,0)
     +                                + EXCLUDE_SUB_COMMON_EQUITY
                  REARNC(2,0) = REARNC(2,0)
     +                          + EXCLUDE_SUB_RETAINED_EARNINGS
C                 COMMON_STOCK(2,0) = COMMON_STOCK(2,0) + 
C    +                                SUBSIDARY_VARIABLES(77)
C                 REARNC(2,0) = REARNC(2,0) + SUBSIDARY_VARIABLES(78)
                  VARIABLE(77) = COMMON_STOCK(2,0)
                  VARIABLE(78) =  REARNC(2,0)
                  COMMON_EQUITY(2,0) = REARNC(2,0) + COMMON_STOCK(2,0)
                  VARIABLE(79) = COMMON_EQUITY(2,0)
                  PREFERRED_STOCK(2,0) = PREFERRED_STOCK(2,0)
     +                                   + SBU_PS_ELIM
     +                                   + R_PREFERRED_STOCK_ISSUED
     +                                   + PS_PREM_BAL ! - PS_ISSUING_BAL
                  VARIABLE(80) = PREFERRED_STOCK(2,0)
                  LONG_TERM_DEBT(2,0) = LONG_TERM_DEBT(2,0)
     +                                  + SBU_LTD_ELIM
     +                                  + R_LONG_TERM_DEBT_ISSUED
     +                                  + LTD_PREM_BAL ! - LTD_ISSUING_BAL
                  VARIABLE(81) = LONG_TERM_DEBT(2,0)
                  CLASS_OCI_BALANCE = 
     +                             OTHER_COMPREHENSIVE_INCOME_BALANCE(0)  ! 730
                  OTHER_COMPREHENSIVE_INCOME_BALANCE(0) =
     +                                                 CLASS_OCI_BALANCE   ! FE ! 730
                  TOTAL_EQUITY_WITH_OCI = CLASS_OCI_BALANCE ! 731
     +                                    + COMMON_EQUITY(2,0)
                  VARIABLE(82) = COMMON_EQUITY(2,0)  
     +                           + PREFERRED_STOCK(2,0)   ! NOTE THESE ARE
     +                           + LONG_TERM_DEBT(2,0)    ! 1 NOT 2 UNTIL DB ELIM EXISTS
     +                           + CLASS_OCI_BALANCE
                  VARIABLE(83) = OTHER_LT_LIABILITY(2,0)
                  VARIABLE(637) = FASB143_LT_LIABILITY_VALUE(2,0)
                  SHORT_TERM_DEBT(2,0)=SHORT_TERM_DEBT(2,0)+SBU_STD_ELIM
                  VARIABLE(403) = NOTES_PAYABLE(0)
                  VARIABLE(84) = SHORT_TERM_DEBT(2,0)
                  VARIABLE(85) = CUSTOMER_DEPOSITS_BAL(2,0)
                  VARIABLE(86) = CIAC_BALANCE(2,0)
                  VARIABLE(87) = DEF_TAX_CR_BALANCE(2,0)
                  VARIABLE(88) = DEF_ITC_BALANCE(2,0)
C
                  VARIABLE(287) = POST_RETIREMENT_MED_PAYABLE(0)
                  VARIABLE(288) = NUC_DECOM_FUND_LIABILITY(0)
                  VARIABLE(390) = ACCOUNTS_RECEIVABLE(0)
                  VARIABLE(411) = PENSION_LIABILITY(2,0)
                  VARIABLE(412) = DEFERRED_GAIN_FROM_SALES(2,0)
                  VARIABLE(413) = STORM_RESERVE_BALANCE(2,0)
                  VARIABLE(905) = ExecBenefitsBalance(2,0)
                  VARIABLE(906) = IncentiveCompBalance(2,0)
                  VARIABLE(414) = ACCRUED_VACATION_PAY_BALANCE(2,0)
                  VARIABLE(89) = LINEC(2,0)
                  VARIABLE(730) = OTHER_COMPREHENSIVE_INCOME_BALANCE(0)  ! 730
                  VARIABLE(712) = OTHER_DEFERRED_CREDITS_BAL(2,0)
                  VARIABLE(711) = REGULATORY_DEFERRED_CREDITS_BAL(2,0)
                  VARIABLE(710) = GAIN_ON_REAQUIRED_DEBT_BAL(2,0)
                  TOTAL_DEFERRED_CREDITS_BAL =
     +                      DEFERRED_GAIN_FROM_SALES(2,0)
     +                      + CIAC_BALANCE(2,0)
     +                      + DEF_TAX_CR_BALANCE(2,0)
     +                      + DEF_ITC_BALANCE(2,0)
     +                      + OTHER_DEFERRED_CREDITS_BAL(2,0)
     +                      + REGULATORY_DEFERRED_CREDITS_BAL(2,0)
     +                      + GAIN_ON_REAQUIRED_DEBT_BAL(2,0)
                  VARIABLE(90) = REARNC(2,0)
     +                           + COMMON_STOCK(2,0)
     +                           + PREFERRED_STOCK(2,0)
     +                           + LONG_TERM_DEBT(2,0)
     +                           + CLASS_OCI_BALANCE
     +                           + NOTES_PAYABLE(0)
     +                           + OTHER_LT_LIABILITY(2,0)
     +                           + FASB143_LT_LIABILITY_VALUE(2,0)
     +                           + SHORT_TERM_DEBT(2,0)
     +                           + CUSTOMER_DEPOSITS_BAL(2,0)
     +                           + POST_RETIREMENT_MED_PAYABLE(0)
     +                           + NUC_DECOM_FUND_LIABILITY(0)
     +                           + ACCOUNTS_PAYABLE(0)
     +                           + PENSION_LIABILITY(2,0)
     +                           + STORM_RESERVE_BALANCE(2,0)
     +                           + ExecBenefitsBalance(2,0)
     +                           + IncentiveCompBalance(2,0)
     +                           + ACCRUED_VACATION_PAY_BALANCE(2,0)
     +                           + TOTAL_DEFERRED_CREDITS_BAL 
     +                           + LINEC(2,0)
C
                  VARIABLE(62)  = RATE_BASE(2,0)
     +                            + CLASS_ADDENDUM_2_RATE_BASE(0)
                  VARIABLE(143) = PLANT_IN_SERVICE_RATE_BASE(2,0)
                  VARIABLE(144) = CUM_DEF_TAX_RATEBASE(2,0)
                  VARIABLE(145) = CLASS_ADDENDUM_2_RATE_BASE(0)
                  VARIABLE(146) = DEFERRED_DEBITS_RATE_BASE(2,0)
                  VARIABLE(147) = NUC_FUEL_RATE_BASE(2,0)
                  VARIABLE(369) = NUC_FUEL_RATE_BASE(2,0)
                  VARIABLE(254) = NF_IN_PROCESS(2,0)
                  VARIABLE(148) = CWIP_IN_RATE_BASE(2,0)
                  VARIABLE(370) = CWIP_IN_RATE_BASE(2,0)
                  VARIABLE(149) = CUM_ITC_DEF_RATEBASE(2,0)
                  VARIABLE(150) = NUC_DECOM_RATE_BASE(2,0)
                  VARIABLE(151) = CIAC_RATE_BASE(2,0)
                  VARIABLE(152) = ASSET_NEC_IN_RATE_BASE(2,0)
                  VARIABLE(153) = CAPITIALIZED_LEASES_RATE_BASE(2,0)
C
                  CALL INTRA_COMPANY_ADJUSTMENT(VARS_2_PASS,
     +                                     VARIABLE,SUBSIDARY_VARIABLES)
                  VARIABLE(61) = NOT_AVAIL ! RETURN_ON_RATEBASE
                  VARIABLE(299) = PARENT_AVERAGE_SHARES
                  VARIABLE(53) = PARENT_YEAR_END_SHARES
                  VARIABLE(742) = REARNC(2,0)
     +                           + COMMON_STOCK(2,0)
     +                           + PREFERRED_STOCK(2,0)
     +                           + VARIABLE(741) ! LONG_TERM_DEBT(2,0) WO CURRENT LTD
     +                           + CLASS_OCI_BALANCE
                  CONSOLIDING_ADJ_RETN_EARN_BAL = VARIABLE(78)
                  ASSET_CLASS_NAME = 'Consolidating Adjustments (-)'
                  IF(MONTHLY_MIDAS_ACTIVE)
     +                           CALL MONTHLY_BOY_ELIMINATIONS(VARIABLE)
                  IF(ASSET_REPORTS_ACTIVE) THEN
                     OUTPUT_CLASS_ID = -2
                     CALL CONSOLIDATING_ADJS_NA(VARIABLE)
                     VARIABLE(641) = VARIABLE(76)
     +                               - VARIABLE(90) ! ASSET_MINUS_LIABS
                     VARIABLE(642) = 0.
                     CONSOLIDATING_PRIOR_INBALANCE = VARIABLE(641)
C
                     WRITE(INCOME_UNIT,REC=BASE_OUTPUT_RECORD)
     +                                                 PRT_ENDPOINT(),
     +                                                 FLOAT(BASE_YEAR),
     +                                                 ASSET_CLASS_NAME,
     +                                                 VARIABLE
                     IF(FirstEnergy_Is_Active)
     +                     CALL FE_PCA_LEGAL_REPORTS(FLOAT(BASE_YEAR),
     +                                               ASSET_CLASS_NAME,
     +                                               BASE_OUTPUT_RECORD,
     +                                               VARIABLE)
                     BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
                  ENDIF
C MOVED ABOVE     BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
C                 ASSET_CLASS_NAME =
C    +                    'Consolidated '//trim(CLASS_NAME(CLASS_POS))
                  ASSET_CLASS_NAME =
     +                        trim(PARENT_CLASS_NAME)//' Consolidated'
                  SUBSIDARY_VARIABLES(61) = NOT_AVAIL ! RETURN_ON_RATEBASE
                  CALL CLASS_SHAREHOLDER_VALUE_NA(VARIABLE)
                  CONSOLID_RETAINED_EARNINGS_BAL=SUBSIDARY_VARIABLES(78)
                  CONSOLID_OCI_EARNINGS_BAL=SUBSIDARY_VARIABLES(730)
                  CONSOLD_COMMON_EQUITY_BAL = SUBSIDARY_VARIABLES(731)
                  CONSOLD_BOY_DEFERRED_TAXES_DR=SUBSIDARY_VARIABLES(73)
                  CONSOLD_BOY_NET_DEFERRED_DEBITS =
     +                                           SUBSIDARY_VARIABLES(71)
                  CONSOLD_BOY_CWIP = SUBSIDARY_VARIABLES(64)
                  CONSOLD_BOY_OTHER_ASSETS = SUBSIDARY_VARIABLES(69)
                  CONSOLD_BOY_DEFERRED_TAXES_CR=SUBSIDARY_VARIABLES(87)
                  CONSOLD_BOY_CURRENT_ASSETS = SUBSIDARY_VARIABLES(75)
                  CONSOLD_BOY_OTHER_LT_LIABS =  SUBSIDARY_VARIABLES(83)
                  CONSOLD_BOY_ACCOUNTS_PAYABLE =SUBSIDARY_VARIABLES(389)
                  CONSOLD_BOY_ACCOUNTS_RECIABLE=SUBSIDARY_VARIABLES(390)
                  CONSOLD_BOY_RETAINED_EARNINGS=SUBSIDARY_VARIABLES(78)
                  CONSOLD_BOY_SUB_INVESTMENT = 0. ! SUBSIDARY_VARIABLES(7) DON'T KNOW WHAT THIS IS ABOUT
                  CONSOLIDATED_BOY_FUNDS_BALANCE=SUBSIDARY_VARIABLES(74)
                  CONSOLIDATED_LTD_BALANCE_WO_CURRENT_LTD =
     +                                          SUBSIDARY_VARIABLES(741)
                  CONSOLIDATED_LTD_BALANCE = SUBSIDARY_VARIABLES(81)
                  SUBSIDARY_VARIABLES(742) = SUBSIDARY_VARIABLES(731)
     +                                       + SUBSIDARY_VARIABLES(80)
     +                                       + SUBSIDARY_VARIABLES(741) ! LONG_TERM_DEBT(2,0) WO CURRENT LTD
                  IF(ASSET_REPORTS_ACTIVE) THEN
                     OUTPUT_CLASS_ID = -1
                     SUBSIDARY_VARIABLES(641) = SUBSIDARY_VARIABLES(76)
     +                                          -SUBSIDARY_VARIABLES(90)
                     SUBSIDARY_VARIABLES(642) = 0.
                     CONSOLIDATED_PRIOR_INBALANCE =
     +                                          SUBSIDARY_VARIABLES(641)
                     SUBSIDARY_VARIABLES(441) = OUTPUT_CLASS_ID
                     WRITE(INCOME_UNIT,REC=BASE_OUTPUT_RECORD)
     +                                               PRT_ENDPOINT(),
     +                                               FLOAT(BASE_YEAR),
     +                                               ASSET_CLASS_NAME,
     +                                               SUBSIDARY_VARIABLES
                     IF(FirstEnergy_Is_Active)
     +                    CALL FE_PCA_LEGAL_REPORTS(FLOAT(BASE_YEAR),
     +                                              ASSET_CLASS_NAME,
     +                                              BASE_OUTPUT_RECORD,
     +                                              SUBSIDARY_VARIABLES)
                     BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
                  ENDIF
                  IF(REPORTING_CLASS_ID == -2) THEN
                     CALL STORE_REPORTING_VALUES(SUBSIDARY_VARIABLES)
                     THIS_IS_REPORTING_CLASS = .FALSE.
                  ENDIF
C MOVED ABOVE     BASE_OUTPUT_RECORD = BASE_OUTPUT_RECORD - 1
                  EXIT
               ENDIF
            ENDDO 
         ENDIF
         SHARE_LEAD = 0.
         CS_DECLARATION_MONTH(1) = 3
         CS_DECLARATION_MONTH(2) = 6
         CS_DECLARATION_MONTH(3) = 9
         CS_DECLARATION_MONTH(4) = 12
         IF(MONTHLY_MIDAS_ACTIVE) THEN 
            CALL M3_ALLOCATE_ARRAYS(MAX_LINKED_LEVEL,
     +                              NUMBER_OF_REPORTING_CLASSES,
     +                              MAX_CLASS_NUM,
     +                              NUM_OF_ACTIVE_CLASSES,
     +                              MASTER_CLASS_LIST,
     +                              PARENT_CASH_CS_DIVIDEND_PAYMENT,
     +                              OPENING_CASH_BALANCES,
     +                              CS_DECLARATION_MONTH,
     +                              SHARE_LEAD,
     +                              PARENT_CLASS_ID_NUM)
            CALL INIT_PRODUCTION_CASH_LAG()
         ENDIF
C        CALL STORE_REPORTING_VALUES(SUBSIDARY_VARIABLES) ! forces consolidated into output
         DEALLOCATE(NUC_FUEL_RATE_BASE_AT,
     +              CWIP_IN_RATE_BASE_AT,
     +              OPENING_CASH_BALANCES)
         MODEL_ISSUED_DEBT_REPORT = DEBT_REPORT(REPORT_ALL_ACCOUNTS)
         CALL FLUSH(23487)
      RETURN
C***********************************************************************
      ENTRY ASSET_CLASS_ANALYSIS(R_YEAR,WRITE_THE_RESULTS)
C***********************************************************************
C
!      
! 3/24/98. GAT PER MARK.      
!
         YR = R_YEAR
         ASSET_YR = YR + 1
         IF(yr+base_year == 2016) then
            yr = yr
         endif
         LAST_CLASS_LEVEL = -999
         VARS_2_PASS = VARIABLE_NUMBER-INT2(1)
         CALL MG_LOCATE_WRITE(18,70,'Asset Classes',3,2)
         IF(AMEREN_IS_ACTIVE .OR. PACIFICORP_IS_ACTIVE) THEN
C SPECIAL CODE FOR AMEREN 1/23/02
            LEVEL_MARKET_REVENUES = 0.
            LEVEL_FUEL_EXPENSE = 0.
            LEVEL_VARIABLE_EXPENSE = 0.
            TOTAL_AMEREN_MARKET_REVENUES = 0.
            TOTAL_AMEREN_FUEL_EXPENSE = 0.
            TOTAL_AMEREN_VARIABLE_EXPENSE = 0.
            DO CLASS_COUNTER = DEFINED_CLASSES,1,-1
C
               CLASS = DEFINED_CLASS_POINTER_LIST(CLASS_COUNTER)
               CLASS_LEVEL = CLASS_AT_LEVEL(CLASS_COUNTER)
               CLASS_POS = MASTER_CLASS_LIST(CLASS)
               IF(CLASS > 0 .AND. MASTER_CLASS_LIST(CLASS) == 0) CYCLE
               IF(YR >= YEAR_CLASS_DEACTIVATED(CLASS_POS) .AND.
     +                      YEAR_CLASS_DEACTIVATED(CLASS_POS) > 0) cycle
               IF(LAST_CLASS_LEVEL /= CLASS_LEVEL) THEN
                  TOTAL_AMEREN_MARKET_REVENUES = LEVEL_MARKET_REVENUES
     +                                    + TOTAL_AMEREN_MARKET_REVENUES
                  TOTAL_AMEREN_FUEL_EXPENSE = LEVEL_FUEL_EXPENSE
     +                                       + TOTAL_AMEREN_FUEL_EXPENSE
                  TOTAL_AMEREN_VARIABLE_EXPENSE = LEVEL_VARIABLE_EXPENSE
     +                                   + TOTAL_AMEREN_VARIABLE_EXPENSE
                  LEVEL_MARKET_REVENUES = 0.
                  LEVEL_FUEL_EXPENSE = 0.
                  LEVEL_VARIABLE_EXPENSE = 0.
               ENDIF
               DONT_TALLY_THIS_CLASS =
     +                ACTIVATE_CLASS_IN_YEAR(CLASS_POS) >= YR .AND.
     +                             ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > 0
               IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                  VOID_INT2 = RETURN_AMEREN_CL_CLASS_EXPENSES(CLASS,
     +                                           CL_MARKET_REVENUES, ! SECONDARY_SALES_REVENUES,
     +                                           WHOLESALE_FUEL_EXPENSE,
     +                                           WHOLESALE_VOM_EXPENSE)
                  
                  CALL READ_CLASS_RUN_SWITCHES(CLASS,YR,
     +                                            CLASS_TYPE(CLASS_POS))
                  LEVEL_MARKET_REVENUES = CL_MARKET_REVENUES
     +                                    + LEVEL_MARKET_REVENUES
                  IF(.NOT. USE_BUDGET_FUEL_PURCHASE)
     +                       LEVEL_FUEL_EXPENSE = WHOLESALE_FUEL_EXPENSE
     +                                            + LEVEL_FUEL_EXPENSE
                  IF(.NOT.USE_BUDGET_VARIABLE_OM)
     +                 LEVEL_VARIABLE_EXPENSE = WHOLESALE_VOM_EXPENSE
     +                                          + LEVEL_VARIABLE_EXPENSE
               ENDIF
               LAST_CLASS_LEVEL = CLASS_LEVEL
            ENDDO
C END AMEREN CODE
         ENDIF
         CALL SETUP_TRANSACT_TRANSFERS(YR,TOTAL_AMEREN_MARKET_REVENUES, ! USED BY AMEREN 12/03/01 MSG
     +                                 TOTAL_AMEREN_FUEL_EXPENSE,
     +                                 TOTAL_AMEREN_VARIABLE_EXPENSE)
         ACCURAL_ACCOUNTING_ACTIVE = MONTHLY_MIDAS_ACTIVE
         APS_ACTIVE = APS_DQE()
         IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
            CALL RETURN_PARENT_CS_CARRY_OVER(
     +                                  PARENT_CASH_CS_DIVIDEND_PAYMENT)
            IF(YEAR > 1) CALL SET_MONTHLY_PAYABLES(YR)
            VOID_REAL = MONTHLY_NON_INCOME_TAX_PROCS(MAX_LINKED_LEVEL)
            
            MAX_ITER = 25
         ELSE
            PARENT_CASH_CS_DIVIDEND_PAYMENT = 0.
            MAX_ITER = 25
         ENDIF
         ASSET_REPORTS_ACTIVE = WRITE_THE_RESULTS .AND.
     +                          ASSET_CLASS_REPORTS()
         IF(ASSET_REPORTS_ACTIVE .AND.
     +                 .NOT. REPORT_HEADER_ACTIVE) THEN
            INCOME_UNIT = ASSET_CLASS_INCOME_HEADER(START_RECORD,
     +                                               VARIABLE_NUMBER)
            REPORT_HEADER_ACTIVE = .TRUE.
         ENDIF
         IOU_UTILITY = UTILITY_TYPE() == 'I'
         IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
            CALL M3_SET_OUTPUT_RECORD()
         ENDIF
         IF(ASSET_REPORTS_ACTIVE) THEN
            IF(YR == 1) THEN
               IF(SUBS_ACTIVE_FOR_REPORTING) THEN
                  IF(PARENT_HAS_LINKED_SUBS .AND.
     +                                      PARENT_HAS_LINKED_SBUS) THEN
                     OUTPUT_RECORD = START_RECORD +
     +                         INT(2*(NUMBER_OF_REPORTING_CLASSES+3)+1)
                  ELSEIF(PARENT_HAS_LINKED_SUBS .OR.
     +                                      PARENT_HAS_LINKED_SBUS) THEN
                     OUTPUT_RECORD = START_RECORD +
     +                         INT(2*(NUMBER_OF_REPORTING_CLASSES+2)+1)
                  ELSE
                     OUTPUT_RECORD = START_RECORD +
     +                         INT(2*(NUMBER_OF_REPORTING_CLASSES+1)+1)
                  ENDIF
               ELSE   
                  OUTPUT_RECORD = START_RECORD + 1
               ENDIF
            ELSE
               IF(SUBS_ACTIVE_FOR_REPORTING) THEN
                  IF(PARENT_HAS_LINKED_SUBS .AND.
     +                                      PARENT_HAS_LINKED_SBUS) THEN
                     OUTPUT_RECORD = START_RECORD +
     +                               INT(NUMBER_OF_REPORTING_CLASSES+3)
                  ELSEIF(PARENT_HAS_LINKED_SUBS .OR.
     +                                      PARENT_HAS_LINKED_SBUS) THEN
                     OUTPUT_RECORD = START_RECORD +
     +                               INT(NUMBER_OF_REPORTING_CLASSES+2)
                  ELSE
                     OUTPUT_RECORD = START_RECORD +
     +                               INT(NUMBER_OF_REPORTING_CLASSES+1)
                  ENDIF
               ELSE   
                  OUTPUT_RECORD = START_RECORD
               ENDIF
            ENDIF
            START_RECORD = OUTPUT_RECORD + 1
         ENDIF
C
         IF(SUBS_ACTIVE_FOR_REPORTING) THEN
            REPORTING_CLASS_ID = REPORTING_ASSET_CLASS()
         ELSE  
            REPORTING_CLASS_ID = -1 !IF ONLY ONE CLASS THE PARENT GETS OUTPUTTED
         ENDIF
C
         CLASS_BORROWED_AFUDC_RATE = AFUDC_BORROWED_RATE()
         CALL RETURN_FED_TAX_RATES(YR,FEDERAL_TAX_RATE) 
         FEDERAL_TAX_RATE=STORE_FEDERAL_TAX_RATE(FEDERAL_TAX_RATE)/100.
C        FEDERAL_TAX_RATE = FEDERAL_INCOME_TAX_RATE(YR)/100.
         FED_TAX_CREDIT_PASSED_UP = 0.
         SEC_29_CREDITS_PASSED_UP = 0.
         SEC_42_CREDITS_PASSED_UP = 0.
         CONSOLD_AVAIL_FED_TAX_CREDIT = 0.
         CONSOLID_FED_SEC_29_TAX_CREDITS = 0.
         CONSOLID_FED_SEC_42_TAX_CREDITS = 0.
         EXCLUDE_TAX_DEFERRALS_DR = 0.
         EXCLUDE_STATE_NOL_TAX_DEF_DR = 0.
         EXCLUDE_FED_NOL_TAX_DEF_DR = 0.
         EXCLUDE_TAX_DEFERRALS_CR = 0.
         EXCLUDE_ITC = 0.
         EXCLUDE_BTL_TAXES = 0.
         EXCLUDE_SUB_INCOME = 0.
         EXCLUDE_SUB_COMMON_EQUITY = 0.
         EXCLUDE_SUB_RETAINED_EARNINGS = 0.
         EXCLUDE_SUB_OCI_EARNINGS = 0.
         TOTAL_SUB_COMMON_EQUITY = 0.
         TOTAL_SUB_RETAINED_EARNINGS = 0.
         TOTAL_SUB_OCI_EARNINGS = 0.
         TOTAL_SUB_INVESTMENT = 0.
C         
         EXCLUDE_COMMON_DIVIDENDS = 0.
         EXCLUDE_STATE_TAXES = 0.
         EXCLUDE_FED_TAXES = 0.
         FEDERAL_TAX_EXCLUSION_ADJ = 0.
         SUB_TAXABLE_INCOME = 0.
         SUB_FED_TAX_PAYMENTS_2_PARENT= 0.
         SUB_FED_TAX_LIABILITY = 0.
         SUB_STATE_TAX_LIABILITY = 0.
         SUB_STATE_TAX_PAYMENTS_2_PARENT = 0.
         SUB_TOTAL_BTL_FEDERAL_TAXES = 0.
         SUB_TOTAL_ATL_FEDERAL_TAXES = 0.
         SUB_TOTAL_BTL_INTRA_FED_TAXES = 0.
         SUB_TOTAL_BTL_INTRA_STATE_TAXES = 0.
         SUB_FEDERAL_TAXABLE_INCOME =  0.
         CONSOLIDATED_LOCAL_TAX_ADJ = 0.
         CONSOLIDATED_STATE_TAX_ADJ = 0.
         CONSOLIDATED_FED_TAX_ADJ = 0.
         CONSOLIDATED_FEDERAL_TAXES = 0.
         INTRA_TAXES_PAYABLE = 0.
         SUB_NON_INCOME_TAX_ACCRUALS = 0.
         SBU_LTD_ELIM = 0.
         SBU_STD_ELIM = 0.
         SBU_PS_ELIM = 0.
         SBU_UNAMORTIZED_INTEREST_BAL = 0.
         SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL = 0.
         VOID_LOGICAL = ZERO_TOTAL_EMIS_VARS()
         PARENT_LEVEL_CS_ACQUISIONS = 0.
         PARENT_LEVEL_RE_ACQUISIONS = 0.
         BAL_SHEET_RE_SUB_ADJ = 0. ! This is used to move balance sheet adjs to parent & consolidated
         SUB_COMMON_BUYBACK_CS_ADJ = 0.
         SUB_COMMON_BUYBACK_RE_ADJ = 0.
         TOTAL_CAP_LEASES_BAL_ADJ = 0.
         SEPARATE_ELIMINATIONS = .FALSE. 
         VARIABLE = 0.
         SBU_VARIABLES = 0.
         SUBSIDARY_VARIABLES = 0.
         CLASS_REVENUES = 0.
         LEVEL_SUMATION = 0.
C
         BALANCE_SHEET_ROLLUPS = 0.
         ODEC_NA3_PURCHASE_EXPENSE = 0.
         ODEC_NA3_TIER_RETURN = 0.
         ODEC_NA3_ACTIVE = .FALSE.
C
         IF(WVPA()) THEN
            VOID_LOGICAL = WVPA_RATES_TRACKER_OBJECT()
            VOID_LOGICAL = WVPA_PROCESS_RATE_STRUCTURES(YR)
            CALL CALCULATE_WVPA_COOP_REVENUES(YR,CLASS_REVENUES)
            VOID_LOGICAL = WVPA_RATE_TRACKER_REPORT(END_POINT,
     +                                              BASE_YEAR+YEAR)
         ELSE
            CALL CALCULATE_CLASS_SALES_REVENUES(YR,CLASS_REVENUES,
     +                                            INTRA_COMPANY_REVENUE)
         ENDIF
         PA_CONTRACT_ACITVE = .FALSE.
         IF(CPL_IS_ACTIVE) THEN
            CALL CPL_DEFERRED_FUEL_ACCOUNTING(YR)
            CALL CPL_MON_SALE_AND_GEN_REPORT(YR) ! 2/14/99. GAT.
            CALL GET_PA_SWITCH(PA_CONTRACT_ACITVE)
         ENDIF
C
C MODIFICATION OF WHAT GETS PASSED TO SUBs FROM SUBs
C
         ALLOCATE(SUB_TOTAL_SUB_INCOME(-1:DEFINED_CLASSES))
         ALLOCATE(SUB_SBU_ACE_TAX_DEPRECIATION(-1:DEFINED_CLASSES))
         ALLOCATE(SUB_SBU_TAX_PRE_DEPRECIATION(-1:DEFINED_CLASSES))
         ALLOCATE(SBU_RETIREE_MEDICAL_PAYMENTS(-1:DEFINED_CLASSES))
         ALLOCATE(SBU_CASH_OTH_ASSET(-1:DEFINED_CLASSES))
         ALLOCATE(SBU_DSM_CAPITIAL(-1:DEFINED_CLASSES))
         ALLOCATE(SBU_BTL_LEASE_PAYMENTS(-1:DEFINED_CLASSES))
         ALLOCATE(SBU_ATL_LEASE_PAYMENTS(-1:DEFINED_CLASSES))
         ALLOCATE(SBU_CHANGE_DECOMMISSIONING_LIAB(-1:DEFINED_CLASSES))
         SUB_TOTAL_SUB_INCOME = 0.
         SUB_SBU_ACE_TAX_DEPRECIATION = 0.
         SUB_SBU_TAX_PRE_DEPRECIATION = 0.
         SBU_RETIREE_MEDICAL_PAYMENTS = 0.
         SBU_CASH_OTH_ASSET = 0.
         SBU_DSM_CAPITIAL = 0.
         SBU_BTL_LEASE_PAYMENTS = 0.
         SBU_ATL_LEASE_PAYMENTS = 0.
         SBU_CHANGE_DECOMMISSIONING_LIAB = 0.
C
C NON-INCOME TAX EXCLUSION VARIABLES
C
         ALLOCATE(PROPERTY_VALUE_GPV_WITH_CWIP(0:MAX_LINKED_LEVEL))
         ALLOCATE(PROPERTY_VALUE_GPV_NO_CWIP(0:MAX_LINKED_LEVEL))
         ALLOCATE(PROPERTY_VALUE_NPV_WITH_CWIP(0:MAX_LINKED_LEVEL))
         ALLOCATE(PROPERTY_VALUE_NPV_NO_CWIP(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_SBU_PROPERTY_TAX(0:MAX_LINKED_LEVEL))
         ALLOCATE(SUB_EARNINGS_2_COMMON(0:MAX_LINKED_LEVEL))
         ALLOCATE(SUB_DIVIDEND_PAYMENTS_2_PARENT(0:MAX_LINKED_LEVEL))
         ALLOCATE(SUB_EQUITY_NEEDS_FROM_PARENT(0:MAX_LINKED_LEVEL))
         ALLOCATE(PARENT_ACQUISITION_OF_SUB_COST(0:MAX_LINKED_LEVEL))
         ALLOCATE(PARENT_ACQUISITION_GOODWILL(0:MAX_LINKED_LEVEL))
         ALLOCATE(SUB_EARNINGS_2_EXCLUDE(0:MAX_LINKED_LEVEL))
         ALLOCATE(NUC_FUEL_RATE_BASE_AT(0:MAX_LINKED_LEVEL))
         ALLOCATE(CWIP_IN_RATE_BASE_AT(0:MAX_LINKED_LEVEL))
         ALLOCATE(SBU_DEFERRED_DEBIT_RATEBASE(0:MAX_LINKED_LEVEL))
         ALLOCATE(SBU_DEFERRED_CREDIT_RATEBASE(0:MAX_LINKED_LEVEL))
         ALLOCATE(SBU_CLASS_OTH_LIAB_SALE_ASSETS(0:MAX_LINKED_LEVEL))
         ALLOCATE(SBU_ATL_TAX_EXPENSE(0:MAX_LINKED_LEVEL))
         ALLOCATE(SBU_BTL_TAX_EXPENSE(0:MAX_LINKED_LEVEL))
c
         PROPERTY_VALUE_GPV_WITH_CWIP = 0.
         PROPERTY_VALUE_GPV_NO_CWIP = 0.
         PROPERTY_VALUE_NPV_WITH_CWIP = 0.
         PROPERTY_VALUE_NPV_NO_CWIP = 0.
         EXCLUDED_SBU_PROPERTY_TAX = 0.
         SUB_EARNINGS_2_COMMON = 0.
         SUB_EQUITY_NEEDS_FROM_PARENT = 0.
         PARENT_ACQUISITION_OF_SUB_COST = 0.
         PARENT_ACQUISITION_GOODWILL = 0.
         SUB_EARNINGS_2_EXCLUDE = 0.
         SUB_DIVIDEND_PAYMENTS_2_PARENT = 0.
         NUC_FUEL_RATE_BASE_AT = 0.
         CWIP_IN_RATE_BASE_AT = 0.
         SBU_DEFERRED_DEBIT_RATEBASE = 0.
         SBU_DEFERRED_CREDIT_RATEBASE = 0.
         SBU_CLASS_OTH_LIAB_SALE_ASSETS = 0.
         SBU_ATL_TAX_EXPENSE = 0.
         SBU_BTL_TAX_EXPENSE = 0.
C
         ALLOCATE(EXCLUDED_REVENUE_TAX_BASIS(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_REVENUE_TAX_BASIS_A(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_REVENUE_TAX_BASIS_B(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_REVENUE_TAX(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_OTHER_TAXES_REV(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_OTHER_TAXES_EXP(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDED_OTHER_TAXES(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDE_CAPITAL_TAXES_STATE(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDE_CAPITAL_TAXES_FED(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDE_CAPITAL_TAX_FED_BASIS(0:MAX_LINKED_LEVEL))
         ALLOCATE(EXCLUDE_CAPITAL_TAX_STATE_BASIS(0:MAX_LINKED_LEVEL))
C
         EXCLUDED_REVENUE_TAX_BASIS = 0.
         EXCLUDED_REVENUE_TAX_BASIS_A = 0.
         EXCLUDED_REVENUE_TAX_BASIS_B = 0.
         EXCLUDED_REVENUE_TAX = 0.
         EXCLUDED_OTHER_TAXES_REV = 0.
         EXCLUDED_OTHER_TAXES_EXP = 0.
         EXCLUDED_OTHER_TAXES = 0.
         EXCLUDE_CAPITAL_TAXES_STATE = 0.
         EXCLUDE_CAPITAL_TAXES_FED = 0.
         EXCLUDE_CAPITAL_TAX_FED_BASIS = 0.
         EXCLUDE_CAPITAL_TAX_STATE_BASIS = 0.
         LAST_CLASS_LEVEL = -999
C
C ITEMS FROM INIT FILE AND THE PARAMETER FILE
C
         LAST_GROUP_WAS_A_SUBSIDARY = .TRUE.
         WE_ARE_CONSOLIDATING = .FALSE.
         CALL STORE_REPORTING_VALUES(VARIABLE)
         DO CLASS_COUNTER = DEFINED_CLASSES,1,-1
C
            INVESTMENT_IN_AFILLIATES = 0.
            LOANS_TO_AFILLIATES = 0.
            PROVINCIAL_CAPITAL_TAX = 0.
            FEDERAL_CAPITAL_TAX = 0.
            PROVINCIAL_CAPITAL_TAX_RATE = 0.
            FEDERAL_CAPITAL_TAX_RATE = 0.
            PROVINCIAL_CAP_TAX_DEDUCTION = 0.
            FEDERAL_CAPITAL_TAX_DEDUCTION = 0.
            PROVINCIAL_CAP_TAX_ADDENDUM = 0.
            FEDERAL_CAPITAL_TAX_ADDENDUM = 0.
            ADJ_2_LOCAL_TAXES = 0.
            DEFERRED_TAXES_DR = 0.
            DEF_TAX_RATEBASE = 0.
            KEPCO_WC_DEF_MAINT_ENRG_AMORT = 0.
            KEPCO_WC_CURENT_MAINT_ENRG_COST = 0.
            ITC_AMORTIZATION = 0.
            STATE_TAX_ON_CAPITAL = 0.
            FEDERAL_TAX_ON_CAPITAL = 0.
            ITCUSED = 0.
            FEDERAL_TAXES = 0.
            IF(LAST_CLASS_LEVEL == 1) THEN          
               SUB_EARNINGS_2_COMMON(1:) = 0.
               SUB_EQUITY_NEEDS_FROM_PARENT(1:) = 0.
               PARENT_ACQUISITION_OF_SUB_COST(1:) = 0.
               PARENT_ACQUISITION_GOODWILL(1:) = 0.
               SUB_EARNINGS_2_EXCLUDE(1:) = 0.
               SUB_DIVIDEND_PAYMENTS_2_PARENT(1:) = 0.
               SUB_TOTAL_SUB_INCOME(1:) = 0.
C               DO I = 1, MAX_LINKED_LEVEL
C                  SUB_EARNINGS_2_COMMON(I) = 0.
C                  SUB_EQUITY_NEEDS_FROM_PARENT(I) = 0.
C                  PARENT_ACQUISITION_OF_SUB_COST(I) = 0.
C                  PARENT_ACQUISITION_GOODWILL(I) = 0.
C                  SUB_EARNINGS_2_EXCLUDE(I) = 0.
C                  SUB_DIVIDEND_PAYMENTS_2_PARENT(I) = 0.
C                  SUB_TOTAL_SUB_INCOME(I) = 0.
C                  SUB_INVESTMENT_IN_SUBS(I) = 0.
C               ENDDO
c              SUB_SBU_ACE_TAX_DEPRECIATION(1:) = 0.
c              SUB_SBU_TAX_PRE_DEPRECIATION(1:) = 0.
            ENDIF
            CLASS = DEFINED_CLASS_POINTER_LIST(CLASS_COUNTER)            
            CLASS_LEVEL = CLASS_AT_LEVEL(CLASS_COUNTER)
            PARENT_CLASS = CLASS == PARENT_CLASS_ID_NUM
            IF(PARENT_CLASS) THEN
               PARENT_CLASS = CLASS == PARENT_CLASS_ID_NUM
               IF(BASE_YEAR+YEAR == 2024) THEN
                  PARENT_CLASS = CLASS == PARENT_CLASS_ID_NUM
               ENDIF               
            ENDIF
            CLASS_POS = MASTER_CLASS_LIST(CLASS)
            SUBSIDIARY_CLASS = CLASS_TYPE(CLASS_POS) == SUBSIDIARY
            THIS_IS_REPORTING_CLASS = CLASS == REPORTING_CLASS_ID
            IF(LAHEY_LF95()) THEN
               IF(trim(CLASS_NAME(CLASS_POS)) /= ' ')THEN
                  WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
                  ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))
     +                                                   //STR_CLASS_NUM                  
               ELSE
                  WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
                  ASSET_CLASS_NAME = 'Class '//STR_CLASS_NUM
               ENDIF
               WRITE(STR_CLASS_NUM,'(I2)') CLASS_LEVEL
               IF(CLASS_TYPE(CLASS_POS) == SBU) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (SBU)'//
     +                                                     STR_CLASS_NUM
               ELSEIF(SUBSIDIARY_CLASS) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Sub)'//
     +                                                     STR_CLASS_NUM
               ELSEIF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Reg)'//
     +                                                     STR_CLASS_NUM
               ENDIF
               CALL MG_LOCATE_WRITE(8,26,
     +                          trim(ASSET_CLASS_NAME),ALL_VERSIONS,0)
            ELSE
               WRITE(SCREEN_MESSAGES,'(I4)') class-1
               IF(ASSET_ANALYST_ONLY()) THEN
                  CALL MG_LOCATE_WRITE(8,26,
     +                           trim(SCREEN_MESSAGES),ALL_VERSIONS,0)
               ELSE
                  CALL MG_LOCATE_WRITE(12,26,
     +                           trim(SCREEN_MESSAGES),ALL_VERSIONS,0)
               ENDIF
            ENDIF
            if(class == class_check + 1) then
               CLASS_POS = MASTER_CLASS_LIST(CLASS)
            endif
C
            DONT_TALLY_THIS_CLASS =
     +                ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > YR .AND.
     +                             ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > 0
            NEW_SUB_RETAINED_EARNINGS = 0.
            NEW_SUB_COMMON_STOCK = 0.
            IF(ACTIVATE_CLASS_IN_YEAR(CLASS_POS) == YR .AND.
     +             ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > 0 .AND.
     +                                            SUBSIDIARY_CLASS) THEN
C    +                                   .AND. .NOT. CPL_IS_ACTIVE) THEN
               NEW_SUB_RETAINED_EARNINGS = REARNC(2,CLASS_POS)
               NEW_SUB_COMMON_STOCK = COMMON_STOCK(2,CLASS_POS)
c              LEVEL_SUMATION(126,CLASS_LEVEL-1) = NEW_SUB_INVESTMENT +
c    +                                 LEVEL_SUMATION(126,CLASS_LEVEL-1)
               PARENT_ACQUISITION_OF_SUB_COST(CLASS_LEVEL-1) =
     +                     PARENT_ACQUISITION_OF_SUB_COST(CLASS_LEVEL-1)
     +                     + REARNC(2,CLASS_POS)
     +                     + COMMON_STOCK(2,CLASS_POS)
               NEW_SUB_ACQUISITION_GOODWILL =
     +                             ACQUISITION_PREMIUM(CLASS_POS)/100. *
     +                                     (REARNC(2,CLASS_POS)
     +                                      + COMMON_STOCK(2,CLASS_POS))
               PARENT_ACQUISITION_GOODWILL(CLASS_LEVEL-1) =
     +                        PARENT_ACQUISITION_GOODWILL(CLASS_LEVEL-1)
     +                        + NEW_SUB_ACQUISITION_GOODWILL
C              SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL-1) =
C    +                     SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL-1) +
C    +                     NEW_SUB_INVESTMENT
               IF(CLASS_LEVEL-1 == 0) THEN
                  PARENT_LEVEL_CS_ACQUISIONS=PARENT_LEVEL_CS_ACQUISIONS+
     +                                       NEW_SUB_COMMON_STOCK
                  PARENT_LEVEL_RE_ACQUISIONS=PARENT_LEVEL_RE_ACQUISIONS+
     +                                       NEW_SUB_RETAINED_EARNINGS
               ENDIF
            ENDIF
C
            IF(YR >= YEAR_CLASS_DEACTIVATED(CLASS_POS) .AND.
     +                       YEAR_CLASS_DEACTIVATED(CLASS_POS) > 0) THEN
               IF(.NOT. (MONTHLY_MIDAS_ACTIVE .AND.
     +                    YR == YEAR_CLASS_DEACTIVATED(CLASS_POS))) THEN
               IF(trim(CLASS_NAME(CLASS_POS)) /= ' ')THEN
                  WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
                  ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))
     +                                                   //STR_CLASS_NUM                  
               ELSE
                  WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
                  ASSET_CLASS_NAME = 'Class '//STR_CLASS_NUM
               ENDIF
               WRITE(STR_CLASS_NUM,'(I2)') CLASS_LEVEL
               IF(CLASS_TYPE(CLASS_POS) == SBU) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (SBU)'//
     +                                                     STR_CLASS_NUM
               ELSEIF(SUBSIDIARY_CLASS) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Sub)'//
     +                                                     STR_CLASS_NUM
               ELSEIF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Reg)'//
     +                                                     STR_CLASS_NUM
               ENDIF
               IF(ASSET_REPORTS_ACTIVE .AND.
     +                                     REPORT_CLASS(CLASS_POS)) THEN
                  VARIABLE = 0.
                  OUTPUT_CLASS_ID = CLASS - 1
                  CALL MG_LOCATE_WRITE(8,15,ASSET_CLASS_NAME,3,4)
                  WRITE(INCOME_UNIT,REC=OUTPUT_RECORD)
     +                                            PRT_ENDPOINT(),
     +                                            FLOAT(BASE_YEAR+YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            VARIABLE
                 IF(FirstEnergy_Is_Active)
     +                  CALL FE_PCA_LEGAL_REPORTS(FLOAT(BASE_YEAR+YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            OUTPUT_RECORD,
     +                                            VARIABLE)
                  IF(base_year+year >= 2011 .and. .false.) THEN
                     write(37673,1021) output_record,
     +                                 ASSET_CLASS_NAME,
     +                                 VARIABLE
                  ENDIF
                  OUTPUT_RECORD = OUTPUT_RECORD - 1
                  IF(MONTHLY_MIDAS_ACTIVE) THEN
                     IF(YR > YEAR_CLASS_DEACTIVATED(CLASS_POS) .AND.
     +                       YEAR_CLASS_DEACTIVATED(CLASS_POS) > 0) THEN
                        CALL MONTHLY_ZERO_ALL_OUTPUT(YEAR,
     +                                               ASSET_CLASS_NAME,
     +                                               OUTPUT_CLASS_ID)
                     ENDIF
                  ENDIF
               ENDIF
               CYCLE
               ENDIF
            ENDIF
C
            IF(SUBSIDIARY_CLASS) THEN
               BASE_RATES_REVENUES = 0.
            ENDIF
            BASE_RATES_REVENUES = 0.
            MARKET_BASE_REVENUES = 0.
            CLASS_FORECAST_REVENUES = 0.
            CLASS_BASE_REVENUE = 0.
            CLASS_BTL_EXPENSES = 0.
            CLASS_BTL_REVENUES = 0.
            SERVICE_TRANSACTION_EXPENSE = 0.
            TAX_PREFERENCE_DEPRECIATION = 0.
            BTL_LEASE_AMORTIZATION = 0.
            ATL_LEASE_AMORTIZATION = 0.
            ATL_LEASE_INTEREST = 0.
            BTL_LEASE_INTEREST = 0.
            SALVAGE_TRANSACTIONS = 0.
            RETIREMENT_MEDICAL_PAYMENTS = 0.
            OTHER_INCOME_NET_OF_TAX = 0.
C              
            IF(DUKE_IS_ACTIVE) THEN
               DOE_FEES_IN_NUC_FUEL_COST = .TRUE.
               CATAWBA_ADJUSTMENT = 70.
               CATAWBA_ADJUSTMENT = JOINT_OWNERS_COSTS()
               CATAWBA_BURN_ADJUSTMENT = CATAWBA_ADJUSTMENT
            ELSE   
               DOE_FEES_IN_NUC_FUEL_COST = .FALSE.
               CATAWBA_ADJUSTMENT = 0.
               CATAWBA_BURN_ADJUSTMENT = 0.
            ENDIF
C
            IF(PARENT_CLASS .AND. SUBS_ACTIVE) THEN
               CALL SET_SUBSIDARY_TOTALS_NA(SBU_VARIABLES)
               CALL CAL_SUMMED_VALUES(SBU_VARIABLES)
               FED_TAXABLE_INCOME_AFTER_NOLS = SBU_VARIABLES(136)
               IF(FED_TAXABLE_INCOME_AFTER_NOLS > 0.) THEN
                  SBU_VARIABLES(213) = 100.* SBU_VARIABLES(340)/
     +                                     FED_TAXABLE_INCOME_AFTER_NOLS
               ELSE
                  SBU_VARIABLES(213) = FEDERAL_TAX_RATE*100.
               ENDIF
               STATE_TAXABLE_INCOME_AFTER_NOLS = SBU_VARIABLES(132)
               IF(STATE_TAXABLE_INCOME_AFTER_NOLS /= 0.) THEN
                  SBU_VARIABLES(141) =
c    +                       100.*(SBU_VARIABLES(134) +
c    +                                              SBU_VARIABLES(212))/ 
     +                             100.*SBU_VARIABLES(345)/
     +                                   STATE_TAXABLE_INCOME_AFTER_NOLS
               ELSE
                  SBU_VARIABLES(141) = STATE_TAX_RATE
               ENDIF
               IF(ASSET_REPORTS_ACTIVE .AND.
     +                                      PARENT_HAS_LINKED_SBUS) THEN
                  ASSET_CLASS_NAME = 'SBU Totals'
                  CALL PASS_PARENT_2_SBU_TOTALS(VARS_2_PASS,
     +                                    LEVEL_SUMATION(0,CLASS_LEVEL),
     +                                    SBU_VARIABLES)
                  CLASS_UNAMORTIZED_INTEREST_BAL =   ! RESET 
     +                                      UNAMORT_DEBT_INTEREST_BAL
     +                                      + UNAMORT_DEBIT_INTEREST_BAL
                  CALL CLASS_SUB_TOTALS_VALUE_NA(SBU_VARIABLES)
                  CALL CLASS_SHAREHOLDER_VALUE_NA(SBU_VARIABLES)
                  IF(FirstEnergy_Is_Active) THEN
                     CALL FIRST_ENERGY_PandL_REPORT(INT2(-10000),
     +                                           SBU_VARIABLES,
     +                                           CL_ANN_CLASS_ENERGY,
     +                                           ZERO, ! EXP_FUEL_EXPENSE,
     +                                           ZERO, ! EXP_PURCHASE_POWER_EXPENSE
     +                                           ZERO, ! EXP_FILE_VARIABLE_EXPENSE
     +                                           ZERO) !EXP_FILE_FIXED_EXPENSE
                  ENDIF
                  CALL GRE_DSC_REPORT(SBU_VARIABLES)
                  CALL EBITDA_REPORT(SBU_VARIABLES)
                  CALL SUB_SEC_RATIOS(SBU_VARIABLES)
C
                  OUTPUT_CLASS_ID = -10000.
                  SBU_VARIABLES(441) = OUTPUT_CLASS_ID
                  SBU_VARIABLES(641) = SBU_VARIABLES(76)
     +                                 - SBU_VARIABLES(90) ! ASSET_MINUS_LIABS
                  SBU_VARIABLES(642) = SBU_VARIABLES(641)
     +                                 - TOTAL_SBU_PRIOR_INBALANCE
                  TOTAL_SBU_PRIOR_INBALANCE = SBU_VARIABLES(641)
                  SBU_VARIABLES(29) = SBU_VARIABLES(681)
     +                                + SBU_VARIABLES(682)
     +                                + SBU_VARIABLES(733)
                  SBU_VARIABLES(742) = SBU_VARIABLES(731)
     +                                 + SBU_VARIABLES(80)
     +                                 + SBU_VARIABLES(741) ! LONG_TERM_DEBT(2,0) WO CURRENT LTD
c                  IF(SALT_RIVER_PROJECT()) THEN
c                     SBU_VARIABLES(117) = SBU_VARIABLES(117)   ! NUCL_DECOM_FUND
c     +                                    + SBU_VARIABLES(235) ! NET_OF_TAX_NUCL_FUND_RETURN
c                  ENDIF
                  CALL MG_LOCATE_WRITE(8,15,ASSET_CLASS_NAME,3,4)
                  WRITE(INCOME_UNIT,REC=OUTPUT_RECORD)
     +                                            PRT_ENDPOINT(),
     +                                            FLOAT(BASE_YEAR+YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            SBU_VARIABLES
                  IF(FirstEnergy_Is_Active)
     +                  CALL FE_PCA_LEGAL_REPORTS(FLOAT(BASE_YEAR+YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            OUTPUT_RECORD,
     +                                            SBU_VARIABLES)
                  IF(base_year+year >= 2011 .and. .false.) THEN
                     write(37673,1021) output_record,
     +                                 ASSET_CLASS_NAME,
     +                                 SBU_VARIABLES
                  ENDIF
                  OUTPUT_RECORD = OUTPUT_RECORD - 1
               ENDIF
               SUBSIDARY_VARIABLES(77) = TOTAL_SUB_COMMON_EQUITY
               SUBSIDARY_VARIABLES(78) = TOTAL_SUB_RETAINED_EARNINGS
               SUBSIDARY_VARIABLES(730) = TOTAL_SUB_OCI_EARNINGS
               SUBSIDARY_VARIABLES(91) = TOTAL_SUB_INVESTMENT
               EXCLUDE_SUB_COMMON_EQUITY = SUBSIDARY_VARIABLES(77)
               EXCLUDE_SUB_RETAINED_EARNINGS = SUBSIDARY_VARIABLES(78)
               EXCLUDE_SUB_OCI_EARNINGS = 0. ! SUBSIDARY_VARIABLES(730) 7/7/04
               EXCLUDE_SUB_TAX_DEFERRALS_DR = SUBSIDARY_VARIABLES(73)
               SUB_COLUMN_TOTAL_SUB_INCOME = SUBSIDARY_VARIABLES(43)
               SUB_COLUMN_TOTAL_SUB_DIVIDEND = SUBSIDARY_VARIABLES(107)
c               SUBSIDARY_VARIABLES(43) = 0. ! Subsidiary Income
               SUBSIDARY_VARIABLES(45) =  SUBSIDARY_VARIABLES(42) + ! Net Income
     +                                    SUBSIDARY_VARIABLES(43) - ! Subsidiary Income
     +                                    SUBSIDARY_VARIABLES(44)   ! extraordinary expenses
               SUBSIDARY_VARIABLES(47) =  SUBSIDARY_VARIABLES(45) - ! Earnings available to common
     +                                    SUBSIDARY_VARIABLES(361) !(46)
               SUBSIDARY_VARIABLES(48) =  EXCLUDE_COMMON_DIVIDENDS  
               SUBSIDARY_VARIABLES(49) =  SUBSIDARY_VARIABLES(47) - ! Retained Earnings
     +                                    SUBSIDARY_VARIABLES(48)
C               
C              SUBSIDARY_VARIABLES(77) = EXCLUDE_SUB_COMMON_EQUITY
C              SUBSIDARY_VARIABLES(78)=EXCLUDE_SUB_RETAINED_EARNINGS
C              SUBSIDARY_VARIABLES(79)=EXCLUDE_SUB_RETAINED_EARNINGS+
C    +                                 EXCLUDE_SUB_COMMON_EQUITY
               SUBSIDARY_VARIABLES(79) = SUBSIDARY_VARIABLES(77)
     +                                   + SUBSIDARY_VARIABLES(78)
     +                                   + SUBSIDARY_VARIABLES(730)
               SUBSIDARY_VARIABLES(731) = SUBSIDARY_VARIABLES(77)
     +                                   + SUBSIDARY_VARIABLES(78)
     +                                   + SUBSIDARY_VARIABLES(730)
               SUBSIDARY_VARIABLES(82) = SUBSIDARY_VARIABLES(79)
     +                                   + SUBSIDARY_VARIABLES(80)
     +                                   + SUBSIDARY_VARIABLES(81)
               SUBSIDARY_VARIABLES(713) = SUBSIDARY_VARIABLES(412)
     +                                   + SUBSIDARY_VARIABLES(86)
     +                                   + SUBSIDARY_VARIABLES(87)
     +                                   + SUBSIDARY_VARIABLES(88)
     +                                   + SUBSIDARY_VARIABLES(710)
     +                                   + SUBSIDARY_VARIABLES(711)
     +                                   + SUBSIDARY_VARIABLES(712)
               SUBSIDARY_VARIABLES(90) = SUBSIDARY_VARIABLES(82)
     +                                   + SUBSIDARY_VARIABLES(83)
     +                                   + SUBSIDARY_VARIABLES(84)
     +                                   + SUBSIDARY_VARIABLES(85)
     +                                   + SUBSIDARY_VARIABLES(89)
     +                                   + SUBSIDARY_VARIABLES(287)
     +                                   + SUBSIDARY_VARIABLES(288)
     +                                   + SUBSIDARY_VARIABLES(389)
     +                                   + SUBSIDARY_VARIABLES(403)
     +                                   + SUBSIDARY_VARIABLES(411)
     +                                   + SUBSIDARY_VARIABLES(413)
     +                                   + SUBSIDARY_VARIABLES(414)
     +                                   + SUBSIDARY_VARIABLES(637)
     +                                   + SUBSIDARY_VARIABLES(713)
     +                                   + SUBSIDARY_VARIABLES(905)
     +                                   + SUBSIDARY_VARIABLES(906)
c               SUBSIDARY_VARIABLES(107) = 0. ! 3/13/98
               CALL CAL_SUMMED_VALUES(SUBSIDARY_VARIABLES)
               CALL SET_SUBSIDARY_TOTALS_NA(SUBSIDARY_VARIABLES)
               FED_TAXABLE_INCOME_AFTER_NOLS = SUBSIDARY_VARIABLES(136)
               IF(FED_TAXABLE_INCOME_AFTER_NOLS > 0.) THEN
                  SUBSIDARY_VARIABLES(213) =
     +                                   100.* SUBSIDARY_VARIABLES(340)/
     +                                     FED_TAXABLE_INCOME_AFTER_NOLS
               ELSE
                  SUBSIDARY_VARIABLES(213) = FEDERAL_TAX_RATE*100.
               ENDIF
               STATE_TAXABLE_INCOME_AFTER_NOLS=SUBSIDARY_VARIABLES(132)
               IF(STATE_TAXABLE_INCOME_AFTER_NOLS /= 0.) THEN
                  SUBSIDARY_VARIABLES(141) =
c    +                                  100.*(SUBSIDARY_VARIABLES(134) +
c    +                                        SUBSIDARY_VARIABLES(212))/ 
     +                             100.*SUBSIDARY_VARIABLES(345)/
     +                                   STATE_TAXABLE_INCOME_AFTER_NOLS
               ELSE
                  SUBSIDARY_VARIABLES(141) = STATE_TAX_RATE
               ENDIF
               IF(ASSET_REPORTS_ACTIVE .AND.
     +                                      PARENT_HAS_LINKED_SUBS) THEN
                  ASSET_CLASS_NAME = 'Subsidiary Totals'
C
                  CALL GRE_DSC_REPORT(SUBSIDARY_VARIABLES)
                  CALL EBITDA_REPORT(SUBSIDARY_VARIABLES)
                  CALL SUB_SEC_RATIOS(SUBSIDARY_VARIABLES)
                  IF(FirstEnergy_Is_Active) THEN
                     CALL FIRST_ENERGY_PandL_REPORT(INT2(-11000),
     +                                              SUBSIDARY_VARIABLES,
     +                                              CL_ANN_CLASS_ENERGY,
     +                                              ZERO, ! EXP_FUEL_EXPENSE,
     +                                              ZERO, ! EXP_PURCHASE_POWER_EXPENSE
     +                                              ZERO, ! EXP_FILE_VARIABLE_EXPENSE
     +                                              ZERO) !EXP_FILE_FIXED_EXPENSE
                  ENDIF
                  CALL CLASS_SUB_TOTALS_VALUE_NA(SUBSIDARY_VARIABLES)
                  CALL CLASS_SHAREHOLDER_VALUE_NA(SUBSIDARY_VARIABLES)
                  OUTPUT_CLASS_ID = -11000
                  SUBSIDARY_VARIABLES(441) = OUTPUT_CLASS_ID
                  SUBSIDARY_VARIABLES(641) = SUBSIDARY_VARIABLES(76)
     +                                       - SUBSIDARY_VARIABLES(90) ! ASSET_MINUS_LIABS
                  SUBSIDARY_VARIABLES(642) = SUBSIDARY_VARIABLES(641)
     +                                       - TOTAL_SUB_PRIOR_INBALANCE
                  TOTAL_SUB_PRIOR_INBALANCE = SUBSIDARY_VARIABLES(641)
                  SUBSIDARY_VARIABLES(29) = SUBSIDARY_VARIABLES(681)
     +                                      + SUBSIDARY_VARIABLES(682)
     +                                      + SUBSIDARY_VARIABLES(733)
                  SUBSIDARY_VARIABLES(742) = SUBSIDARY_VARIABLES(731)
     +                                       + SUBSIDARY_VARIABLES(80)
     +                                       + SUBSIDARY_VARIABLES(741) ! LONG_TERM_DEBT(2,0) WO CURRENT LTD
c                  IF(SALT_RIVER_PROJECT()) THEN
c                     SUBSIDARY_VARIABLES(117) = SUBSIDARY_VARIABLES(117)   ! NUCL_DECOM_FUND
c     +                                        + SUBSIDARY_VARIABLES(235) ! NET_OF_TAX_NUCL_FUND_RETURN
c                  ENDIF
                  CALL MG_LOCATE_WRITE(8,15,ASSET_CLASS_NAME,3,4)
                  WRITE(INCOME_UNIT,REC=OUTPUT_RECORD)
     +                                            PRT_ENDPOINT(),
     +                                            FLOAT(BASE_YEAR+YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            SUBSIDARY_VARIABLES
                  IF(FirstEnergy_Is_Active)
     +                  CALL FE_PCA_LEGAL_REPORTS(FLOAT(BASE_YEAR+YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            OUTPUT_RECORD,
     +                                            SUBSIDARY_VARIABLES)
                  IF(base_year+year >= 2011 .and. .false.) THEN
                     write(37673,1021) output_record,
     +                                 ASSET_CLASS_NAME,
     +                                 SUBSIDARY_VARIABLES
                  ENDIF
                  OUTPUT_RECORD = OUTPUT_RECORD - 1
               ENDIF
               IF(REPORTING_CLASS_ID == -3) THEN
                  CALL STORE_REPORTING_VALUES(SUBSIDARY_VARIABLES)
                  THIS_IS_REPORTING_CLASS = .FALSE.
               ENDIF
               IF(REPORTING_CLASS_ID == -4) THEN
                  CALL STORE_REPORTING_VALUES(SBU_VARIABLES)
                  THIS_IS_REPORTING_CLASS = .FALSE.
               ENDIF
            ENDIF
            IF(CLASS > 0 .AND. MASTER_CLASS_LIST(CLASS) == 0) CYCLE
C
C EXCHANGE AND ZERO VARIABLES
            IF(LAST_GROUP_WAS_A_SUBSIDARY) THEN  ! RESET THE SBU ELIMINATIONS
               SBU_VARIABLES = 0.
               SBU_EXCLUDE_FED_TAXES = 0.
               SBU_ATL_EXCLUDE_FED_TAXES = 0.
               SBU_LTD_ELIM = 0.
               SBU_STD_ELIM = 0.
               SBU_PS_ELIM = 0.
               SBU_UNAMORTIZED_INTEREST_BAL = 0.
               SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL = 0.
C
            ENDIF
            LAST_GROUP_WAS_A_SUBSIDARY = SUBSIDIARY_CLASS ! CLASS_TYPE(CLASS_POS) /= SBU ! PARENT OR SUB
C    +                    .AND. CLASS_TYPE(CLASS_POS) /= REGULATED_GROUP ! PARENT OR SUB
            BOOK_DEPRECIATION = 0.
            INCOME_TAX_DEPRECIATION = 0.
            EXP_BOOK_DEPRECIATION = 0.
            ADJUSTMENT_2_DEFERRED_TAXES_BAL = 0. 
            ADJUSTMENT_2_DEFERRED_ITCS_BAL = 0.
            EXTRA_ORDINARY_EXPENSE = 0.
            GAS_STORAGE_BOY = CLASS_GAS_STORAGE(CLASS_POS)
            MATERIALS_SUPPLIES_BOY=CLASS_MATERIALS_N_SUPPLIES(CLASS_POS)
            FUEL_INVENTORY_BOY = FUEL_INVENTORY(CLASS_POS)
            CALL TRANSFER_ZERO_ASSETS(CLASS_POS)
            VARIABLE = 0.
            DIVIDEND_PER_SHARE = 0.
            LT_LIAB_BAL_ADJ = 0.
            CASH_TO_POST_RETIRE_MEDICAL_BAL = 0.
            CASH_TO_ACCRD_MBR_REVENUES_BAL = 0.
            CAPACITY_SALES_TO_LEVEL_RM = 0.    ! 726
            CAPACITY_PURCHASES_TO_LEVEL_RM = 0.  ! 725
            CUST_CAP_PURCHASES_TO_LEVEL_RM = 0.
            CWIP_BALANCE_ADJ = 0.
            OPREV_IN_ACCTS_RECEIVABLE = 0.
            ADDEN_ACCOUNTS_RECEIVABLE = 0.
            EXP_IN_ACCTS_PAYABLE = 0.
            ADDEN_ACCOUNTS_PAYABLE = 0.
            RATE_BASE_CASH_ADJ = 0.
C
            CALL READ_CLASS_RUN_SWITCHES(CLASS,YR,CLASS_TYPE(CLASS_POS))
            CALL READ_CLASS_PARAMETERS(CLASS,YR,CLASS_TYPE(CLASS_POS),
     +                                 COVERAGE_RATIO,
     +                                 RETIREMENT_MEDICAL_PAYMENTS,
     +                                 SALVAGE_TRANSACTIONS,
     +                                 CLASS_OTH_LIAB_SALE_ASSETS,
     +                                 NET_DEFERRED_DEBIT_ADJUSTMENT,
     +                                 RATE_BASE_CASH_ADJ,
     +                                 ADJUSTMENT_2_DEFERRED_TAXES_BAL,
     +                                 ADJUSTMENT_2_DEFERRED_ITCS_BAL,
     +                                 NET_NUCLEAR_FUEL_ADJ(CLASS_POS),
     +                                 RETAINED_EARNINGS_ADJ,
     +                                 EXTRA_ORDINARY_EXPENSE,
     +                                 LT_LIAB_BAL_ADJ,
     +                                 CWIP_BALANCE_ADJ,
     +                                 CASH_ADDITIONS_2_FUEL_INVENTORY,
     +                                 QRT_DIVIDEND_PER_SHARE,
     +                                 ADJ_DEFERRED_TAX_DR_BALANCE,
     +                                 PAID_IN_CAPITAL,
     +                                 SUBSIDIARY_INVESTMENT_ADJ,
     +                                 GOODWILL_ADJUSTMENT,
     +                                 REG_ASSESTS_ADJUSTMENT,
     +                                 FASB109_ADJUSTMENT,
     +                                 FASB133_ADJUSTMENT,
     +                                 UNAMORT_INTEREST_ADJUSTMENT,  ! added to here
     +                                 NUCLEAR_DECOM_FUND_BAL_ADJ,
     +                                 CAP_LEASES_BAL_ADJ,
     +                                 ASSETS_NEC_BAL_ADJ,
     +                                 PREFERRED_STOCK_BAL_ADJ,
     +                                 LTD_BAL_ADJ,
     +                                 STD_BAL_ADJ,
     +                                 NUC_DECOM_LIAB_BAL_ADJ,
     +                                 LIABS_NEC_BAL_ADJ,
     +                                 OTHER_INVESTMENT_BAL_ADJ,
     +                                 NOTES_RECEIVABLE_BAL_ADJ,
     +                                 POST_RETIRE_MEDICAL_BAL_ADJ,
     +                                 DEFERRED_REVENUES_BAL_ADJ,
     +                                 DEFERRED_FUEL_BAL_ADJ,
     +                                 DEFERRED_PURCH_GAS_BAL_ADJ,
     +                                 LT_INVEST_BAL_ADJ,
     +                                 ST_INVEST_BAL_ADJ,
     +                                 FUEL_INVENTORY_BAL_ADJ,
     +                                 GAS_IN_STORAGE_BAL_ADJ,
     +                                 MATRIAL_SUPPLY_BAL_ADJ,
     +                                 ACCOUNTS_RECV_BAL_ADJ,
     +                                 UNBILLED_REV_BAL_ADJ,
     +                                 TAXES_RECEIVABLE_BAL_ADJ,
     +                                 CURRENT_LT_DEBT_BAL_ADJ,
     +                                 NOTES_PAYABLE_BAL_ADJ,
     +                                 CUSTOMER_DEPOSIT_BAL_ADJ,
     +                                 CICA_BAL_ADJ,
     +                                 POST_RETIRE_PAYABLE_BAL_ADJ,
     +                                 ACCRUED_PENSION_BAL_ADJ,
     +                                 DEFERRED_GAINS_BAL_ADJ,
     +                                 storm_RESERVE_BAL_ADJ,
     +                                 ACCOUNTS_PAYABLE_BAL_ADJ,
     +                                 ARO_NET_ASSETS_BAL_ADJ,
     +                                 ARO_LIABILITY_BAL_ADJ,
     +                                 OPREV_IN_ACCTS_RECEIVABLE,
     +                                 ADDEN_ACCOUNTS_RECEIVABLE,
     +                                 EXP_IN_ACCTS_PAYABLE,
     +                                 ADDEN_ACCOUNTS_PAYABLE,
     +                                 DEFERRED_PURCHASE_POWER_ADJ,
     +                                 CASH_ADDS_2_MATRIALS_INVENTORY,
     +                                 CASH_ADDS_2_GAS_INVENTORY,
     +                                 EXPENSING_FUEL_INVENTORY,
     +                                 EXPENSING_MATRIALS_INVENTORY,
     +                                 EXPENSING_GAS_INVENTORY,
     +                                 COI_EARNINGS_ADJ)
C
            CALL RETURN_LEVEL_SALES_PURCHASES(CLASS,
     +                                   CAPACITY_SALES_TO_LEVEL_RM,    ! 726
     +                                   CAPACITY_PURCHASES_TO_LEVEL_RM,  ! 725
     +                                   ADD_2_INCOME_STATEMENT)
            CALL RETURN_CASH_TRANSFERS(CLASS,YR,CASH_TO_CASH,
     +                              CASH_TO_POST_RETIRE_MEDICAL_BAL,
     +                              CASH_TO_ACCRD_MBR_REVENUES_BAL)
            CALL RETURN_GRE_DSC_ADJUSTMENTS(YR,
     +                                GRE_INTEREST_PAYMENTS_MANUAL_ADJS,
     +                                GRE_PRINCIPAL_MANUAL_ADJS)
C
            STD_MINIMUM_BAL = STDMIN
C
C ADD-IN OF MONTHLY CAPITAL RATES
C
            CALL CLASS_CAPITAL_RATES()
C
            CUM_REG_ASSET_ADJ_AT(CLASS_POS) = REG_ASSESTS_ADJUSTMENT
     +                                 + CUM_REG_ASSET_ADJ_AT(CLASS_POS)
            CUM_FASB133_ADJ_AT(CLASS_POS) = FASB133_ADJUSTMENT
     +                                   + CUM_FASB133_ADJ_AT(CLASS_POS)
            CUM_FASB109_ADJ_AT(CLASS_POS) = FASB109_ADJUSTMENT
     +                                   + CUM_FASB109_ADJ_AT(CLASS_POS)
            CUM_DD_UNAMORT_INTR_ADJ_AT(CLASS_POS) = 
     +                             CUM_DD_UNAMORT_INTR_ADJ_AT(CLASS_POS)
     +                             + UNAMORT_INTEREST_ADJUSTMENT
            CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT(CLASS_POS) =
     +                        CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT(CLASS_POS)
C                             + A NOT ADDED AJUSTMENT
C
C
C One level retained earnings adjustment flow to parent
C
           IF(SUBSIDIARY_CLASS .OR. PARENT_CLASS) BAL_SHEET_RE_SUB_ADJ = 
     +                      BAL_SHEET_RE_SUB_ADJ + RETAINED_EARNINGS_ADJ
            CALL RETURN_SBU_PASS_THROUGH_VALUES(EXCLUDE_SBU_REVENUE_TAX,
     +                                     EXCLUDE_SBU_OTHER_TAXES,
     +                                     EXCLUDE_SBU_PROPERTY_TAX,
     +                                     EXCLUDE_SBU_STATE_INCOME_TAX,
     +                                     EXCLUDE_SBU_CAPITAL_TAX)
            IF(YR == 1) THEN
C
C SBU USING ANUALIZED LTD AND PS AS A % COST VS $M
C
               IF(LTDINT(0,CLASS_POS) < 0.) THEN
                  WEIGHTED_CLASS_LTD_COST(CLASS_POS) =
     +                                     ABS(LTDINT(0,CLASS_POS))/100.
                  LTDINT(0,CLASS_POS) =
     +                             WEIGHTED_CLASS_LTD_COST(CLASS_POS) *
     +                                       LONG_TERM_DEBT(2,CLASS_POS)
               ELSE
                  IF(LONG_TERM_DEBT(2,CLASS_POS) /= 0. .AND.
     +                                  LTDINT(0,CLASS_POS) > .001) THEN
                     WEIGHTED_CLASS_LTD_COST(CLASS_POS) =
     +                                           LTDINT(0,CLASS_POS)/
     +                                       LONG_TERM_DEBT(2,CLASS_POS)
                  ELSE
                     WEIGHTED_CLASS_LTD_COST(CLASS_POS) = LTDRTE
                  ENDIF      
               ENDIF
               IF(PSDIV(0,CLASS_POS) < 0.) THEN
                  WEIGHTED_CLASS_PS_COST(CLASS_POS) =
     +                                      ABS(PSDIV(0,CLASS_POS))/100.
                  PSDIV(0,CLASS_POS) =
     +                               WEIGHTED_CLASS_PS_COST(CLASS_POS) *
     +                                      PREFERRED_STOCK(2,CLASS_POS)
               ELSE
                  IF(PREFERRED_STOCK(2,CLASS_POS) /= 0. .AND.
     +                                   PSDIV(0,CLASS_POS) > .001) THEN
                     WEIGHTED_CLASS_PS_COST(CLASS_POS) =
     +                                           PSDIV(0,CLASS_POS)/
     +                                      PREFERRED_STOCK(2,CLASS_POS)
                  ELSE
                     WEIGHTED_CLASS_PS_COST(CLASS_POS) = PSRATE
                  ENDIF      
               ENDIF
C
               ANNINT(0,CLASS_POS) = LTDINT(0,CLASS_POS) +
     +                                                PSDIV(0,CLASS_POS)
               ANN_PS_DIV(0,CLASS_POS) = PSDIV(0,CLASS_POS)
               ANN_LTD_INT(0,CLASS_POS) = LTDINT(0,CLASS_POS)
C
C GAURD AGAINST BAD BASE YEAR STOCK PRICE
C
               IF(STOCK_PRICE_YEAR_END(1,CLASS_POS) < -999.) THEN
                  STOCK_PRICE_YEAR_END(1,CLASS_POS) = MARKET_2_BOOK * 
     +                                     BOOK_VALUE_STOCK(1,CLASS_POS)
               ENDIF
            ENDIF
C
C ADJUST NEW LTD INTEREST AND STD INTEREST RATE BY THE SCENARIO DRIVER
C
            LTDRTE = LTDRTE * GET_SCENARIO_BY_INDEX(YR,INT2(7),INT2(26))
            
            STD_INTEREST_RATE = STD_INTEREST_RATE * 
     +                        GET_SCENARIO_BY_INDEX(YR,INT2(7),INT2(27))
C
            EXPENSE_COLLECT_VIA_ADJ_CLAUSE = 0.
            CLASS_ADJ_CLAUSE_REVENUE = 0.
            CLASS_GAS_ADJ_CLAUSE_REVENUE = 0.
            CAPITIALIZED_INTEREST = 0.
            DEFERRED_TAX_BASIS = 0.
            NF_DEFERRED_TAX_BASIS = 0.
            LEASOR_DEFERRED_TAX_BASIS = 0.
            AMORTIZATION_EXPENSE = 0.
            ATL_AMORTIZATION = 0.
            FASB143_ARO_INTEREST_ACCREATION = 0.
            NF_ATL_AMORTIZATION = 0.
            NF_DEFERRED_DEBITS_RATE_BASE = 0.
            NF_CAPITIALIZED_INTEREST = 0.
            BTL_AMORTIZATION = 0.
            BTL_AMORTIZATION_EXP = 0.
            BTL_AMORTIZATION_IN_EXPENSES = 0.
            ATL_DEF_TAXES = 0.
            BTL_DEF_TAXES_CR = 0.
            BTL_DEFERRED_TAXES_DR = 0.
            EA_TAX_BOOK_DEP = 0.
            FA_SL_TAX_DEP = 0.
            LEASOR_NF_SL_TAX_DEP = 0.
            DSM_SL_TAX_DEP = 0.
            LEASOR_NF_AMORTIZATION = 0.
            OWNED_NF_BURN = 0.
            OWNED_NF_BURN_EXP_FILE = 0.
            OWNED_NF_BURN_SALES_FILE = 0.
            OWNED_NF_BURN_CL_RESOURCES = 0.
            LEASED_NF_BURN = 0.
            LEASED_NF_BURN_EXP_FILE = 0.
            LEASED_NF_BURN_SALES_FILE = 0.
            LEASED_NF_BURN_CL_RESOURCES = 0.
            ELIMINATION_CASH_ADJUSTMENT = 0.
            DD_DEFERRED_EXPENSE_CASH = 0.
            TF_OTHER_PURCHASE_POWER_EXPENSE = 0.
            RC_OTHER_PURCHASE_POWER_EXPENSE = 0.
            WVPA_MEMBER_ACCRUED_REVENUES = 0.
            WVPA_PURCHASE_POWER_EXPENSE_ADJ = 0.
            REFERENCE_BASE_REVENUES = 0.
            IF(DUKE_IS_ACTIVE) THEN
               VOID_LOGICAL =  CATAWBA_INFO(YR,CLASS,
     +                                      CATAWBA_REVENUES,
     +                                      CATAWBA_EXPENSES,
     +                                      CATAWBA_CAPACITY_PAYMENTS,
     +                                      CATAWBA_LEVEL_CAP_PAYMENTS,
     +                                      CATAWBA_OTHER_NET_REVENUES,
     +                                      CATAWBA_DEFERRED_DEBITS,
     +                                      CATAWBA_DEFER_TAXES_BAL_CR,
     +                                      CATAWBA_DEFERRED_TAXES_CR)
               CATAWBA_TOTAL_CAP_PAYMENTS = CATAWBA_CAPACITY_PAYMENTS -
     +                                      CATAWBA_LEVEL_CAP_PAYMENTS
            ELSEIF(CPL_IS_ACTIVE .AND. CLASS == EMC_PA_CLASS()) THEN
               CALL CPL_ENERGY_REV_AND_EXP(CATAWBA_REVENUES,
     +                                     CPL_ENERGY_2_PA,
     +                                     CATAWBA_EXPENSES,
     +                                     CPL_ENERGY_FROM_PA,
     +                                     CPL_EMC_REVENUES)
               IF(PA_CONTRACT_ACITVE) THEN
                  CATAWBA_REVENUES = CATAWBA_REVENUES + CPL_EMC_REVENUES
               ELSE
                  CATAWBA_REVENUES = CPL_EMC_REVENUES
                  CATAWBA_EXPENSES = 0.
               ENDIF
               CATAWBA_CAPACITY_PAYMENTS = 0.
               CATAWBA_LEVEL_CAP_PAYMENTS = 0.
               CATAWBA_OTHER_NET_REVENUES = 0.
               CATAWBA_DEFERRED_DEBITS = 0.
               CATAWBA_DEFER_TAXES_BAL_CR = 0.
               CATAWBA_DEFERRED_TAXES_CR = 0.
               CATAWBA_TOTAL_CAP_PAYMENTS = 0.
            ELSE   
               CATAWBA_REVENUES = 0.
               CATAWBA_EXPENSES = 0.
               CATAWBA_CAPACITY_PAYMENTS = 0.
               CATAWBA_LEVEL_CAP_PAYMENTS = 0.
               CATAWBA_OTHER_NET_REVENUES = 0.
               CATAWBA_DEFERRED_DEBITS = 0.
               CATAWBA_DEFER_TAXES_BAL_CR = 0.
               CATAWBA_DEFERRED_TAXES_CR = 0.
               CATAWBA_TOTAL_CAP_PAYMENTS = 0.
            ENDIF
C
            NEW_SUB_INVESTMENT = 0.
            GOODWILL_OF_NEW_SUB_INVESTMENT = 0.
            IF(PARENT_CLASS) THEN
               IF(NUM_OF_SUBSIDIARIES > 0) THEN
                  NEW_SUB_INVESTMENT =
     +                       PARENT_ACQUISITION_OF_SUB_COST(CLASS_LEVEL)
                  GOODWILL_OF_NEW_SUB_INVESTMENT =
     +                          PARENT_ACQUISITION_GOODWILL(CLASS_LEVEL)
               ENDIF
            ELSEIF(SUBSIDIARY_CLASS .and.
     +                        .not. CONSOLIDATING_CLASS(CLASS_POS)) THEN
               NEW_SUB_INVESTMENT =
     +                       PARENT_ACQUISITION_OF_SUB_COST(CLASS_LEVEL)
               GOODWILL_OF_NEW_SUB_INVESTMENT =
     +                          PARENT_ACQUISITION_GOODWILL(CLASS_LEVEL)
            ENDIF
            CUM_GOODWILL_AT(CLASS_POS) = CUM_GOODWILL_AT(CLASS_POS)
     +                        + PARENT_ACQUISITION_GOODWILL(CLASS_LEVEL) 
     +                        + GOODWILL_ADJUSTMENT
            PARENT_ACQUISITION_OF_SUB_COST(CLASS_LEVEL) = 0.
            PARENT_ACQUISITION_GOODWILL(CLASS_LEVEL) = 0.
C
C            DEFERRED_EXPENSE_CASH = DEFERRED_EXPENSE_CASH +
C    +                   CATAWBA_OTHER_NET_REVENUES ! Deferred cash expense
C
C ITEMS FROM INIT FILE AND THE PARAMETER FILE
C
            CALL EXISTING_ASSET_INFO(ASSET_YR,CLASS,EA_CLASS_EXISTS,
     +                                      INCOME_TAX_DEPRECIATION,
     +                                        BOOK_DEPRECIATION,
     +                                        CLASS_GPV(2,CLASS_POS),
     +                       CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS),
     +                                        EA_TAX_BOOK_DEP,
     +                                        DEFERRED_TAX_BASIS,
     +                                        EA_PROPERTY_TAX_GPV,
     +                                        EA_PROPERTY_TAX_NPV,
     +                                        EA_DEFERRED_TAXES)
C
            CALL DEBT_INFO(ASSET_YR,CLASS,DB_CLASS_EXISTS,
     +                     PSDIV(YR,CLASS_POS), ! DEBT_FILE_PREFERRED_DIVIDENDS,
     +                     PSRED(YR,CLASS_POS), !DEBT_FILE_PREFERRED_RETIREMENTS,
     +                     DEBT_FILE_PREFERRED_ISSUED,
     +                     DEBT_FILE_LTD_ISSUED,
     +                     LTDINT(YR,CLASS_POS), !INTEREST_ON_EXISTING_LTD,
     +                     LTDRET(YR,CLASS_POS), !DEBT_FILE_LTD_RETIREMENTS,
     +                     ANNINT(YR,CLASS_POS),
     +                     ANN_PS_DIV(YR,CLASS_POS), !PREFERRED_STOCK_ANNUALIZED_DIVS
     +                     ANN_LTD_INT(YR,CLASS_POS), !LONG_TERM_DEBT_ANNUALIZED_INT
     +                     OTHER_INCOME_AFILLIATES,
     +                     INVESTMENT_IN_AFILLIATES,
     +                     INTEREST_INCOME_AFILLIATES,
     +                     LOANS_TO_AFILLIATES,
     +                     PS_PREM_BAL,
     +                     PS_PREM_AMORT,
     +                     LTD_NEW_PREM_ADJUSTMENT,
     +                     LTD_PREM_AMORT,
     +                     PS_ISSUING_BAL,
     +                     PS_ISSUING_AMORT,
     +                     LTD_ISSUING_BAL,
     +                     LTD_ISSUING_AMORT,
     +                     LTD_PS_ISSUE_TAX_EXPENSE,
     +                     MIPS_INCOME_TAX_DEDUCTION,
     +                     LTD_INTEREST_CASH_PAYMENTS,
     +                     PS_DIVIDEND_CASH_PAYMENTS,
     +                     CURRENT_LTD_RETIREMENTS)
C
C
C INVESTMENT INFORMATION
C
C

            CALL DEBT_FILE_INVESTMENT_INFO(ASSET_YR,CLASS,
     +                                     INVESTMENTS_MADE,
     +                                     INVESTMENTS_SOLD,
     +                                     DEBT_FILE_INVESTMENT_INCOME,
     +                                     DIVIDEND_70_NONTAXABLE,
     +                                     NOTES_RECEIVABLE_MADE,
     +                                     NOTES_RECEIVABLE_CLEARED,
     +                                     NOTES_PAYABLE_MADE,
     +                                     NOTES_PAYABLE_CLEARED,
     +                                     NOTES_PAYABLE_INTEREST,
     +                                     INTRA_INVESTMENT_INCOME,
     +                                   NOTES_PAYABLE_CASH_INTEREST,
     +                                   NOTES_RECEIVALBE_CASH_INTEREST)
C
            INVESTMENTS_BOY = DEBT_FILE_INVESTMENTS(CLASS_POS)
            DEBT_FILE_INVESTMENTS(CLASS_POS) =
     +                              DEBT_FILE_INVESTMENTS(CLASS_POS) +
     +                              INVESTMENTS_MADE - INVESTMENTS_SOLD
            NOTES_PAYABLE_BOY = NOTES_PAYABLE(CLASS_POS)
            NOTES_PAYABLE(CLASS_POS) = NOTES_PAYABLE(CLASS_POS) +
     +                                 NOTES_PAYABLE_MADE -
     +                                 NOTES_PAYABLE_CLEARED
            NOTES_PAYABLE_BALANCE = NOTES_PAYABLE(CLASS_POS)
            NOTES_RECEIVABLE_BOY = NOTES_RECEIVABLE(CLASS_POS)
            NOTES_RECEIVABLE(CLASS_POS) = NOTES_RECEIVABLE(CLASS_POS) +
     +                                    NOTES_RECEIVABLE_MADE -
     +                                    NOTES_RECEIVABLE_CLEARED
            NOTES_RECEIVABLE_BALANCE = NOTES_RECEIVABLE(CLASS_POS)
            CASH_CHANGE_IN_NOTES_PAY_REC = NOTES_PAYABLE_CLEARED
     +                                     - NOTES_RECEIVABLE_CLEARED
            CASH_CHANGE_IN_NOTES_PAY_REC = 
     +                                     (NOTES_RECEIVABLE_MADE
     +                                      - NOTES_RECEIVABLE_CLEARED)
     +                                     -(NOTES_PAYABLE_MADE
     +                                       -NOTES_PAYABLE_CLEARED)
c           MONTHLY_COMMON_SHARES_ACTIVE = .FALSE.
            CS_BUYBACK_ADJ_RETAINED_ERNING = 0.
            IF(MONTHLY_MIDAS_ACTIVE .or. .true.) THEN
               CALL DEBT_COMMON_STOCK_INFO(ASSET_YR,CLASS,
     +                                  DEBT_COMMON_STOCK_ISSUED,
     +                                  DEBT_COMMON_SHARES_ISSUED,
     +                                  DEBT_COMMON_STOCK_BUYBACK,
     +                                  DEBT_COMMON_SHARES_BUYBACK,
     +                                  DEBT_COMMON_STOCK_BALANCE,
     +                                  DEBT_COMMON_SHARES_OUTSTANDING,
     +                                  CS_ISSUE_EXP_BAL,
     +                                  CS_ISSUE_EXP_AMORT,
     +                                  CS_ISSUE_EXP_THIS_PERIOD,
     +                                  NET_MONTHLY_SHARES,
     +                                  CS_BUYBACK_ADJ_RETAINED_ERNING,
     +                                  COMMON_STOCK_ISSUED_2_EQUITY,
     +                                  COMMON_STOCK_BUY_FROM_EQUITY)
c               IF(PARENT_CLASS) THEN
c                  DEBT_COMMON_STOCK_ISSUED=COMMON_STOCK_ISSUED_2_EQUITY
c                  DEBT_COMMON_STOCK_BUYBACK=COMMON_STOCK_BUY_FROM_EQUITY
c               ENDIF
c              IF(DEBT_COMMON_STOCK_ISSUED /= 0. .OR.
c    +                DEBT_COMMON_STOCK_BUYBACK /= 0. .OR.
c    +                       DEBT_COMMON_SHARES_ISSUED /= 0. .OR.
c    +                            DEBT_COMMON_SHARES_BUYBACK /= 0.) THEN
c                 MONTHLY_COMMON_SHARES_ACTIVE = .TRUE.
c                 CSMIN = MAX(CSMIN,DEBT_COMMON_STOCK_ISSUED)
c                 CSMIN = CSMIN - DEBT_COMMON_STOCK_BUYBACK
c                 IF(CSMIN < 0.) THEN
c                    CSMAX = CSMIN
c                 ELSE
c                    CSMAX = MAX(CSMIN,CSMAX)
c                 ENDIF
c              ENDIF
            ENDIF
C ADDED 7/2/98
c now at line 6673            IF(ACCURAL_ACCOUNTING_ACTIVE) THEN
c               INTEREST_DIVIDENDS_ACCRUDED = LTDINT(YR,CLASS_POS)        !INTEREST_ON_EXISTING_LTD,
c     +                                      - LTD_INTEREST_CASH_PAYMENTS !CASH INTEREST PAYMENTS
c     +                                      + PSDIV(YR,CLASS_POS)        ! DEBT_FILE_PREFERRED_DIVIDENDS,
c     +                                      - PS_DIVIDEND_CASH_PAYMENTS  ! PS DIVIDEND PAYMENTS
c            ELSE   
c               INTEREST_DIVIDENDS_ACCRUDED = 0.
c               LTD_INTEREST_CASH_PAYMENTS = LTDINT(YR,CLASS_POS) !INTEREST_ON_EXISTING_LTD,
c               PS_DIVIDEND_CASH_PAYMENTS = PSDIV(YR,CLASS_POS) ! DEBT_FILE_PREFERRED_DIVIDENDS,
c            ENDIF
C ADDED 1/17/98
            DEBT_FILE_ISSUE_EXPENSE = LTD_PS_ISSUE_TAX_EXPENSE
     +                                + CS_ISSUE_EXP_THIS_PERIOD
            FED_INCOME_TAX_DEDUCTIONS = FED_INCOME_TAX_DEDUCTIONS
     +                                  + MIPS_INCOME_TAX_DEDUCTION
     +                                  + LTD_PS_ISSUE_TAX_EXPENSE
     +                                  + CS_ISSUE_EXP_THIS_PERIOD
            STATE_INCOME_TAX_DEDUCTIONS = STATE_INCOME_TAX_DEDUCTIONS
     +                                    + MIPS_INCOME_TAX_DEDUCTION
     +                                    + LTD_PS_ISSUE_TAX_EXPENSE
     +                                    + CS_ISSUE_EXP_THIS_PERIOD
            PS_PREM_ISSUE_EXP_AMORT = PS_ISSUING_AMORT - PS_PREM_AMORT
c           LTD_PREM_AMORT = LTD_PREM_AMORT - LTD_ISSUING_AMORT
            LTD_PS_DEFERRED_TAX_BASIS = LTD_PS_ISSUE_TAX_EXPENSE
     +                                  + CS_ISSUE_EXP_THIS_PERIOD
     +                                  - LTD_ISSUING_AMORT
     +                                  - PS_ISSUING_AMORT
     +                                  - CS_ISSUE_EXP_AMORT
C
            CALL DEBIT_INFO(ASSET_YR,CLASS,DD_CLASS_EXISTS,
     +                         DD_BALANCE,
     +                     DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS),
     +                     AMORTIZATION_EXPENSE,
     +                     NET_DD_BALANCE(2,CLASS_POS),
     +                         DD_CUM_AMORTIZATION,
     +                         DD_CUM_RB_AMORTIZATION,
     +                     INTEREST_AMORT_FROM_DEBIT_FILE,
     +                     ATL_AMORTIZATION,
     +                     BTL_AMORTIZATION,
     +                     ATL_DEF_TAXES,
     +                     BTL_DEF_TAXES_CR,
     +                     UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS),
     +                     DD_DEFERRED_EXPENSE_CASH,
     +                     VARIABLE_OM_AMORT,
     +                     DD_ATL_CURRENT_TAX_EXPENSE,
     +                     DD_BTL_CURRENT_TAX_EXPENSE,
     +                     OTHER_OM_AMORT,
     +                     PURCHASE_POWER_AMORT,
     +                     OTHER_DD_BALANCE(2,CLASS_POS),
     +                     GOODWILL(2,CLASS_POS),
     +                     CLASS_REGULATORY_ASSETS,
     +                     FASB_109,
     +                     FASB_133,
     +                     OTHER_DD_AMORT,
     +                     GOODWILL_AMORT,
     +                     CLASS_REGULATORY_ASSETS_AMORT,
     +                     FASB_109_AMORT,
     +                     FASB_133_AMORT,
     +                     UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS),
     +                     DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS),
     +                     OTHER_DEFERRED_CREDITS_BAL(2,CLASS_POS),
     +                     REGULATORY_DEFERRED_CREDITS_BAL(2,CLASS_POS),
     +                     GAIN_ON_REAQUIRED_DEBT_BAL(2,CLASS_POS),
     +                     DEFERRED_GAIN_FROM_SALES(2,CLASS_POS))
C
            BOY_ISSUE_EXP_BAL = DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
     +                      + UNAMORTIZED_ISSUE_EXP_BALANCE(1,CLASS_POS)
            DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS) = PS_ISSUING_BAL
     +                                                + CS_ISSUE_EXP_BAL                       ! is shown as an interest or dividends
c     +                                                + LTD_ISSUING_BAL
            DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS) = LTD_ISSUING_BAL
c            UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS) =
c     +                         UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
c     +                         + PS_ISSUING_BAL
c     +                         + LTD_ISSUING_BAL
            ATL_AMORTIZATION = ATL_AMORTIZATION
     +                         + CS_ISSUE_EXP_AMORT
            NET_DD_BALANCE(2,CLASS_POS) = NET_DD_BALANCE(2,CLASS_POS)
     +                        + DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)  ! These are net balances which are
     +                        + DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS)
C     +                                                                ! adjusted for the amortization which 
c     +                        + CS_ISSUE_EXP_BAL                       ! is shown as an interest or dividends
c            DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS) = CS_ISSUE_EXP_BAL
            UNAMORT_DEBT_INTEREST_BAL =
     +                             DEBT_FILE_UNAMORT_INTR_BAL(CLASS_POS)
            UNAMORT_DEBIT_INTEREST_BAL =
     +                         UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
            UNAMORT_DEBT_ISS_EXPENSE_BAL =
     +                          DEBT_FILE_UNAMORT_ISS_EXP_BAL(CLASS_POS)
            UNAMORT_DEBIT_ISS_EXPENSE_BAL =
     +                        UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
            CLASS_UNAMORTIZED_ISSUE_EXP_BALANCE =
     +                        UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
            CLASS_UNAMORTIZED_INTEREST_BAL =
     +                                      UNAMORT_DEBT_INTEREST_BAL
     +                                      + UNAMORT_DEBIT_INTEREST_BAL
C            OTHER_DD_BALANCE(2,CLASS_POS) =
C     +                                     OTHER_DD_BALANCE(2,CLASS_POS)
C     +                                    + PS_ISSUING_BAL   ! These are net balances which are
C     +                                    + LTD_ISSUING_BAL  ! adjusted for the amortization which 
C     +                                    + CS_ISSUE_EXP_BAL ! is shown as an interest or dividends
            INTEREST_AMORTIZATION = INTEREST_AMORT_FROM_DEBIT_FILE
     +                              - LTD_PREM_AMORT   ! 1/23/98 CHANGED FORM MINUS 
     +                              + LTD_ISSUING_AMORT
C
C NOTE!!! EXPENSE VARIABLES ARE SET TO ZERO IN THE FOLLOWING ROUTINE
C EXCEPT FOR THE FOLLOWING WHICH ARE INITIALIZED BY READING THE 
C FINANCIAL PARAMETER FILE
C
C   CLASS_OTHER_REVENUE = 0.
C   CLASS_BTL_REVENUES = 0.
C   CLASS_BTL_EXPENSES = 0.
      ATL_LEASE_PAYMENTS = 0.
      BTL_LEASE_PAYMENTS = 0.
C
            CALL EXPENSE_REVENUE_INFO(ASSET_YR,CLASS,EX_CLASS_EXISTS,
     +                                VARIABLE,            
     +                                EXP_FUEL_EXPENSE,
     +                                EXP_PURCHASE_POWER_EXPENSE,
     +                                EXP_FILE_VARIABLE_EXPENSE,
     +                                EXP_FILE_FIXED_EXPENSE,
     +                                OTHER_EXPENSE_1,
     +                                OTHER_EXPENSE_2,
     +                                OTHER_EXPENSE_3,
     +                                OWNED_NF_BURN_EXP_FILE,
     +                                LEASED_NF_BURN_EXP_FILE,
     +                                DSM_EXPENSE,
     +                                DSM_REBATE,
C REVENUES
     +                                CLASS_ADJ_CLAUSE_REVENUE,
     +                                BASE_RATES_REVENUES,
     +                                SECONDARY_SALES_REVENUES,
     +                                SECONDARY_SALES_NOT_IN_RATES,
     +                                CLASS_OTHER_REVENUE,
     +                                CLASS_BTL_REVENUES,
     +                                CLASS_BTL_EXPENSES,
     +                                ATL_LEASE_PAYMENTS,
     +                                BTL_LEASE_PAYMENTS,
     +                                EXP_SERVICE_TRANSACTIONS,
     +                                CLASS_EXP_EMIS_EXPENSE,
     +                                DOE_NUC_FUEL_FEE,
     +                                NUC_DECOMMISSIONING_COST,
     +                                CATAWBA_REVENUES,
     +                                CATAWBA_EXPENSES,
     +                                GAS_REVENUES,
     +                                TRANSMISSION_OPERATION,
     +                                TRANSMISSION_MAINTENANCE,
     +                                DISTRIBUTION_OPERATION,
     +                                DISTRIBUTION_MAINTENANCE,
     +                                CUSTOMER_ACCOUNTS,
     +                                CUSTOMER_SERVICES,
     +                                SALES_EXPENSE,
     +                                AG_OPERATIONS,
     +                                AG_MAINTENANCE,
     +                                UNBILLED_REVENUES,
     +                                ATL_DEFERRED_REVENUES,
     +                                RELATIONSHIP_REVENUES,
     +                                RESIDENTIAL_REVENUES,
     +                                COMMERCIAL_REVENUES,
     +                                INDUSTRIAL_REVENUES,
     +                                LIGHTING_REVENUES,
     +                                BULK_POWER_REVENUES,
     +                                PARM_AMORTIZATION_ADJUSTMENT,
     +                                AMORT_DEF_REVENUES,
     +                                ATL_LEASE_AMORTIZATION,
     +                                BTL_LEASE_AMORTIZATION,
     +                                EXP_BOOK_DEPRECIATION,
     +                                OTHER_INCOME_NET_OF_TAX,
     +                                CAPACITY_SALES_REVENUE,
     +                                GOVERNMENT_SALES_REVENUE,
     +                                BTL_AMORTIZATION_EXP,
     +                                CHANGE_IN_ACCOUNTS_RECEIVABLE,
     +                                EXP_CHANGE_IN_ACCOUNTS_PAYABLE,
     +                                ATL_LEASE_INTEREST,
     +                                BTL_LEASE_INTEREST,
     +                                BTL_NUC_FUEL_DECOM_LIABILITY,
     +                                EXP_DEFERRED_FUEL_EXPENSE,
     +                                VACATION_PAY_NON_CASH,
     +                                PENSION_EXPENSE_NON_CASH,
     +                                STORM_EXPENSE_NON_CASH,
     +                                CLASS_GAS_ADJ_CLAUSE_REVENUE,
     +                                STD_INTEREST_ADDEN,
     +                                LTD_INTEREST_ADDEN,
     +                                WVPA_MEMBER_ACCRUED_REVENUES,
     +                                EXP_WVPA_NON_MEMBER_COST_OF_POWER,
     +                                EXP_WVPA_MEMBER_COST_OF_POWER,
     +                                WVPA_MEMBER_COST_OF_SERVICES,
     +                                WVPA_NONMBR_COST_OF_SERVICES,
     +                                REGULATED_REVENUES_13,
     +                                NON_REG_REVENUES_10,
     +                                PENSION_EXPENSE_CASH,
     +                                Exp_PreferredDividends,
     +                                Exp_AFDCBorrowed,
     +                                Exp_AFDCEquity,
     +                                Exp_InterestIncome,
     +                                Exp_Dividends)
            Mark_To_Market = VARIABLE(786)
            Payroll_Taxes = VARIABLE(787)
            FE_NonCashPension = VARIABLE(791)
            FE_NonCashEarningsNonCorp =  VARIABLE(790)
C
            DIVIDEND_70_NONTAXABLE = DIVIDEND_70_NONTAXABLE
     +                               + Exp_Dividends 
            PSDIV(YR,CLASS_POS) = PSDIV(YR,CLASS_POS)
     +                            + Exp_PreferredDividends
            WVPA_NON_MEMBER_COST_OF_POWER =
     +                                 EXP_WVPA_NON_MEMBER_COST_OF_POWER
            WVPA_MEMBER_COST_OF_POWER = EXP_WVPA_MEMBER_COST_OF_POWER
            LTDINT(YR,CLASS_POS) = LTDINT(YR,CLASS_POS) !INTEREST_ON_EXISTING_LTD
     +                             + LTD_INTEREST_ADDEN
C
            CALL FE_EXPENSE_SUB_CLASSES(ASSET_YR,CLASS,VARIABLE)
C
C RECEIVABLES AND PAYABLES
C
            IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
               CALL CHANGE_IN_RECD_PAYS_4_REV_FORC(CLASS,
     +                                   CHANGE_IN_ACCOUNTS_RECEIVABLE,
     +                                   EXP_CHANGE_IN_ACCOUNTS_PAYABLE)
               WVPA_CHANGE_IN_ACCOUNTS_PAYABLE = 0.

               CHANGE_IN_ACCOUNTS_PAYABLE =
     +                                EXP_CHANGE_IN_ACCOUNTS_PAYABLE
     +                                + WVPA_CHANGE_IN_ACCOUNTS_PAYABLE
               CASH_TIMING_ADJUSTMENTS = CHANGE_IN_ACCOUNTS_PAYABLE
     +                                   - CHANGE_IN_ACCOUNTS_RECEIVABLE
            ELSE
               CHANGE_IN_ACCOUNTS_PAYABLE = 0.
               CHANGE_IN_ACCOUNTS_RECEIVABLE = 0.
               CASH_TIMING_ADJUSTMENTS = 0.
               EXP_CHANGE_IN_ACCOUNTS_PAYABLE = 0.
               WVPA_CHANGE_IN_ACCOUNTS_PAYABLE = 0.
            ENDIF
C
            CALL CASH_FROM_DEFERRED_EXP_ACCOUNTS(ASSET_YR,CLASS,
     +                                        PENSION_EXPENSE_CASH,
     +                                        STORM_EXPENSE_CASH,
     +                                        VACATION_PAY_CASH,
     +                                        ExecBenefitsCash,
     +                                        IncentiveCompensationCash)
            CALL RETURN_BAL_SHEET_LIAB_PAYMENTS(YR,CLASS,
     +                                        PENSION_EXPENSE_CASH,
     +                                        STORM_EXPENSE_CASH,
     +                                        VACATION_PAY_CASH,
     +                                        ExecBenefitsCash,
     +                                        IncentiveCompensationCash)
C
            DEFERRED_REVENUES = DEFERRED_REVENUES+ATL_DEFERRED_REVENUES
            BTL_AMORTIZATION = BTL_AMORTIZATION + BTL_AMORTIZATION_EXP
            BTL_AMORTIZATION_IN_EXPENSES = BTL_AMORTIZATION_IN_EXPENSES 
     +                                     + BTL_LEASE_AMORTIZATION
     +                                     + BTL_AMORTIZATION
     +                                     - BTL_AMORT_OF_BOOK
C
C TAX STUFF
C
            DEFERRED_TAXES_DR_TAX_FILE = 0.
            CALL RETURN_TAX_INFO(CLASS,ASSET_YR,
     +                           CLASS_ADDENDUM_TO_PROPERTY_TAX,
     +                           CLASS_ADDENDUM_2_OTHER_TAXES,
     +                           ADJUSTMENT_2_OP_REV_TAX,
     +                           FED_TAX_CREDIT_PASSED_UP,
     +                           STATE_TAX_CREDIT_PASSED_UP,
     +                           ADJ_2_FEDERAL_TAXES,
     +                           ADJ_2_STATE_TAXES,
     +                           M1_FED_ADDITIONS,
     +                           M1_FED_DEDUCTIONS,
     +                           M1_STATE_ADDITIONS,
     +                           M1_STATE_DEDUCTIONS,
     +                           DEFERRED_TAX_ADJUSTMENT,
     +                           DEFERRED_TAXES_DR_TAX_FILE, ! ADJTXNORM, was this variable
     +                           ADDENDUM_TO_ITC_AMORTIZATED,
     +                           SEC_29_CREDITS_PASSED_UP,
     +                           SEC_42_CREDITS_PASSED_UP,
     +                           ACE_TAX_DEPRECIATION,
     +                           TAX_PREFERENCE_DEPRECIATION,
     +                           BTL_DEFERRED_TAXES_CR,
     +                           BTL_DEFERRED_TAXES_DR,
     +                           AMT_INCOME_ADDENDUM,
     +                           INCOME_TAX_DEPRECIATION,
     +                           BTL_MISC_DEDUCTIONS)
C
C 1/27/09 added Production Taxes Credits (PTC)
C
            CLASS_PTCs = 0.
            IF(PARENT_CLASS .AND. .FALSE.) 
     +                  CALL GET_PTCs_TEST(CLASS,CLASS_PTCs)
            FED_TAX_CREDIT_PASSED_UP = FED_TAX_CREDIT_PASSED_UP
     +                                 + CLASS_PTCs(0)
C
C END PTCs
C
            CALL EXPENSE_FILE_TAXES(YR,CLASS,
     +                             EXP_FILE_PROPERTY_TAXES,
     +                             WVPA_PROP_TAXES_IN_POWER_COSTS,
     +                             CLASS_ADDENDUM_2_OTHER_TAXES,
     +                             ADJUSTMENT_2_OP_REV_TAX)
            FED_INCOME_TAX_DEDUCTIONS = FED_INCOME_TAX_DEDUCTIONS
     +                                  + M1_FED_DEDUCTIONS
     +                                  - M1_FED_ADDITIONS 
     +                                  + BTL_MISC_DEDUCTIONS
            STATE_INCOME_TAX_DEDUCTIONS = STATE_INCOME_TAX_DEDUCTIONS
     +                                    + M1_STATE_DEDUCTIONS
     +                                    - M1_STATE_ADDITIONS
     +                                    + BTL_MISC_DEDUCTIONS
C
C TAX RATES
C
            FEDERAL_TAX_RATE = FEDERAL_INCOME_TAX_RATE()/100.
            NORMALIZATION_TAX_RATE = 0.
            IF(IOU_UTILITY) THEN
               IF(NORMALIZE_FEDERAL_TAXES .AND.
     +                                       NORMALIZE_STATE_TAXES) THEN
                  NORMALIZATION_TAX_RATE = FEDERAL_TAX_RATE *
     +                                (1.-STATE_TAX_RATE)+STATE_TAX_RATE
               ELSEIF(NORMALIZE_FEDERAL_TAXES) THEN
                  NORMALIZATION_TAX_RATE = FEDERAL_TAX_RATE
               ELSEIF(NORMALIZE_STATE_TAXES) THEN
                  NORMALIZATION_TAX_RATE = STATE_TAX_RATE
               ENDIF
            ENDIF
C
            VARIABLE_EXPENSE = 0.
            FIXED_EXPENSE = 0.
            FUEL_EXPENSE = 0.
            PURCHASE_POWER_EXPENSE = 0.
            OTHER_PURCHASE_POWER_EXPENSE = 0.
C            
c            IF(WVPA()) THEN
c            ELSE
               CALL RC_EXPENSE_REVENUE_INFO(CLASS,
     +                                   FUEL_EXPENSE,
     +                                  RC_OTHER_PURCHASE_POWER_EXPENSE, !PURCHASE_POWER_EXPENSE,
     +                                   VARIABLE_EXPENSE,
     +                                   FIXED_EXPENSE,
     +                                   OTHER_EXPENSE_1,
     +                                   OTHER_EXPENSE_2,
     +                                   OTHER_EXPENSE_3,
     +                                   OWNED_NF_BURN_SALES_FILE,
     +                                   LEASED_NF_BURN_SALES_FILE,
     +                                   EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +                                   DSM_EXPENSE,
     +                                   DSM_REBATE,
C REVENUES
     +                                   CLASS_ADJ_CLAUSE_REVENUE,
     +                                   MARKET_BASE_REVENUES,
     +                                   SECONDARY_SALES_REVENUES,
     +                                   CLASS_OTHER_REVENUE,
     +                                   CLASS_BTL_REVENUES,
     +                                   CLASS_BTL_EXPENSES,
     +                                   ATL_LEASE_PAYMENTS,
     +                                   BTL_LEASE_PAYMENTS,
     +                                   EXP_SERVICE_TRANSACTIONS,
     +                                   GAS_REVENUES,
     +                                   CATAWBA_REVENUES,
     +                                   RESIDENTIAL_REVENUES,
     +                                   COMMERCIAL_REVENUES,
     +                                   INDUSTRIAL_REVENUES,
     +                                   LIGHTING_REVENUES,
     +                                   BULK_POWER_REVENUES,
     +                                   CAPACITY_SALES_REVENUE,
     +                                   GOVERNMENT_SALES_REVENUE,
     +                                   CLASS_GAS_ADJ_CLAUSE_REVENUE,
     +                                   COMPETITIVE_SALES_REVENUE,
     +                                   FE_Competitive_Unit_Sales,
     +                                   FE_Intra_Company_Utility_Sales)
c            ENDIF
C
            CALL SERVICE_TRANS_INFO(CLASS,FUEL_EXPENSE,
     +                                OTHER_PURCHASE_POWER_EXPENSE, !PURCHASE_POWER_EXPENSE,
     +                                VARIABLE_EXPENSE, ! replaced 10/17/99 EXP_FILE_VARIABLE_EXPENSE
     +                                FIXED_EXPENSE, ! replaced 10/17/99 EXP_FILE_FIXED_EXPENSE
     +                                OTHER_EXPENSE_1,
     +                                OTHER_EXPENSE_2,
     +                                OTHER_EXPENSE_3,
     +                                OWNED_NF_BURN_EXP_FILE,
     +                                LEASED_NF_BURN_EXP_FILE,
     +                                EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +                                NF_BURN_IN_RATEBASE,
     +                                DSM_EXPENSE,
     +                                DSM_REBATE,
C REVENUES
     +                                CLASS_ADJ_CLAUSE_REVENUE,
     +                                BASE_RATES_REVENUES,
     +                                SECONDARY_SALES_REVENUES,
     +                                CLASS_OTHER_REVENUE,
     +                                CLASS_BTL_REVENUES,
     +                                CLASS_BTL_EXPENSES,
     +                                ATL_LEASE_PAYMENTS,
     +                                BTL_LEASE_PAYMENTS,
     +                                EXP_SERVICE_TRANSACTIONS,
     +                                CLASS_EXP_EMIS_EXPENSE,
     +                                DOE_NUC_FUEL_FEE,
     +                                NUC_DECOMMISSIONING_COST,
     +                                CATAWBA_REVENUES,
     +                                CATAWBA_EXPENSES,
     +                                CAPACITY_SALES_REVENUE)
C
            VOID_INT2 = RETURN_CONTRACT_CLASS_INFO(CLASS,
     +                                   FIXED_EXPENSE,
     +                                   VARIABLE_EXPENSE,
     +                                   OTHER_PURCHASE_POWER_EXPENSE, ! PURCHASE_POWER_EXPENSE,
     +                                   CLASS_BTL_EXPENSES,
     +                                   EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +                                   SECONDARY_SALES_REVENUES)
C
            VOID_INT2 = RETURN_ANNUL_CUSTOMER_VARIABLES(CLASS,
     +                                  TF_OTHER_PURCHASE_POWER_EXPENSE, ! PURCHASE_POWER_EXPENSE,
     +                                  SECONDARY_SALES_REVENUES,
     +                                  CAPACITY_SALES_REVENUE,
     +                                  REGULATED_REVENUES_11,
     +                                  RESIDENTIAL_REVENUES,
     +                                  COMPETITIVE_SALES_REVENUE,
     +                                  UTILITY_SALES_REVENUE,
     +                                  COMMERCIAL_REVENUES,
     +                                  INDUSTRIAL_REVENUES,
     +                                  LIGHTING_REVENUES,
     +                                  BULK_POWER_REVENUES,
     +                                  GOVERNMENT_SALES_REVENUE,
     +                                  FE_Competitive_Unit_Sales,
     +                                  CUST_CAP_PURCHASES_TO_LEVEL_RM)  ! 725
c     +                                  FE_Intra_Company_Utility_Sales)
C
            IF(.NOT. ASSET_ANALYST_ONLY()) THEN
               CALL ENRG_LIMITED_INFO(CLASS,ENRG_CLASS_EXISTS,
     +                             OTHER_PURCHASE_POWER_EXPENSE, ! PURCHASE_POWER_EXPENSE,
     +                             VARIABLE_EXPENSE,
     +                             FIXED_EXPENSE,
     +                             EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +                             EXPENSE_COLLECT_VIA_BASE_RATES,
     +                             EXPENSE_NOT_COLLECTED_IN_RATES,
     +                             CLASS_BTL_REVENUES,
     +                             SECONDARY_SALES_REVENUES,
     +                             SECONDARY_SALES_NOT_IN_RATES,
     +                             CLASS_BTL_EXPENSES,
     +                             EL_MARKET_REVENUES,
     +                             EL_MARKET_PURCHASES)
            ENDIF
C
C
            CALL NUCLEAR_FUEL_INFO(ASSET_YR,CLASS,NF_CLASS_EXISTS,
     +                        NF_CASH,
     +                        NF_IN_PROCESS(2,CLASS_POS),
     +                          NF_ENTERING_SERVICE,
     +                        NFIS(2,CLASS_POS),
     +                        CLASS_NET_NF_VALUE(2,CLASS_POS),
     +                        NUC_FUEL_RATE_BASE(2,CLASS_POS),
     +                          NF_AFUDC_ON_CASH,
     +                          NF_AFUDC_CAPITIALIZED,
     +                          NF_CURRENT_TAX_EXPENSE,
     +                          NF_DEFERRED_DEBIT_BALANCE,
     +                        DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS),
     +                        NF_ATL_AMORTIZATION,
     +                          NF_EXTRAORDINARY_EXPENSE,
     +                          NAFEXP,
     +                          NF_CLASS_ADJAFC,
     +                          NWODFT,
     +                          NAFDCB,
     +                          NAFDCD,
     +                        CLASS_LEASED_NFCE,
     +                        NF_CAPITIALIZED_INTEREST,
     +                        NF_TAX_DEPRECIATION,
     +                        NF_SL_TAX_DEPRECIATION,
     +                        LEASOR_DEFERRED_TAX_BASIS,
     +                        LEASOR_NF_AMORTIZATION,
     +                        LEASOR_NF_SL_TAX_DEP,
     +                        LEASOR_NF_TAX_DEP)
            ATL_AMORTIZATION = ATL_AMORTIZATION + NF_ATL_AMORTIZATION
            CAPITIALIZED_INTEREST = CAPITIALIZED_INTEREST +
     +                                          NF_CAPITIALIZED_INTEREST
            NF_ENTERING_SERVICE = NF_ENTERING_SERVICE +
     +                                             NF_AFUDC_CAPITIALIZED
C
            CALL FUTURE_ASSET_INFO(ASSET_YR,CLASS,FA_CLASS_EXISTS,
     +                        CLASS_GPV(2,CLASS_POS),
     +                          FA_CUMULATIVE_BOOK_DEP,
     +                          FA_CASH,
     +                          FA_CAPITIALIZED,
     +                        INCOME_TAX_DEPRECIATION,
     +                        BOOK_DEPRECIATION,
     +                          FA_AFDC_CASH,
     +                          FA_AFDC_CAPITIALIZED,
     +                        CLASS_CWIP(2,CLASS_POS),
     +                        CWIP_IN_RATE_BASE(2,CLASS_POS),
     +                          FA_CURRENT_TAX_EXPENSES,
     +                        CAPITIALIZED_INTEREST,
     +                          FA_PROPERTY_TAX_GPV,
     +                          FA_PROPERTY_TAX_NPV,
     +                        ATL_AMORTIZATION,
     +                          FA_EXTRAORDINARY_EXPENSE,
     +                          FA_NET_DEFERRED_DEBIT_BAL,
     +                        DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS),
     +                        DEFERRED_TAX_BASIS, ! TTXDEF
     +                          FA_SL_TAX_DEP, ! TBKDPT(I)
     +                        TAX_PREFERENCE_DEPRECIATION, ! TTXPREFDEP(I)
     +                        ACE_TAX_DEPRECIATION, ! TOTAL_ACE_BOOK_DEP(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_BOOK_DEP, ! TBKDPA(I) write-off adjustment to cumulative book depreciaton
     +                          FA_WO_ADJUSTMENT_2_CUM_AFDC_DEP, ! TAFDPA(I) write_off adj to cumulative afdc dep.
     +                          FA_AFDC_BORROWED, ! TAFDCB(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_AFDC, ! TAFCAJ(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_AFEXP,  ! TAFEXP(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_DEF_TAX, ! TWODFT(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_AFDCF,   ! TAFDCF(I)
     +                          FA_ITC_CREDIT)  
            FED_TAX_CREDIT_PASSED_UP = FED_TAX_CREDIT_PASSED_UP
     +                                 + FA_ITC_CREDIT
C
C ASSETS ADDED BY MIDAS
C
            CALL MODEL_ASSET_INFO(ASSET_YR,CLASS,
     +                            MODEL_ASSET_CLASS_EXISTS,
     +                        CLASS_GPV(2,CLASS_POS),
     +                          FA_CUMULATIVE_BOOK_DEP,
     +                          FA_CASH,FA_CAPITIALIZED,
     +                        INCOME_TAX_DEPRECIATION,
     +                        BOOK_DEPRECIATION,
     +                          FA_AFDC_CASH,
     +                          FA_AFDC_CAPITIALIZED,
     +                        CLASS_CWIP(2,CLASS_POS),
     +                        CWIP_IN_RATE_BASE(2,CLASS_POS),
     +                          FA_CURRENT_TAX_EXPENSES,
     +                        CAPITIALIZED_INTEREST,
     +                          FA_PROPERTY_TAX_GPV,FA_PROPERTY_TAX_NPV,
     +                        ATL_AMORTIZATION,
     +                          FA_EXTRAORDINARY_EXPENSE,
     +                          FA_NET_DEFERRED_DEBIT_BAL,
     +                        DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS),
     +                        DEFERRED_TAX_BASIS, ! TTXDEF
     +                          FA_SL_TAX_DEP, ! TBKDPT(I)
     +                        TAX_PREFERENCE_DEPRECIATION, ! TTXPREFDEP(I)
     +                        ACE_TAX_DEPRECIATION, ! TOTAL_ACE_BOOK_DEP(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_BOOK_DEP, ! TBKDPA(I) write-off adjustment to cumulative book depreciaton
     +                          FA_WO_ADJUSTMENT_2_CUM_AFDC_DEP, ! TAFDPA(I) write_off adj to cumulative afdc dep.
     +                          FA_AFDC_BORROWED, ! TAFDCB(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_AFDC, ! TAFCAJ(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_AFEXP,  ! TAFEXP(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_DEF_TAX, ! TWODFT(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_AFDCF)  ! TAFDCF(I)

C
C DERIVATIVE INFORMATION
C
            PHYS_DERIVATIVES_VAR_REVENUE = 0.
            PHYS_DERIVATIVES_FIX_REVENUE = 0.
            FIN_DERIVATIVES_VAR_REVENUE = 0.
            FIN_DERIVATIVES_FIX_REVENUE = 0.
            PHYS_DERIVATIVES_VAR_EXPENSE = 0.
            PHYS_DERIVATIVES_FIX_EXPENSE = 0.
            FIN_DERIVATIVES_VAR_EXPENSE = 0.
            FIN_DERIVATIVES_FIX_EXPENSE = 0.
c           CALL DERIVATIVE_INFO_ANNAUL(ASSET_YR,CLASS,
c    +                           PHYS_DERIVATIVES_VAR_REVENUE,
c    +                           PHYS_DERIVATIVES_FIX_REVENUE,
c    +                           FIN_DERIVATIVES_VAR_REVENUE,
c    +                           FIN_DERIVATIVES_FIX_REVENUE,
c    +                           PHYS_DERIVATIVES_VAR_EXPENSE,
c    +                           PHYS_DERIVATIVES_FIX_EXPENSE,
c    +                           FIN_DERIVATIVES_VAR_EXPENSE,
c    +                           FIN_DERIVATIVES_FIX_EXPENSE)
c            TOTAL_DERIVATIVE_REVENUE = PHYS_DERIVATIVES_VAR_REVENUE
c     +                                 + PHYS_DERIVATIVES_FIX_REVENUE
c     +                                 + FIN_DERIVATIVES_VAR_REVENUE 
c     +                                 + FIN_DERIVATIVES_FIX_REVENUE
c            TOTAL_DERIVATIVE_EXPENSE = PHYS_DERIVATIVES_VAR_EXPENSE
c     +                                 + PHYS_DERIVATIVES_FIX_EXPENSE
c     +                                 + FIN_DERIVATIVES_VAR_EXPENSE
c     +                                 + FIN_DERIVATIVES_FIX_EXPENSE
C
C DSM INFORMATION
C
            CALL DSM_EXPENSE_INFO(CLASS,DSM_EXPENSE_CLASS_EXISTS,
     +                         DSM_EXPENSE,
     +                         DSM_REBATE,
     +                         OTHER_PURCHASE_POWER_EXPENSE, ! PURCHASE_POWER_EXPENSE,
     +                         SECONDARY_SALES_REVENUES,
     +                         CLASS_BTL_EXPENSES,
     +                         CLASS_BTL_REVENUES,
     +                         DSM_ADJ_CLAUSE_COLLECTIONS,
     +                         DSM_CAPITIAL,
     +                         DSM_CAPACITY,
     +                         DSM_ENERGY,
     +                         DSM_PARTICIPANT_COSTS,
     +                         DSM_UTIL_NON_ELEC_COSTS,
     +                         DSM_THIRD_PARTY_COSTS,
     +                         DSM_OTH_PARTICIPANT_COSTS)
C
            CALL DSM_ASSET_INFO(YR,CLASS,DSM_ASSET_CLASS_EXISTS,
     +                     BOOK_DEPRECIATION,
     +                       DSM_CUM_BOOK_DEP,
     +                       CLASS_GPV(2,CLASS_POS),
     +                       DSM_AFUDC,
     +                       INCOME_TAX_DEPRECIATION,
     +                       DSM_TAX_EXPENSE,
     +                     ATL_AMORTIZATION,
     +                       DSM_DEFERRED_DEBIT,
     +                       DEFERRED_TAX_BASIS,
     +                       DSM_TAX_PREF_DEP,
     +                       RB_DSM_AMORT,
     +                       RB_DSM_DEFERRED_TAX_BASIS,
     +                       RB_DSM_AFUDC,
     +                       RB_DSM_TAX_EXPENSE,
     +                       DSM_REGULATED_BOOK_DEP,
     +                       DSM_REGULATED_TAX_DEP,
     +                       DSM_REGULATED_DEFERRED_DEBIT,
     +                       DSM_REGULATED_NPV,
     +                       DSM_GPV_PROPERTY_TAX,
     +                       DSM_NPV_PROPERTY_TAX,
     +                       DSM_SL_TAX_DEP)
C
            CL_MARKET_PURCHASES = 0.
            CL_MARKET_REVENUES = 0.
            CL_VAR_MARKET_PURCHASES = 0.
            CL_FIXED_MARKET_PURCHASES = 0. 
            CLASS_INC_EMIS_EXPENSE = 0.
            CLASS_INC_EMIS_REVENUE = 0.
            WVPA_EMISSIONS_EXPENSE = 0.
            IF(.NOT. ASSET_ANALYST_ONLY()) THEN
               VOID_INT2 = RETURN_CL_ASSET_CLASS_EXPENSES(CLASS,
     +                               CL_CLASS_EXISTS,
     +                               FUEL_EXPENSE,
     +                               CL_MARKET_PURCHASES, ! PURCHASE_POWER_EXPENSE,
     +                               VARIABLE_EXPENSE,
     +                               FIXED_EXPENSE,
     +                               EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +                               EXPENSE_COLLECT_VIA_BASE_RATES,
     +                               EXPENSE_NOT_COLLECTED_IN_RATES,
     +                               CLASS_BTL_REVENUES,
     +                               CL_MARKET_REVENUES, ! SECONDARY_SALES_REVENUES,
     +                               CLASS_BTL_EXPENSES,
     +                               WHOLESALE_FUEL_EXPENSE,
     +                               WHOLESALE_VOM_EXPENSE,
     +                               ICAP_REVENUES,
     +                               WVPA_EMISSIONS_EXPENSE,
     +                               INC_CAPACITY_SALES_TO_LEVEL_RM,    ! 726
     +                               INC_CAPACITY_PURCHASES_TO_LEVEL_RM)  ! 725
! 092607. VERIFY
               INC_CAPACITY_PURCHASES_TO_LEVEL_RM =
     +               INC_CAPACITY_PURCHASES_TO_LEVEL_RM +
     +                                    CUST_CAP_PURCHASES_TO_LEVEL_RM
               IF(ADD_2_INCOME_STATEMENT == 'T') THEN
                  INC_CAPACITY_SALES_TO_LEVEL_RM =
     +               INC_CAPACITY_SALES_TO_LEVEL_RM +
     +                                        CAPACITY_SALES_TO_LEVEL_RM
                  INC_CAPACITY_PURCHASES_TO_LEVEL_RM =
     +               INC_CAPACITY_PURCHASES_TO_LEVEL_RM +
     +                                    CAPACITY_PURCHASES_TO_LEVEL_RM
               ENDIF
C
               VOID_INT2 = RETURN_ANNUL_DERIV_VARIABLES(CLASS,
     +                                     INT2(0),
     +                                     PHYS_DERIVATIVES_VAR_REVENUE,
     +                                     PHYS_DERIVATIVES_FIX_REVENUE,
     +                                     PHYS_DERIVATIVES_VAR_EXPENSE,
     +                                     PHYS_DERIVATIVES_FIX_EXPENSE,
     +                                     FIN_DERIVATIVES_VAR_REVENUE,
     +                                     FIN_DERIVATIVES_FIX_REVENUE,
     +                                     FIN_DERIVATIVES_VAR_EXPENSE,
     +                                     FIN_DERIVATIVES_FIX_EXPENSE,
     +                                     PHY_DERIV_REVENUE_ENERGY,
     +                                     PHY_DERIV_EXPENSE_ENERGY,
     +                                     FIN_DERIV_REVENUE_ENERGY,
     +                                     FIN_DERIV_EXPENSE_ENERGY)
C
               VOID_LOGICAL = RETURN_FUEL_DERIV_VARIABLES(CLASS,
     +                                   INT2(0),
     +                                   PHY_FUEL_DERIV_VAR_REVENUE,
     +                                   PHY_FUEL_DERIV_FIX_REVENUE,
     +                                   PHY_FUEL_DERIV_VAR_EXPENSE,
     +                                   PHY_FUEL_DERIV_FIX_EXPENSE,
     +                                   FIN_FUEL_DERIV_VAR_REVENUE,
     +                                   FIN_FUEL_DERIV_FIX_REVENUE,
     +                                   FIN_FUEL_DERIV_VAR_EXPENSE,
     +                                   FIN_FUEL_DERIV_FIX_EXPENSE,
     +                                   PHY_FUEL_DERIV_REVENUE_ENERGY,
     +                                   PHY_FUEL_DERIV_EXPENSE_ENERGY,
     +                                   FIN_FUEL_DERIV_REVENUE_ENERGY,
     +                                   FIN_FUEL_DERIV_EXPENSE_ENERGY)
!
! LMP Expense
!               EXP_PURCHASE_POWER_EXPENSE = EXP_PURCHASE_POWER_EXPENSE
!     +                                  + CongestionAnnualExpenes(CLASS) 
     
c               SECONDARY_SALES_REVENUES = SECONDARY_SALES_REVENUES
c     +                                    + CL_MARKET_REVENUES
c     +                                    + EL_MARKET_REVENUES
C
               VOID_LOGICAL = RETURN_CL_ASSET_CLASS_PROD(CLASS,
     +                                            CL_ANN_CLASS_CAPACITY,
     +                                            CL_ANN_CLASS_ENERGY)
C
               VOID_LOGICAL = CLASS_EMISSIONS_CREDITS(CLASS,
     +                                           CLASS_INC_EMIS_EXPENSE,
     +                                           CLASS_INC_EMIS_REVENUE,
     +                                    LEVEL_SUMATION(0,CLASS_LEVEL))
               IF(WVPA()) CLASS_INC_EMIS_EXPENSE =
     +                                            WVPA_EMISSIONS_EXPENSE
C
               CL_INTRA_EXISTS = RETURN_CL_INTRA_CLASS_REVENUES(CLASS,
     +                                         BASE_RATES_REVENUES,
     +                                         CLASS_ADJ_CLAUSE_REVENUE,
     +                                         SECONDARY_SALES_REVENUES,
     +                                         CLASS_OTHER_REVENUE,
     +                                         INTRA_COMPANY_NF_BURN)
C             
               CALL RETURN_AI_ASSET_CLASS_EXPENSES(CLASS,YR,
     +                                     AI_ANNUAL_CLASS_DEP,
     +                                     AI_ANNUAL_CLASS_TAX_DEP,
     +                                     AI_ANNUAL_CLASS_DEFERRED_TAX,
     +                                     AI_ANNUAL_CLASS_PREF_ITEMS,
     +                                     AI_CLASS_CASH,
     +                                     AI_CLASS_EXPENSE,
     +                                     AI_AFUDC_ON_CASH,
     +                                     AI_LAGGED_GPV)
               FA_CASH = FA_CASH + AI_CLASS_CASH
               FIXED_EXPENSE = FIXED_EXPENSE + AI_CLASS_EXPENSE
               AI_CLASS_CWIP(CLASS_POS) = AI_CLASS_CWIP(CLASS_POS) +
     +                                    AI_CLASS_CASH +
     +                                    AI_AFUDC_ON_CASH -
     +                                    AI_LAGGED_GPV
C NUCLEAR FUEL
               VOID_INT2 = RETURN_NUC_CL_ASSET_CLASS_EXPENSES(CLASS,
     +                                   CL_CLASS_EXISTS,
     +                                   OWNED_NF_BURN_CL_RESOURCES,
     +                                   LEASED_NF_BURN_CL_RESOURCES,
     +                                   NF_BURN_IN_RATEBASE,
     +                                   NUC_FUEL_OWNED_BURN,
     +                                   NUC_FUEL_LEASED_BURN,
     +                                   DOE_NUC_FUEL_FEE,
     +                                   NUC_DECOMMISSIONING_COST,
     +                                   DOE_R300_DISPOSAL_COST)
               DOE_NUC_FUEL_FEE = DOE_NUC_FUEL_FEE 
     +                            + DOE_R300_DISPOSAL_COST
               IF(USE_BURN_4_NUC_FUEL_TAX_EXP) THEN
                  LEASOR_NF_TAX_DEP = INTRA_COMPANY_NF_BURN
                  LEASOR_DEFERRED_TAX_BASIS = LEASOR_NF_TAX_DEP -
     +                                              LEASOR_NF_SL_TAX_DEP
               ENDIF
               IF(USE_NF_BURN_4_EXPENSE) THEN
                  LEASOR_DEFERRED_TAX_BASIS = LEASOR_NF_TAX_DEP -
     +                                             INTRA_COMPANY_NF_BURN
                  LEASOR_NF_AMORTIZATION = INTRA_COMPANY_NF_BURN
                  LEASOR_NF_SL_TAX_DEP = INTRA_COMPANY_NF_BURN
               ENDIF
            ENDIF
C
C BEGINNING NUCLEAR FUEL SECTION
C
            OWNED_NF_BURN = OWNED_NF_BURN_EXP_FILE +
     +                      OWNED_NF_BURN_SALES_FILE +
     +                      OWNED_NF_BURN_CL_RESOURCES
            LEASED_NF_BURN = LEASED_NF_BURN_EXP_FILE +
     +                       LEASED_NF_BURN_SALES_FILE +
     +                       LEASED_NF_BURN_CL_RESOURCES
            NUCLEAR_FUEL_LEASE_PAYMENTS = LEASED_NF_BURN_EXP_FILE
     +                                    + LEASED_NF_BURN_SALES_FILE
     +                                    + NUC_FUEL_LEASED_BURN

            NF_SL_DEF_TAX_DEP = NUC_FUEL_OWNED_BURN 
     +                          + OWNED_NF_BURN_EXP_FILE
     +                          + OWNED_NF_BURN_SALES_FILE
     +                          - CATAWBA_BURN_ADJUSTMENT
            IF(USE_BURN_4_NUC_FUEL_TAX_EXP) THEN
               NF_TAX_EXPENSE = LEASED_NF_BURN
     +                          + OWNED_NF_BURN
     +                          - CATAWBA_BURN_ADJUSTMENT ! THIS IS A DUKE PARAMETER
               IF(DOE_FEES_IN_NUC_FUEL_COST) THEN
                  NF_SL_DEF_TAX_DEP = NF_SL_DEF_TAX_DEP
     +                                - DOE_NUC_FUEL_FEE
               ELSE
                  NF_TAX_EXPENSE = NF_TAX_EXPENSE
     +                             + DOE_NUC_FUEL_FEE
               ENDIF
               NF_TAX_DEPRECIATION = LEASOR_NF_TAX_DEP
               NF_DEFERRED_TAX_BASIS = LEASOR_DEFERRED_TAX_BASIS
            ELSE   
               IF(DOE_FEES_IN_NUC_FUEL_COST) THEN
                  NF_TAX_EXPENSE = LEASED_NF_BURN
     +                             + OWNED_NF_BURN
     +                             - NUC_FUEL_OWNED_BURN
                  NF_SL_DEF_TAX_DEP = NF_SL_DEF_TAX_DEP
     +                                - DOE_NUC_FUEL_FEE
               ELSE
                  NF_TAX_EXPENSE = LEASED_NF_BURN
     +                             + DOE_NUC_FUEL_FEE
               ENDIF
               NF_DEFERRED_TAX_BASIS = NF_TAX_DEPRECIATION
     +                                 - NF_SL_DEF_TAX_DEP
     +                                 + LEASOR_DEFERRED_TAX_BASIS
               NF_TAX_DEPRECIATION = NF_TAX_DEPRECIATION
     +                               + LEASOR_NF_TAX_DEP
            ENDIF
            IF(MONTHLY_MIDAS_ACTIVE .AND. 
     +                         YEAR <= LAST_AVAILABLE_MONTHLY_YEAR) THEN
               NF_DEFERRED_TAXES_CR =
     +              MONTHLY_NF_DEFERRED_TAXES_CR(CLASS,YEAR,
     +                                        NORMALIZATION_TAX_RATE,
     +                                        NF_DEFERRED_TAX_BASIS,
     +                                        NF_TAX_DEPRECIATION,
     +                                        LEASOR_NF_TAX_DEP,
     +                                        LEASOR_DEFERRED_TAX_BASIS)
            ELSE
               NF_DEFERRED_TAXES_CR = NORMALIZATION_TAX_RATE *
     +                                             NF_DEFERRED_TAX_BASIS
            ENDIF
C
C END NUC FUEL SECTION
C
            CALL RETURN_ANNUL_EXP_DERIV_VARS(ASSET_YR,CLASS,
     +                                     PHYS_DERIVATIVES_VAR_REVENUE,
     +                                     PHYS_DERIVATIVES_FIX_REVENUE,
     +                                     PHYS_DERIVATIVES_VAR_EXPENSE,
     +                                     PHYS_DERIVATIVES_FIX_EXPENSE,
     +                                     FIN_DERIVATIVES_VAR_REVENUE,
     +                                     FIN_DERIVATIVES_FIX_REVENUE,
     +                                     FIN_DERIVATIVES_VAR_EXPENSE,
     +                                     FIN_DERIVATIVES_FIX_EXPENSE)
C
C
            CLASS_CWIP(2,CLASS_POS) = CLASS_CWIP(2,CLASS_POS)
     +                                + AI_CLASS_CWIP(CLASS_POS)
     +                                + CWIP_BALANCE_ADJ
            CUMULATIVE_GPV_ADJUSTMENTS(CLASS_POS) =
     +                             CUMULATIVE_GPV_ADJUSTMENTS(CLASS_POS)
     +                             - GROSS_VALUE_OF_SOLD_ASSETS
     +                             + AI_LAGGED_GPV
     +                             + Exp_AFDCEquity
     +                             + Exp_AFDCBorrowed
C    +                         + NUC_DECOMMISSIONING_COST
C    +                         + CHANGE_2_DECOMMISSIONING_LIAB
            IF(WVPA()) THEN
               CALL WVPA_SPECIAL_ADDENDUMS(CLASS,YR,
     +                                     EXP_BOOK_DEPRECIATION)
               IF(PARENT_CLASS) THEN
                  VOID_LOGICAL = WVPA_MEMBER_ACCRUED_REVS(
     +                                     WVPA_MEMBER_ACCRUED_REVENUES)
                  CALL WVPA_NON_MEMBER_SALES(YR,
     +                                 SECONDARY_SALES_REVENUES,
     +                                 WVPA_NON_MEMBER_COST_OF_POWER,
     +                                 WVPA_MEMBER_COST_OF_POWER,
     +                                 WVPA_PURCHASE_POWER_EXPENSE_ADJ,
     +                                 WVPA_MEMBER_COST_OF_SERVICES,
     +                                 WVPA_NONMBR_COST_OF_SERVICES)
               ENDIF
            ENDIF
            BOOK_DEPRECIATION = BOOK_DEPRECIATION
     +                          + AI_ANNUAL_CLASS_DEP
     +                          + EXP_BOOK_DEPRECIATION
            INCOME_TAX_DEPRECIATION = INCOME_TAX_DEPRECIATION
     +                                + AI_ANNUAL_CLASS_TAX_DEP
            DEFERRED_TAX_BASIS = DEFERRED_TAX_BASIS
     +                           + AI_ANNUAL_CLASS_DEFERRED_TAX
            TAX_PREFERENCE_DEPRECIATION = TAX_PREFERENCE_DEPRECIATION
     +                                    + AI_ANNUAL_CLASS_PREF_ITEMS

C
C REPLACE MODEL VARIABLE AND FIXED O&M WITH EXPENSE FILE O&M FOR
C  DUKE 8/8/96 M.S.G.
C
            IF(USE_BUDGET_VARIABLE_OM .AND.
     +                                 .NOT. FirstEnergy_Is_Active) THEN
               VARIABLE_EXPENSE = EXP_FILE_VARIABLE_EXPENSE
               FIXED_EXPENSE = EXP_FILE_FIXED_EXPENSE
               IF(USE_BUDGET_FUEL_PURCHASE) THEN
                  FUEL_EXPENSE = EXP_FUEL_EXPENSE
                  OTHER_PURCHASE_POWER_EXPENSE =
     +                                 EXP_PURCHASE_POWER_EXPENSE
     +                                 + TF_OTHER_PURCHASE_POWER_EXPENSE
     +                                 + RC_OTHER_PURCHASE_POWER_EXPENSE !PURCHASE_POWER_EXPENSE,

                  CL_MARKET_PURCHASES = 0.
                  EL_MARKET_PURCHASES = 0.
                  CL_VAR_MARKET_PURCHASES = 0.
                  CL_FIXED_MARKET_PURCHASES = 0. 
               ELSE
                  FUEL_EXPENSE = FUEL_EXPENSE + EXP_FUEL_EXPENSE

                  OTHER_PURCHASE_POWER_EXPENSE =
     +                                 OTHER_PURCHASE_POWER_EXPENSE
     +                                 + EXP_PURCHASE_POWER_EXPENSE
     +                                 + TF_OTHER_PURCHASE_POWER_EXPENSE
     +                                 + RC_OTHER_PURCHASE_POWER_EXPENSE !PURCHASE_POWER_EXPENSE,
               ENDIF
            ELSE
               IF(.NOT. USE_PRODUCTION_MODULE_EXPENSE) THEN
                  VARIABLE_EXPENSE = VARIABLE_EXPENSE +
     +                                         EXP_FILE_VARIABLE_EXPENSE
                  FIXED_EXPENSE = FIXED_EXPENSE + EXP_FILE_FIXED_EXPENSE
                  FUEL_EXPENSE = FUEL_EXPENSE + EXP_FUEL_EXPENSE
c                 PURCHASE_POWER_EXPENSE = PURCHASE_POWER_EXPENSE +
c    +                                        EXP_PURCHASE_POWER_EXPENSE
                  OTHER_PURCHASE_POWER_EXPENSE =
     +                                 OTHER_PURCHASE_POWER_EXPENSE
     +                                 + EXP_PURCHASE_POWER_EXPENSE
     +                                 + TF_OTHER_PURCHASE_POWER_EXPENSE
     +                                 + RC_OTHER_PURCHASE_POWER_EXPENSE !PURCHASE_POWER_EXPENSE,
               ENDIF
            ENDIF
!            IF(FirstEnergy_Is_Active) THEN
!               VARIABLE_EXPENSE = EXP_FILE_VARIABLE_EXPENSE
!               FIXED_EXPENSE = EXP_FILE_FIXED_EXPENSE
!            ENDIF
c            CL_MARKET_PURCHASES =  CL_VAR_MARKET_PURCHASES   ! need the split
c     +                             + CL_FIXED_MARKET_PURCHASES
            VAR_MARKET_PURCHASES = CL_VAR_MARKET_PURCHASES
            FIXED_MARKET_PURCHASES = CL_FIXED_MARKET_PURCHASES
     +                               + EL_MARKET_PURCHASES
            TRANSACT_MARKET_PURCHASES = CL_MARKET_PURCHASES
     +                                  + EL_MARKET_PURCHASES
            TRANSACT_MARKET_REVENUES = CL_MARKET_REVENUES
     +                                 + EL_MARKET_REVENUES
C      
C CLASS EMISSIONS
C
            BTL_EMISSION_CREDIT_EXPENSE = CLASS_INC_EMIS_EXPENSE * 
     +                                  BTL_EMISSION_CREDIT_EXPENSE/100.
            CLASS_INC_EMIS_EXPENSE = CLASS_INC_EMIS_EXPENSE
     +                               + CLASS_EXP_EMIS_EXPENSE
C     +                               + WVPA_EMISSIONS_EXPENSE
            ATL_EMISSION_CREDIT_EXPENSE = CLASS_INC_EMIS_EXPENSE -
     +                                       BTL_EMISSION_CREDIT_EXPENSE
            ADJ_CLAUSE_EXPENSE_ALLOCATION = ATL_EMISSION_CREDIT_EXPENSE*
     +                                ADJ_CLAUSE_EXPENSE_ALLOCATION/100.
            BTL_EMISSION_CREDIT_REVENUE = CLASS_INC_EMIS_REVENUE *
     +                                  BTL_EMISSION_CREDIT_REVENUE/100.
            ATL_EMISSION_CREDIT_REVENUE = CLASS_INC_EMIS_REVENUE -
     +                                       BTL_EMISSION_CREDIT_REVENUE  
            ADJ_CLAUSE_REVENUE_ALLOCATION = ATL_EMISSION_CREDIT_REVENUE*
     +                                ADJ_CLAUSE_REVENUE_ALLOCATION/100.
            EMISSION_CREDIT_EXPENSE = ATL_EMISSION_CREDIT_EXPENSE -
     +                                       ATL_EMISSION_CREDIT_REVENUE
            NET_ADJ_CLAUS_EMIS_AMT = ADJ_CLAUSE_EXPENSE_ALLOCATION -
     +                                     ADJ_CLAUSE_REVENUE_ALLOCATION
            CLASS_BTL_REVENUES = CLASS_BTL_REVENUES +
     +                                BTL_EMISSION_CREDIT_REVENUE  +
C ADD THEN SUBSTRACTED FOR TAXES AND AT THE END OF THE FINANCING LOOP
     +                                CATAWBA_OTHER_NET_REVENUES +
     +                                OTHER_INCOME_AFILLIATES +
     +                                OTHER_INCOME_NET_OF_TAX
            CLASS_BTL_EXPENSES = CLASS_BTL_EXPENSES +
     +                           BTL_EMISSION_CREDIT_EXPENSE +
     +                           BTL_LEASE_INTEREST
            CASH_OTH_ASSET = CASH_OTH_ASSET +
     +                       INVESTMENT_IN_AFILLIATES +
     +                       LOANS_TO_AFILLIATES
C
            STD_RATE(2,CLASS_POS) = STD_INTEREST_RATE
            SALES(2,CLASS_POS) = CLASS_SALES
            IF(LAST_CLASS_LEVEL /= CLASS_LEVEL) THEN
               PIOR_LEVEL_ATL_TAX_DEDUCTIONS =
     +                                  SBU_ATL_TAX_EXPENSE(CLASS_LEVEL)
               PIOR_LEVEL_BTL_TAX_DEDUCTIONS =
     +                                  SBU_BTL_TAX_EXPENSE(CLASS_LEVEL)
               SBU_ATL_TAX_EXPENSE(CLASS_LEVEL) = 0.
               SBU_BTL_TAX_EXPENSE(CLASS_LEVEL) = 0.
            ELSE
               PIOR_LEVEL_BTL_TAX_DEDUCTIONS = 0.
               PIOR_LEVEL_ATL_TAX_DEDUCTIONS = 0.
            ENDIF
            FED_INCOME_TAX_DEDUCTIONS = FED_INCOME_TAX_DEDUCTIONS
     +                                  + DEFERRED_EXPENSE_CASH ! FROM THE ADDENDUM FILE
     +                                  + DD_ATL_CURRENT_TAX_EXPENSE
     +                                  + DD_BTL_CURRENT_TAX_EXPENSE
     +                                  + PIOR_LEVEL_ATL_TAX_DEDUCTIONS
     +                                  + PIOR_LEVEL_BTL_TAX_DEDUCTIONS
C    +                                  + DD_DEFERRED_EXPENSE_CASH
            STATE_INCOME_TAX_DEDUCTIONS = STATE_INCOME_TAX_DEDUCTIONS
     +                                   + DEFERRED_EXPENSE_CASH
     +                                   + DD_ATL_CURRENT_TAX_EXPENSE
     +                                   + DD_BTL_CURRENT_TAX_EXPENSE
     +                                   + PIOR_LEVEL_ATL_TAX_DEDUCTIONS
     +                                   + PIOR_LEVEL_BTL_TAX_DEDUCTIONS
C    +                                    + DD_DEFERRED_EXPENSE_CASH
C
C           CLASS_BTL_REVENUES = CLASS_BTL_REVENUES + NUCL_FUND_RETURN
C
C
C DEFERRED DEBIT STUFF NEEDS TO BE MOVED TO CORRECT LOCATION
C    APPEARS THAT THIS INFO ISN'T USED
C           DDAMTC(2,CLASS_POS) = DDAMTC(2,CLASS_POS) +
C    +                            PARM_AMORTIZATION_ADJUSTMENT +
C    +                            DEFERRED_EXPENSE_AMORT
C           CUM_DEFERRED_EXPENSE_CASH(CLASS_POS)=DEFERRED_EXPENSE_CASH +
C    +                              CUM_DEFERRED_EXPENSE_CASH(CLASS_POS)
C
            NET_DEFERRED_CASH_ADJ = 0.
c           NET_DEFERRED_CASH_ADJ = NET_DEFERRED_CASH_VALUE(YR,
c    +                          NET_DEFERRED_EXPENSE_CASH(0,CLASS_POS),
c    +                          ANNUAL_DEFERRED_CASH_AMORT(0,CLASS_POS))
            CUM_AMORT_ADJUSTMENT(CLASS_POS) = 
     +                                 CUM_AMORT_ADJUSTMENT(CLASS_POS)
     +                                 + PARM_AMORTIZATION_ADJUSTMENT
     +                                 -(CATAWBA_LEVEL_CAP_PAYMENTS +
     +                                   CATAWBA_OTHER_NET_REVENUES)
     +                                 + KEPCO_WC_DEF_MAINT_ENRG_AMORT
     +                                 - NET_DEFERRED_DEBIT_ADJUSTMENT
     +                                 + BTL_AMORTIZATION_EXP
C    +                                 + CS_ISSUE_EXP_AMORT
            GOODWILL(2,CLASS_POS) = GOODWILL(2,CLASS_POS)
     +                              + CUM_GOODWILL_AT(CLASS_POS)
C
            CLASS_REGULATORY_ASSETS = CLASS_REGULATORY_ASSETS
     +                                + CUM_REG_ASSET_ADJ_AT(CLASS_POS)
            FASB_133 = FASB_133 + CUM_FASB133_ADJ_AT(CLASS_POS)
            FASB_109 = FASB_109 + CUM_FASB109_ADJ_AT(CLASS_POS)
C             
            NET_DD_WRITE_OFF_BALANCE = FA_NET_DEFERRED_DEBIT_BAL +
     +                                 NF_DEFERRED_DEBIT_BALANCE
            UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS) =
     +                         UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
     +                         + CUM_DD_UNAMORT_INTR_ADJ_AT(CLASS_POS)
            UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS) =
     +                      UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
     +                      + CUM_DD_UNAMORT_ISSUE_EXP_ADJ_AT(CLASS_POS)
           OTHER_DD_BALANCE(2,CLASS_POS) = OTHER_DD_BALANCE(2,CLASS_POS)
     +                           + DSM_DEFERRED_DEBIT
     +                           - CUM_AMORT_ADJUSTMENT(CLASS_POS)
     +                           + NET_DD_WRITE_OFF_BALANCE
     +                           + NET_DEFERRED_CASH_ADJ
            NET_DD_BALANCE(2,CLASS_POS) = NET_DD_BALANCE(2,CLASS_POS)
c     +                       + DSM_DEFERRED_DEBIT
c     +                       - CUM_AMORT_ADJUSTMENT(CLASS_POS)
c     +                       + NET_DD_WRITE_OFF_BALANCE
c     +                       + NET_DEFERRED_CASH_ADJ
     +                      + GOODWILL(2,CLASS_POS) ! + CUM_GOODWILL_AT(CLASS_POS)
     +                      + CLASS_REGULATORY_ASSETS ! + CUM_REG_ASSET_ADJ_AT(CLASS_POS)
     +                      + FASB_133 ! + CUM_FASB133_ADJ_AT(CLASS_POS)
     +                      + FASB_109 ! + CUM_FASB109_ADJ_AT(CLASS_POS)
     +                      + UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS) ! + CUM_DD_UNAMORT_INTR_ADJ_AT(CLASS_POS)
     +                      + UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
     +                      + OTHER_DD_BALANCE(2,CLASS_POS)
C
            CUM_DD_RATEBASE_ADJUST(CLASS_POS) =
     +                               CUM_DD_RATEBASE_ADJUST(CLASS_POS) +
     +                               NET_DEFERRED_DEBIT_ADJUSTMENT
            DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS) =
     +                          DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS) +
     +                          CUM_DD_RATEBASE_ADJUST(CLASS_POS)
C
            PREFERRED_STOCK_RETIREMENTS = PSRED(YR,CLASS_POS)
            DEBT_FILE_PREFERRED_DIVIDENDS = PSDIV(YR,CLASS_POS)
            LONG_TERM_DEBT_RETIREMENTS = LTDRET(YR,CLASS_POS)
C
            ADJUSTMENT_CLAUSE_REVENUES = CLASS_ADJ_CLAUSE_REVENUE +
     +                             (EXPENSE_COLLECT_VIA_ADJ_CLAUSE +
     +                                  DSM_ADJ_CLAUSE_COLLECTIONS)/
     +                                     (1.- OPREV_TAX_RATE)
C
C
C ASSET SECTION
C
            CUMULATIVE_BOOK_DEP_ADJUSTMENTS(CLASS_POS) =
     +                      CUMULATIVE_BOOK_DEP_ADJUSTMENTS(CLASS_POS)
     +                      - SALVAGE_TRANSACTIONS
     +                      - CUMULATIVE_DEP_ON_SOLD_ASSETS
     +                      + AI_ANNUAL_CLASS_DEP
     +                      + FA_WO_ADJUSTMENT_2_CUM_BOOK_DEP
C    +                      + NUC_DECOMMISSIONING_COST
     +                      + EXP_BOOK_DEPRECIATION
            CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS) = 
     +                      CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS)
     +                      + FA_CUMULATIVE_BOOK_DEP + DSM_CUM_BOOK_DEP
     +                      + CUMULATIVE_BOOK_DEP_ADJUSTMENTS(CLASS_POS)
C
            INCOME_TAX_DEPRECIATION = INCOME_TAX_DEPRECIATION
     +                                + NF_TAX_DEPRECIATION
     +                                + ATL_LEASE_AMORTIZATION
     +                                + BTL_LEASE_AMORTIZATION
            SL_TAX_DEPRECIATION = EA_TAX_BOOK_DEP
     +                            + FA_SL_TAX_DEP
     +                            + LEASOR_NF_SL_TAX_DEP
     +                            + DSM_SL_TAX_DEP
     +                            + ATL_LEASE_AMORTIZATION
     +                            + BTL_LEASE_AMORTIZATION
C            DEFERRED_TAX_BASIS=DEFERRED_TAX_BASIS+NF_DEFERRED_TAX_BASIS
C
            CLASS_NUCLEAR_FUEL_EXPENSE = OWNED_NF_BURN
     +                                   + LEASED_NF_BURN
     +                                   + LEASOR_NF_AMORTIZATION
     +                                   + NUC_DECOMMISSIONING_COST
     +                                   - CATAWBA_ADJUSTMENT
            NUC_FUEL_TOTAL_BURN = NUC_FUEL_OWNED_BURN 
     +                            + OWNED_NF_BURN_EXP_FILE 
     +                            + NUC_FUEL_LEASED_BURN
     +                            + LEASED_NF_BURN_EXP_FILE
     +                            + LEASOR_NF_AMORTIZATION
     +                            - CATAWBA_BURN_ADJUSTMENT
            NF_CASH_EXPENSE = LEASED_NF_BURN
     +                        + OWNED_NF_BURN_SALES_FILE
     +                        + OWNED_NF_BURN_CL_RESOURCES
     +                        - NUC_FUEL_OWNED_BURN
     +                        + DOE_NUC_FUEL_FEE
            NF_NON_CASH_EXPENSE = NUC_FUEL_OWNED_BURN
     +                            + OWNED_NF_BURN_EXP_FILE
     +                            + LEASOR_NF_AMORTIZATION
     +                            + BTL_NUC_FUEL_DECOM_LIABILITY
     +                            + NUC_DECOMMISSIONING_COST
     +                            - CATAWBA_ADJUSTMENT
            OWNED_NF_BURN = LEASOR_NF_AMORTIZATION
     +                      + OWNED_NF_BURN
            IF(DOE_FEES_IN_NUC_FUEL_COST) THEN
               NUC_FUEL_TOTAL_BURN = NUC_FUEL_TOTAL_BURN 
     +                               - DOE_NUC_FUEL_FEE
               NF_NON_CASH_EXPENSE = NF_NON_CASH_EXPENSE
     +                               - DOE_NUC_FUEL_FEE
               OWNED_NF_BURN = OWNED_NF_BURN
     +                         - DOE_NUC_FUEL_FEE
               
            ELSE
               CLASS_NUCLEAR_FUEL_EXPENSE = CLASS_NUCLEAR_FUEL_EXPENSE
     +                                      + DOE_NUC_FUEL_FEE
            ENDIF
C
C MOVED BELOW 12/10/96 TO GET NUC FUEL RATE BASE CORRECT
C
            CUMULATIVE_NUCLEAR_BURN(CLASS_POS) =
     +                              CUMULATIVE_NUCLEAR_BURN(CLASS_POS) +
     +                              NUC_FUEL_TOTAL_BURN
            CUM_RATE_BASE_NUCLEAR_BURN(CLASS_POS) =
     +                           CUM_RATE_BASE_NUCLEAR_BURN(CLASS_POS) +
     +                               NUC_FUEL_OWNED_BURN +
     +                               OWNED_NF_BURN_EXP_FILE -
     +                               CATAWBA_ADJUSTMENT
            CLASS_NET_NF_VALUE(2,CLASS_POS) = 
     +                              CLASS_NET_NF_VALUE(2,CLASS_POS)
     +                              - CUMULATIVE_NUCLEAR_BURN(CLASS_POS)
     +                              + NET_NUCLEAR_FUEL_ADJ(CLASS_POS)
            TRANS_NUKE_FUEL_BAL = NET_NUCLEAR_FUEL_ADJ(CLASS_POS)
            NUC_FUEL_RATE_BASE(2,CLASS_POS) =
     +                           NUC_FUEL_RATE_BASE(2,CLASS_POS)
     +                           - CUM_RATE_BASE_NUCLEAR_BURN(CLASS_POS)
C
            CLASS_GPV(2,CLASS_POS) = CLASS_GPV(2,CLASS_POS) +
     +                             CUMULATIVE_GPV_ADJUSTMENTS(CLASS_POS)
C
C AMEREN ADJUSTMENT TO MARKET SALES AND PURCHASES
C
            CALL RETURN_CLASS_TRANSFR_AMOUNTS(CLASS,
     +                                   R_REV_TRANSFERS_ARE_ACTIVE,
     +                                   R_EXP_TRANSFERS_ARE_ACTIVE,
     +                                   TRANSFR_SECONDAY_REVENUES,
     +                                   TRANSFER_SEC_REV_QUANITIES_MWH,
     +                                   TRANSFR_PURCHASE_FUEL_EXPENSES,
     +                                   TRANSFR_PURCHASE_VOM_EXPENSES,
     +                                   TRANSFR_PUR_EXP_QUANITIES)
C
C DEFERRED FUEL MUST BE CALCUALTED ON THE CLASSES CONTRIBUTION ONLY
C
C
            PURCHASE_POWER_IN_DEFERRED_FUEL = 0.
            IF(USE_PURCHASE_POWER_ACCOUNTING)
     +                              PURCHASE_POWER_IN_DEFERRED_FUEL = 1.
            IF(USE_DEFERRED_FUEL_ACCOUNTING) THEN
               IF(CPL_IS_ACTIVE) THEN
                  CALL CPL_ACCOUNTING_4_DEFERRED_FUEL(CLASS,
     +                                            CPL_FUEL_REVENUES,
     +                                            DEFERRED_FUEL_EXPENSE)
                  ADJUSTMENT_CLAUSE_REVENUES=ADJUSTMENT_CLAUSE_REVENUES
     +                                       + CPL_FUEL_REVENUES
                  DEFERRED_FUEL_EXPENSE = DEFERRED_FUEL_EXPENSE
     +                                    + EXP_DEFERRED_FUEL_EXPENSE
               ELSE
                  DEFERRED_FUEL_EXPENSE = ADJUSTMENT_CLAUSE_REVENUES
     +                          - (FUEL_EXPENSE
     +                            + NUC_FUEL_TOTAL_BURN
     +                            + (TRANSACT_MARKET_PURCHASES
     +                               + OTHER_PURCHASE_POWER_EXPENSE)
     +                                * PURCHASE_POWER_IN_DEFERRED_FUEL)
     +                          + EXP_DEFERRED_FUEL_EXPENSE
               ENDIF
            ELSE   
               DEFERRED_FUEL_EXPENSE = EXP_DEFERRED_FUEL_EXPENSE
            ENDIF
            IF(USE_PGA_ACCOUNTING) THEN
               DEFERRED_PGA_EXPENSE = CLASS_GAS_ADJ_CLAUSE_REVENUE
     +                                - OTHER_EXPENSE_2
            ELSE
               DEFERRED_PGA_EXPENSE = 0.
            ENDIF
            IF(LAST_CLASS_LEVEL /= CLASS_LEVEL) THEN
C              DEFERRED_FUEL_EXPENSE = DEFERRED_FUEL_EXPENSE
C    +                                 + SBU_VARIABLES(393)
C              CLASS_DEFERRED_FUEL_BALANCE = SBU_VARIABLES(392)
C    +                                + DEFERRED_FUEL_BALANCE(CLASS_POS)
c               DEFERRED_FUEL_BALANCE(CLASS_POS) =
c     +                                  DEFERRED_FUEL_BALANCE(CLASS_POS)
c     +                                  - DEFERRED_FUEL_EXPENSE
c     +                                  - SBU_VARIABLES(393)
c               SBU_VARIABLES(393) = 0.
            ELSE
               DEFERRED_FUEL_BALANCE(CLASS_POS) =
     +                                  DEFERRED_FUEL_BALANCE(CLASS_POS)
     +                                  - DEFERRED_FUEL_EXPENSE
               CLASS_DEFERRED_PURCHASE_GAS(CLASS_POS) = 
     +                            CLASS_DEFERRED_PURCHASE_GAS(CLASS_POS)
     +                            - DEFERRED_PGA_EXPENSE
            ENDIF
            CLASS_DEFERRED_FUEL_BALANCE =
     +                                  DEFERRED_FUEL_BALANCE(CLASS_POS)
C
            IF(PARENT_CLASS) THEN
               UNMODELLED_SUBS_OWNED_BY_PARENT =
     +                                   UNMODELLED_SUBS_OWNED_BY_PARENT
     +                                   + SUBSIDIARY_INCOME
     +                                   - SUBSIDIARY_DIVIDEND
               UNMODELED_SUB_DIVIDEND_2_PARENT = 
     +                                   UNMODELED_SUB_DIVIDEND_2_PARENT
     +                                   + SUBSIDIARY_DIVIDEND
               IF(NUM_OF_SUBSIDIARIES > 0) THEN
                  NEW_SUBSIDIARY_INVESTMENT = NEW_SUBSIDIARY_INVESTMENT+
     +                         SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL)
                  SUBSIDIARY_DIVIDEND = SUBSIDIARY_DIVIDEND +
     +                       SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL)
c                 SUB_EARNINGS_2_EXCLUDE = SUBSIDARY_VARIABLES(47) +
c    +                                                 SBU_VARIABLES(47)
                  SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) =
     +                                SUB_EARNINGS_2_COMMON(CLASS_LEVEL)
                  SUBSIDIARY_INCOME = SUBSIDIARY_INCOME +
     +                               SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL)
               ELSE
                  SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) = 0.
               ENDIF

            ELSEIF(SUBSIDIARY_CLASS .and.
     +                        .not. CONSOLIDATING_CLASS(CLASS_POS)) THEN
               NEW_SUBSIDIARY_INVESTMENT = NEW_SUBSIDIARY_INVESTMENT+
     +                         SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL)
               SUBSIDIARY_DIVIDEND = SUBSIDIARY_DIVIDEND +
     +                       SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL)
               SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) =
     +                                SUB_EARNINGS_2_COMMON(CLASS_LEVEL)
               SUBSIDIARY_INCOME = SUBSIDIARY_INCOME +
     +                               SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL)
      IF(APS_ACTIVE) THEN
               IF(CLASS == 41) THEN ! WP
                  SUBSIDIARY_INCOME = SUBSIDIARY_INCOME +
     +                        AGC_2_WP * AGC_EARNINGS_AVAILABLE_2_COMMON
     +                                                 
                  SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) =
     +                             SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) +
     +                        AGC_2_WP * AGC_EARNINGS_AVAILABLE_2_COMMON
                  SUBSIDIARY_DIVIDEND = SUBSIDIARY_DIVIDEND +
     +                                   AGC_2_WP * AGC_COMMON_DIVIDENDS
                  NEW_SUBSIDIARY_INVESTMENT = NEW_SUBSIDIARY_INVESTMENT+
     +                                AGC_2_WP * AGC_COMMON_STOCK_ISSUED
               ELSEIF(CLASS == 31) THEN ! PE
                  SUBSIDIARY_INCOME = SUBSIDIARY_INCOME +
     +                        AGC_2_PE * AGC_EARNINGS_AVAILABLE_2_COMMON
                  SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) =
     +                             SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) +
     +                        AGC_2_PE * AGC_EARNINGS_AVAILABLE_2_COMMON
                  SUBSIDIARY_DIVIDEND = SUBSIDIARY_DIVIDEND +
     +                                   AGC_2_PE * AGC_COMMON_DIVIDENDS
                  NEW_SUBSIDIARY_INVESTMENT = NEW_SUBSIDIARY_INVESTMENT+
     +                                AGC_2_PE * AGC_COMMON_STOCK_ISSUED
               ELSEIF(CLASS == 21) THEN ! MP
                  SUBSIDIARY_INCOME = SUBSIDIARY_INCOME +
     +                        AGC_2_MP * AGC_EARNINGS_AVAILABLE_2_COMMON                         
                  SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) =
     +                             SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) +
     +                        AGC_2_MP * AGC_EARNINGS_AVAILABLE_2_COMMON
                  SUBSIDIARY_DIVIDEND = SUBSIDIARY_DIVIDEND +
     +                                   AGC_2_MP * AGC_COMMON_DIVIDENDS
                  NEW_SUBSIDIARY_INVESTMENT = NEW_SUBSIDIARY_INVESTMENT+
     +                                AGC_2_MP * AGC_COMMON_STOCK_ISSUED
               ENDIF
      ENDIF
            ELSEIF(CONSOLIDATING_CLASS(CLASS_POS)) THEN
               SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL) = 0.
            ENDIF
            SUB_EARNINGS_2_COMMON(CLASS_LEVEL) = 0.
            SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL) = 0.
            SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL) = 0.
C
            INVESTMENT_IN_SUBSIDIARIES(2,CLASS_POS) =
     +                   INVESTMENT_IN_SUBSIDIARIES(1,CLASS_POS)
     +                   + NEW_SUBSIDIARY_INVESTMENT !EQUITY NEEDS FROM PARENT
     +                   + SUBSIDIARY_INCOME
     +                   - SUBSIDIARY_DIVIDEND
     +                   + NEW_SUB_INVESTMENT ! AQUISTION COST OF NEW SUB
     +                   + SUBSIDIARY_INVESTMENT_ADJ
C
C TAX SECTION
C
            CONSTRUCTION_TAX_EXPENSE = NF_CURRENT_TAX_EXPENSE +
     +                                 FA_CURRENT_TAX_EXPENSES +
     +                                 DSM_TAX_EXPENSE

            DEF_TAX_RATEBASE = NORMALIZATION_TAX_RATE *
     +                              (DEF_TAX_RATEBASE
     +                               + DEFERRED_EXPENSE_CASH 
     +                               - DEFERRED_EXPENSE_AMORT)
     +                         + DEFERRED_TAX_ADJUSTMENT
            AFUDC = FA_AFDC_CASH + NF_AFUDC_ON_CASH
     +              + AI_AFUDC_ON_CASH + DSM_AFUDC

            AFUDC_EQUITY = (1.-CLASS_BORROWED_AFUDC_RATE) *
     +                           (AFUDC - FA_AFDC_CASH)
     +                      + FA_AFDC_CASH - FA_AFDC_BORROWED
            AFUDC_BORROWED = AFUDC - AFUDC_EQUITY
     +                       + Exp_AFDCBorrowed
            AFUDC_EQUITY = AFUDC_EQUITY
     +                     + Exp_AFDCEquity
C
            IF(STD_MAX <= 1.) STD_MAX = STD_MAX *
     +                                    (COMMON_STOCK(2,CLASS_POS) +
     +                                     PREFERRED_STOCK(2,CLASS_POS)+
     +                                     LONG_TERM_DEBT(2,CLASS_POS))
C
C MOVED TO LINE 5590 BECAUSE NET_UTILITY_PLANT WASN'T DEFINED FOR CURRENT YEAR-7/29/01 MSG
C
C            LINEC(2,CLASS_POS) = OPREV_IN_LIBS_NEC *
C     +                                 OPERATING_REVENUES(1,CLASS_POS) +
C     +                           NPV_IN_LIBS_NEC *
C     +                                  NET_UTILITY_PLANT(2,CLASS_POS) +
C     +                                                ADDENUM_2_LIBS_NEC
C            ASSETS_NEC = OPREV_IN_ASSETS_NEC *
C     +                          OPERATING_REVENUES(1,CLASS_POS) +
C     +                   NPV_IN_ASSETS_NEC *
C     +                          NET_UTILITY_PLANT(2,CLASS_POS) +
C     +                                              ADDENUM_2_ASSETS_NEC
C            WCCUM(2,CLASS_POS) = ASSETS_NEC - LINEC(2,CLASS_POS)
C            CHANGE_IN_WORKING_CAPITIAL = WCCUM(2,CLASS_POS) -
C     +                                                WCCUM(1,CLASS_POS)
            
C
C OTHER TAXES IS OLD TXSS 
C
            EXTRAORDINARY_EXPENSE = FA_EXTRAORDINARY_EXPENSE
     +                              + NF_EXTRAORDINARY_EXPENSE
c    +                              - BTL_AMORT_OF_BOOK
            NET_OF_TAX_EXEXP = FA_WO_ADJUSTMENT_2_CUM_AFEXP
     +                         + EXTRA_ORDINARY_EXPENSE
            IF(EXTRAORDINARY_EXPENSE /= 0. .OR.
     +                                     BTL_AMORT_OF_BOOK /= 0.) THEN
               NET_OF_TAX_EXEXP  = NET_OF_TAX_EXEXP 
C    +                             - BTL_AMORT_OF_BOOK
     +                             + EXTRAORDINARY_EXPENSE 
     +                             - EXTRAORDINARY_EXPENSE *
     +                           (STATE_TAX_RATE +
     +                             FEDERAL_TAX_RATE*(1.-STATE_TAX_RATE))
            ENDIF
            TOTAL_CAPITIAL(1,CLASS_POS) = COMMON_EQUITY(1,CLASS_POS) +
     +                                    PREFERRED_STOCK(1,CLASS_POS) +
     +                                    LONG_TERM_DEBT(1,CLASS_POS)
            CONVERGED = .FALSE.  
            FUNDS_BALANCE = .TRUE.
            INTEREST = LTDINT(YR,CLASS_POS) +
     +                    1.05* INTEREST_ON_SHORT_TERM_DEBT(1,CLASS_POS)
C
C CALCULATION LOOP STARTS HERE
C
            IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
               IF(PARENT_CLASS .OR. SUBSIDIARY_CLASS) THEN ! CLASS_TYPE(CLASS_POS) /= SBU) THEN
                  CALL CIAC_MONTHLY_AMORTIZATION_CAL(YEAR,CLASS,
     +                               CIAC_CLASS_BALANCE(CLASS_POS),
     +                               CIAC_AMORTIZATION,
     +                               CLASS_LEVEL)
               ELSE
                  CALL CIAC_MONTHLY_AMORTIZATION_CAL(YEAR,CLASS,
     +                                    CIAC_CLASS_BALANCE(CLASS_POS),
     +                                    CIAC_AMORTIZATION,
     +                                    CLASS_LEVEL)
               ENDIF
            ELSE
               IF(PARENT_CLASS .OR. SUBSIDIARY_CLASS) THEN ! CLASS_TYPE(CLASS_POS) /= SBU) THEN
                  CIAC_AMORTIZATION =(CIAC_CLASS_BALANCE(CLASS_POS)
     +                       + CIAC_CASH/2.)*CIAC_AMORTIZATION_RATE/100.
     +                       + CIAC_AMORTIZATION_ADDENDUM
               ELSE   
                  CIAC_AMORTIZATION = (CIAC_CLASS_BALANCE(CLASS_POS) ! THIS IS THE BALANCE CAUSED BY ACTIVITY ONLY AT THE CLASS LEVEL
     +                       + CIAC_CASH/2.)*CIAC_AMORTIZATION_RATE/100.
     +                       + CIAC_AMORTIZATION_ADDENDUM
               ENDIF
            ENDIF
            PARENT_SUB_CIAC_BALANCE(CLASS_POS) =
     +                                PARENT_SUB_CIAC_BALANCE(CLASS_POS)
     +                                + CIAC_CASH - CIAC_AMORTIZATION
            CIAC_CLASS_BALANCE(CLASS_POS) =
     +                                   CIAC_CLASS_BALANCE(CLASS_POS) 
     +                                   + CIAC_CASH - CIAC_AMORTIZATION
            IF(MPS()) THEN
               DEFERRED_TAXES_CR = NORMALIZATION_TAX_RATE *
     +                             (DEFERRED_TAX_BASIS
     +                              - PENSION_EXPENSE_NON_CASH
     +                              + PENSION_EXPENSE_CASH
C     +                              - STORM_EXPENSE_NON_CASH
C     +                              + STORM_EXPENSE_CASH 
C     +                              - VACATION_PAY_NON_CASH
C     +                              + VACATION_PAY_CASH
     +                              + DEFERRED_EXPENSE_CASH
     +                              - DEFERRED_EXPENSE_AMORT
     +                              + ATL_DEF_TAXES)
     +                              + DEFERRED_TAX_ADJUSTMENT
     +                              - ADJUSTMENT_TO_DEFERRED_TAXES
     +                              - CATAWBA_DEFERRED_TAXES_CR
     +                              + EA_DEFERRED_TAXES
            ELSEIF(FirstEnergy_Is_Active) THEN
               DEFERRED_TAXES_CR = NORMALIZATION_TAX_RATE *
     +                             (DEFERRED_TAX_BASIS
     +                              - PENSION_EXPENSE_NON_CASH
     +                              + PENSION_EXPENSE_CASH
     +                              - STORM_EXPENSE_NON_CASH
     +                              + STORM_EXPENSE_CASH
     +                              - VACATION_PAY_NON_CASH
     +                              + VACATION_PAY_CASH
     +                              - ExecBenefitsNonCash
     +                              + ExecBenefitsCash
     +                              - IncentiveCompensationNonCash
     +                              + IncentiveCompensationCash
     +                              + DEFERRED_EXPENSE_CASH
     +                              - DEFERRED_EXPENSE_AMORT
     +                              + ATL_DEF_TAXES)
     +                              + DEFERRED_TAX_ADJUSTMENT
     +                              - ADJUSTMENT_TO_DEFERRED_TAXES
     +                              - CATAWBA_DEFERRED_TAXES_CR
     +                              + EA_DEFERRED_TAXES
            ELSE
               DEFERRED_TAXES_CR = NORMALIZATION_TAX_RATE *
     +                             (DEFERRED_TAX_BASIS
     +                              - PENSION_EXPENSE_NON_CASH
     +                              + PENSION_EXPENSE_CASH
C     +                              - STORM_EXPENSE_NON_CASH
C     +                              + STORM_EXPENSE_CASH 
C     +                              - VACATION_PAY_NON_CASH
C     +                              + VACATION_PAY_CASH
     +                              + DEFERRED_EXPENSE_CASH
     +                              - DEFERRED_EXPENSE_AMORT
     +                              + ATL_DEF_TAXES)
     +                              + DEFERRED_TAX_ADJUSTMENT
     +                              - ADJUSTMENT_TO_DEFERRED_TAXES
     +                              - CATAWBA_DEFERRED_TAXES_CR
     +                              + EA_DEFERRED_TAXES
            ENDIF
            LTD_PS_DEFERRED_TAX_CR = NORMALIZATION_TAX_RATE
     +                               * LTD_PS_DEFERRED_TAX_BASIS
            BTL_DEFERRED_TAXES_DR = BTL_DEFERRED_TAXES_DR
     +                              + NORMALIZATION_TAX_RATE *
     +                                      (FE_NonCashEarningsNonCorp
     +                                       + Mark_to_Market)
            BTL_DEF_TAXES_CR = NORMALIZATION_TAX_RATE *
     +                           BTL_DEF_TAXES_CR
     +                         + BTL_DEFERRED_TAXES_CR
C
C FASB 143 AND CAP X ITEMS
C
            CALL MONTHLY_CAP_X_ADJUSTMENTS(CLASS,YR,
     +                                     CAPX_PENSION_ADJUSTMENT)
            IF(SALT_RIVER_PROJECT()) THEN
               IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
                  CALL MONTHLY_FASB143_CALCULATIONS(CLASS,YR,
     +                          FASB143_ARO_INTEREST_ACCREATION,
     +                          FASB143_LT_LIABILITY_VALUE(1,CLASS_POS),
     +                          FASB143_NET_ASSET_VALUE(1,CLASS_POS),
     +                          FASB143_ARO_CASH_PAYMENTS,
     +                          FASB143_ARO_TRUST_CASH_PAYMENTS)
               ELSE
                  CALL RETURN_FASB_ADDENDUMS(YR,CLASS,
     +                                  NucDecom_Discount_Rate,
     +                                  FASB143_ARO_INTEREST_ACCREATION,
     +                                  FASB143_ARO_CASH_PAYMENTS,
     +                                  FASB143_ARO_TRUST_CASH_PAYMENTS)
                  FASB143_ARO_INTEREST_ACCREATION =
     +                      NucDecom_Discount_Rate/100. *
     +                           FASB143_LT_LIABILITY_VALUE(1,CLASS_POS)
     +                      + FASB143_ARO_INTEREST_ACCREATION
                  FASB143_LT_LIABILITY_VALUE(2,CLASS_POS) =
     +                           FASB143_LT_LIABILITY_VALUE(1,CLASS_POS)
     +                           + FASB143_ARO_INTEREST_ACCREATION
     +                           + ARO_LIABILITY_BAL_ADJ
     +                           - FASB143_ARO_CASH_PAYMENTS
     +                           - FASB143_ARO_TRUST_CASH_PAYMENTS
                  FASB143_NET_ASSET_VALUE(2,CLASS_POS) =
     +                              FASB143_NET_ASSET_VALUE(1,CLASS_POS)
     +                              - NUC_DECOMMISSIONING_COST
     +                              + ARO_NET_ASSETS_BAL_ADJ
               ENDIF
            ELSE
               IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
                  CALL MONTHLY_FASB143_CALCULATIONS(CLASS,YR,
     +                          FASB143_ARO_INTEREST_ACCREATION,
     +                          FASB143_LT_LIABILITY_VALUE(1,CLASS_POS),
     +                          FASB143_NET_ASSET_VALUE(1,CLASS_POS),
     +                          FASB143_ARO_CASH_PAYMENTS,
     +                          FASB143_ARO_TRUST_CASH_PAYMENTS)
               ELSE
                  CALL RETURN_FASB_ADDENDUMS(YR,CLASS,
     +                                  NucDecom_Discount_Rate,
     +                                  FASB143_ARO_INTEREST_ACCREATION,
     +                                  FASB143_ARO_CASH_PAYMENTS,
     +                                  FASB143_ARO_TRUST_CASH_PAYMENTS)
                  FASB143_ARO_INTEREST_ACCREATION =
     +                      NucDecom_Discount_Rate/100. *
     +                           FASB143_LT_LIABILITY_VALUE(1,CLASS_POS)
     +                      + FASB143_ARO_INTEREST_ACCREATION
                  FASB143_LT_LIABILITY_VALUE(2,CLASS_POS) =
     +                           FASB143_LT_LIABILITY_VALUE(1,CLASS_POS)
     +                           + FASB143_ARO_INTEREST_ACCREATION
     +                           + ARO_LIABILITY_BAL_ADJ
     +                           - FASB143_ARO_CASH_PAYMENTS
     +                           - FASB143_ARO_TRUST_CASH_PAYMENTS
                  FASB143_NET_ASSET_VALUE(2,CLASS_POS) =
     +                              FASB143_NET_ASSET_VALUE(1,CLASS_POS)
     +                              + ARO_NET_ASSETS_BAL_ADJ
               ENDIF
            ENDIF
C
            ATL_AMORTIZATION = ATL_AMORTIZATION  !THIS IS AMORT BY THIS CLASS LOWER CLASS AMORT IS ADDED BELOW.
     +                         + PARM_AMORTIZATION_ADJUSTMENT
     +                         + DEFERRED_EXPENSE_AMORT
     +                         + AMORT_DEF_REVENUES
     +                         + FASB143_ARO_INTEREST_ACCREATION
     +                         - CIAC_AMORTIZATION
     +                         - ATL_AMORT_OF_BOOK
C
C
C MOVE THE SBU REVENUES AND EXPENSES TO THE PARENT
C
c           IF(CLASS_TYPE(CLASS_POS) /= SBU .AND.
c    +                    CLASS_TYPE(CLASS_POS) /= REGULATED_GROUP) THEN ! PARENT OR SUB
C MOVED CALCULATION TO READ PARAMETERS 3/15/98
C           CLASS_OTH_LIAB_SALE_ASSETS = CASH_FROM_SALE_OF_ASSETS -
C    +                                   GROSS_VALUE_OF_SOLD_ASSETS +
C    +                                   CUMULATIVE_DEP_ON_SOLD_ASSETS -
C    +                                   ATL_AMORT_OF_BOOK -
C    +                                   BTL_AMORT_OF_BOOK +
C    +                                   ADDEDUM_TO_BOOK_GAIN_LOSS
            IF(AMEREN_IS_ACTIVE .OR. PACIFICORP_IS_ACTIVE) THEN
               IF(R_EXP_TRANSFERS_ARE_ACTIVE) THEN
                  IF(.NOT. USE_BUDGET_FUEL_PURCHASE) THEN
c               FUEL_EXP_TRANSFR_4_POWER_SOLD = TRANSFR_PURCHASE_FUEL_EXPENSES 
c     +                                      - TRANSACT_MARKET_PURCHASES
                     FUEL_EXPENSE_AFTER_TRANSFR = FUEL_EXPENSE
                     FUEL_EXP_TRANSFR_4_POWER_SOLD =
     +                                    TRANSFR_PURCHASE_FUEL_EXPENSES
     +                                    - WHOLESALE_FUEL_EXPENSE
                     REALLOC_PURCHASE_POWER_EXP =
     +                                    TRANSFR_PURCHASE_FUEL_EXPENSES
                     FUEL_EXPENSE = FUEL_EXPENSE_AFTER_TRANSFR
     +                              - WHOLESALE_FUEL_EXPENSE
     +                              + TRANSFR_PURCHASE_FUEL_EXPENSES
                  ELSE
                     REALLOC_PURCHASE_POWER_EXP = 0.
                     FUEL_EXPENSE_AFTER_TRANSFR = FUEL_EXPENSE
                     FUEL_EXP_TRANSFR_4_POWER_SOLD = 0.
                     WHOLESALE_FUEL_EXPENSE = 0.
                     TRANSFR_PURCHASE_FUEL_EXPENSES = 0.
                  ENDIF
                  IF(.NOT.USE_BUDGET_VARIABLE_OM) THEN
                     VARIABLE_EXPENSE_AFTER_TRANSFR = VARIABLE_EXPENSE
                     VARIABLE_EXPENSE = VARIABLE_EXPENSE_AFTER_TRANSFR
     +                                  - WHOLESALE_VOM_EXPENSE
     +                                  + TRANSFR_PURCHASE_VOM_EXPENSES
                     VAR_OM_TRANSFR_AMOUNTS =
     +                                     TRANSFR_PURCHASE_VOM_EXPENSES
     +                                     - WHOLESALE_VOM_EXPENSE
                     AMEREN_VAR_OM_AMOUNTS =
     +                                     TRANSFR_PURCHASE_VOM_EXPENSES
                  ELSE
                     VARIABLE_EXPENSE_AFTER_TRANSFR = VARIABLE_EXPENSE
                     VAR_OM_TRANSFR_AMOUNTS = 0.
                     AMEREN_VAR_OM_AMOUNTS = 0.
                     WHOLESALE_VOM_EXPENSE = 0.
                     TRANSFR_PURCHASE_VOM_EXPENSES = 0.
                  ENDIF
               ENDIF
               IF(R_REV_TRANSFERS_ARE_ACTIVE) THEN
                  SECONDARY_SALES_REV_TRANSFR=TRANSFR_SECONDAY_REVENUES
     +                                       - TRANSACT_MARKET_REVENUES
                  REALLOC_SECONDARY_SALES_REV= TRANSFR_SECONDAY_REVENUES
               ELSE   
                  REALLOC_SECONDARY_SALES_REV= 0.
                  SECONDARY_SALES_REV_TRANSFR = 0.
               ENDIF
               OTHER_SECONDARY_ENRGY_SALES_REV=SECONDARY_SALES_REVENUES
            ELSE
               TRANSFR_SECONDAY_REVENUES = 0.
               TRANSFER_SEC_REV_QUANITIES_MWH = 0.
               TRANSFR_PURCHASE_FUEL_EXPENSES = 0.
               TRANSFR_PURCHASE_VOM_EXPENSES = 0.
               TRANSFR_PUR_EXP_QUANITIES = 0.
               REALLOC_SECONDARY_SALES_REV= 0.
               SECONDARY_SALES_REV_TRANSFR = 0.
               REALLOC_PURCHASE_POWER_EXP = 0.
               FUEL_EXP_TRANSFR_4_POWER_SOLD = 0.
               OTHER_SECONDARY_ENRGY_SALES_REV = 0.
               FUEL_EXPENSE_AFTER_TRANSFR = FUEL_EXPENSE
               VARIABLE_EXPENSE_AFTER_TRANSFR = VARIABLE_EXPENSE
               VAR_OM_TRANSFR_AMOUNTS = 0.
               WHOLESALE_FUEL_EXPENSE = 0.
               WHOLESALE_VOM_EXPENSE = 0.
            ENDIF            
C END OF AMEREN
            SECONDARY_SALES_REVENUES = SECONDARY_SALES_REVENUES
     +                                 + TRANSACT_MARKET_REVENUES
     +                                 + SECONDARY_SALES_REV_TRANSFR
c            SECONDARY_SALES_REVENUES = SECONDARY_SALES_REVENUES
c     +                                 + TRANSACT_MARKET_REVENUES
c            CAPTURED_OPT_METHOD_REVENUES =
c     +                           CUM_CAPTURED_OPT_METHOD_REVS(CLASS_POS)
c 10/1/02            CAPITIALZIED_LEASES(2,CLASS_POS) =
c     +                                CAPITIALZIED_LEASES(1,CLASS_POS)
c     +                                + CAPITIALIZED_LEASE_ADDITIONS
c     +                                - ATL_LEASE_PAYMENTS
c     +                                - BTL_LEASE_PAYMENTS
c     +                                - ATL_LEASE_AMORTIZATION
c     +                                - BTL_LEASE_AMORTIZATION
c     +                                + CAP_LEASES_BAL_ADJ
            IF(LAST_CLASS_LEVEL /= CLASS_LEVEL) THEN
               CALL PASS_LEVEL_2_VARS(VARS_2_PASS,
     +                                   LEVEL_SUMATION(0,CLASS_LEVEL),
     +                                   SBU_VARIABLES)
               DEFERRED_FUEL_BALANCE(CLASS_POS) =
     +                                  DEFERRED_FUEL_BALANCE(CLASS_POS)
     +                                  - DEFERRED_FUEL_EXPENSE
     +                                  - SBU_VARIABLES(393)
               PRIOR_LEVEL_DECOM_FUND_PAYMENTS = SBU_VARIABLES(117)
               PRI_LEVEL_NOT_DECOM_FUND_RETURN = SBU_VARIABLES(235)
               ADJUSTMENT_2_ECONOMIC_ASSETS = SBU_VARIABLES(262) +
     +                                      ADJUSTMENT_2_ECONOMIC_ASSETS
               OPERATING_METHOD_ROLLUP = OPERATING_METHOD_ROLLUP
     +                                   + SBU_VARIABLES(253) ! operating method adjustment
     +                                   + SBU_VARIABLES(496) ! prior year captured revenues
c               CAPTURED_OPT_METHOD_REVENUES = SBU_VARIABLES(496) ! prior year captured revenues
c     +                                    + CAPTURED_OPT_METHOD_REVENUES
               CALL ADD_SBU_REVENUES_AND_EXPENSES(SBU_VARIABLES,
     +                                                         VARIABLE)
C
C VARIABLES TO CHECK
C
               CONSOLIDATED_LOCAL_TAX_ADJ = CONSOLIDATED_LOCAL_TAX_ADJ +
     +                                                 ADJ_2_LOCAL_TAXES
               CHANGE_2_DECOMMISSIONING_LIAB =
     +                      CHANGE_2_DECOMMISSIONING_LIAB +
     +                      SBU_CHANGE_DECOMMISSIONING_LIAB(CLASS_LEVEL)
               SBU_CHANGE_DECOMMISSIONING_LIAB(CLASS_LEVEL) = 0.
C
C VARIABLES USING SPECIFIC SUMMING ARRAYS
C
               ADDENDUM_2_RATE_BASE = ADDENDUM_2_RATE_BASE +
     +                                                     VARIABLE(145)
c              NUCLEAR_FUEL_LEASE_PAYMENTS=NUCLEAR_FUEL_LEASE_PAYMENTS +
c    +                                                     VARIABLE(359)
               CASH_OTH_ASSET = CASH_OTH_ASSET +
     +                                   SBU_CASH_OTH_ASSET(CLASS_LEVEL)
               SBU_CASH_OTH_ASSET(CLASS_LEVEL) = 0.
               DSM_CAPITIAL = DSM_CAPITIAL+SBU_DSM_CAPITIAL(CLASS_LEVEL)
               SBU_DSM_CAPITIAL(CLASS_LEVEL) = 0.
               RETIREE_MEDICAL_PAYMENTS = RETIREE_MEDICAL_PAYMENTS +
     +                         SBU_RETIREE_MEDICAL_PAYMENTS(CLASS_LEVEL)
               SBU_RETIREE_MEDICAL_PAYMENTS(CLASS_LEVEL) = 0.
               ACE_TAX_DEPRECIATION = ACE_TAX_DEPRECIATION +                  
     +                         SUB_SBU_ACE_TAX_DEPRECIATION(CLASS_LEVEL)
               SUB_SBU_ACE_TAX_DEPRECIATION(CLASS_LEVEL) = 0.
               TAX_PREFERENCE_DEPRECIATION=TAX_PREFERENCE_DEPRECIATION +
     +                         SUB_SBU_TAX_PRE_DEPRECIATION(CLASS_LEVEL)
               SUB_SBU_TAX_PRE_DEPRECIATION(CLASS_LEVEL) = 0.
C
C VARIABLES USING OUTPUT DATA SET
C
               UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS) = 
     +                         UNAMORTIZED_INTEREST_BALANCE(2,CLASS_POS)
     +                         + SBU_UNAMORT_DEBIT_INTEREST_BAL           ! 339
               UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS) =
     +                        UNAMORTIZED_ISSUE_EXP_BALANCE(2,CLASS_POS)
     +                        + SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL           ! 339
               CLASS_OTHER_REVENUE = CLASS_OTHER_REVENUE
     +                               + SBU_OTHER_REVENUES ! 3
               BTL_DEF_TAXES_CR = BTL_DEF_TAXES_CR+SBU_BTL_DEF_TAXES_CR ! 902
               BTL_DEFERRED_TAXES_DR = BTL_DEFERRED_TAXES_DR
     +                                 + SBU_BTL_DEF_TAXES_DR ! 903
               NF_DEFERRED_TAXES_CR = NF_DEFERRED_TAXES_CR 
     +                                + SBU_VARIABLES(733)
c               DEFERRED_TAXES_ROLLUP_CR = DEFERRED_TAXES_ROLLUP_CR
c     +                             + SBU_DEFERRED_TAXES_CR ! 682
               DEFERRED_TAXES_CR = DEFERRED_TAXES_CR
     +                             + SBU_DEFERRED_TAXES_CR ! 682
               INTEREST_AMORTIZATION = INTEREST_AMORTIZATION
     +                                 + SBU_VARIABLES(630)  ! roll-up from debits was SBU_VARIABLES(384)
               INTEREST_AMORT_FROM_DEBIT_FILE = SBU_VARIABLES(630)  ! roll-up from debits was SBU_VARIABLES(384)
     +                                  + INTEREST_AMORT_FROM_DEBIT_FILE
               ATL_AMORTIZATION = ATL_AMORTIZATION + SBU_VARIABLES(18)
               FASB143_ARO_INTEREST_ACCREATION = SBU_VARIABLES(638)
     +                                 + FASB143_ARO_INTEREST_ACCREATION
               VARIABLE_OM_AMORT = VARIABLE_OM_AMORT+SBU_VARIABLES(362)
               OTHER_OM_AMORT = OTHER_OM_AMORT + SBU_VARIABLES(439)
               PURCHASE_POWER_AMORT = PURCHASE_POWER_AMORT
     +                                + SBU_VARIABLES(460)
c               EXPENSING_MATRIALS_INVENTORY=EXPENSING_MATRIALS_INVENTORY
c     +                                      + SBU_VARIABLES(718)
c               EXPENSING_GAS_INVENTORY = EXPENSING_GAS_INVENTORY
c     +                                   + SBU_VARIABLES(720)
               ADDENDUM_TO_ITC_AMORTIZATED = -SBU_VARIABLES(50) +
     +                                       ADDENDUM_TO_ITC_AMORTIZATED
               PRIOR_CAUSE_OF_ITC_AMORT = SBU_VARIABLES(475)
               AFUDC = AFUDC_BORROWED + AFUDC_EQUITY
               SECONDARY_SALES_REVENUES = SECONDARY_SALES_REVENUES +
     +                                                  SBU_VARIABLES(2)
c              CAPACITY_SALES_REVENUE = CAPACITY_SALES_REVENUE +
c    +                                                SBU_VARIABLES(380)
               INC_CAPACITY_SALES_TO_LEVEL_RM =
     +                                    INC_CAPACITY_SALES_TO_LEVEL_RM 
     +                                    + SBU_VARIABLES(727)
               CAPACITY_SALES_TO_LEVEL_RM =CAPACITY_SALES_TO_LEVEL_RM 
     +                                     + SBU_VARIABLES(726)
               INC_CAPACITY_PURCHASES_TO_LEVEL_RM =
     +                                INC_CAPACITY_PURCHASES_TO_LEVEL_RM
     +                                + SBU_VARIABLES(728)
               CAPACITY_PURCHASES_TO_LEVEL_RM =
     +                                    CAPACITY_PURCHASES_TO_LEVEL_RM
     +                                    + SBU_VARIABLES(725)
               BOOK_DEPRECIATION = BOOK_DEPRECIATION + SBU_VARIABLES(17)
C              NF_NON_CASH_EXPENSE = NF_NON_CASH_EXPENSE +
C    +                                           SBU_NF_NON_CASH_EXPENSE
               CATAWBA_EXPENSES = CATAWBA_EXPENSES + SBU_VARIABLES(306)
               CATAWBA_CAPACITY_PAYMENTS = CATAWBA_CAPACITY_PAYMENTS +
     +                                                SBU_VARIABLES(248)
               CATAWBA_LEVEL_CAP_PAYMENTS = CATAWBA_LEVEL_CAP_PAYMENTS +
     +                                                SBU_VARIABLES(247)
               CIAC_AMORTIZATION = CIAC_AMORTIZATION + SBU_VARIABLES(19)
               DEFERRED_REVENUES = DEFERRED_REVENUES +
     +                                                 SBU_VARIABLES(32)
               CLASS_BTL_REVENUES = CLASS_BTL_REVENUES +
     +                                                 SBU_VARIABLES(33)
               CLASS_BTL_EXPENSES = CLASS_BTL_EXPENSES +
     +                                                 SBU_VARIABLES(35)
               SUBSIDIARY_INCOME = SUBSIDIARY_INCOME +
     +                                                 SBU_VARIABLES(43)
               NET_OF_TAX_EXEXP = NET_OF_TAX_EXEXP + SBU_VARIABLES(44)
               CLASS_OTH_LIAB_SALE_ASSETS = CLASS_OTH_LIAB_SALE_ASSETS +
     +                       SBU_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_LEVEL)
               SBU_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_LEVEL) = 0.
               CASH_FROM_SALE_OF_ASSETS = CASH_FROM_SALE_OF_ASSETS +
     +                                                SBU_VARIABLES(106)
               CIAC_CASH = CIAC_CASH +  SBU_VARIABLES(113)
               CLASS_LEASED_NFCE = CLASS_LEASED_NFCE+SBU_VARIABLES(358)
               CAPITIALIZED_LEASE_ADDITIONS =
     +                 CAPITIALIZED_LEASE_ADDITIONS + SBU_VARIABLES(114)
C
C LEASE PAYMENTS
C
               ATL_LEASE_PAYMENTS = ATL_LEASE_PAYMENTS +
     +                               SBU_ATL_LEASE_PAYMENTS(CLASS_LEVEL)
C     +                                            SBU_ATL_LEASE_PAYMENTS ! 60
               SBU_ATL_LEASE_PAYMENTS(CLASS_LEVEL) = 0.
               BTL_LEASE_PAYMENTS = BTL_LEASE_PAYMENTS +
     +                               SBU_BTL_LEASE_PAYMENTS(CLASS_LEVEL)
               SBU_BTL_LEASE_PAYMENTS(CLASS_LEVEL) = 0.
               ATL_LEASE_AMORTIZATION = ATL_LEASE_AMORTIZATION +
     +                                                SBU_VARIABLES(352)
               BTL_LEASE_AMORTIZATION = BTL_LEASE_AMORTIZATION +
     +                                                SBU_VARIABLES(353)
               ATL_LEASE_INTEREST = ATL_LEASE_INTEREST
     +                              + SBU_VARIABLES(677)
               BTL_LEASE_INTEREST = BTL_LEASE_INTEREST
     +                              + SBU_VARIABLES(678)
               BTL_AMORTIZATION_IN_EXPENSES =
     +                                    BTL_AMORTIZATION_IN_EXPENSES +
     +                                                SBU_VARIABLES(350)
               NEW_SUBSIDIARY_INVESTMENT = NEW_SUBSIDIARY_INVESTMENT +
     +                                                SBU_VARIABLES(126)
               NEW_SUB_INVESTMENT = NEW_SUB_INVESTMENT +
     +                                                SBU_VARIABLES(399)
               GOODWILL_OF_NEW_SUB_INVESTMENT = SBU_VARIABLES(486)
     +                                  + GOODWILL_OF_NEW_SUB_INVESTMENT
               TOTAL_ACQUISION_COST = TOTAL_ACQUISION_COST
     +                                + SBU_VARIABLES(487)
               DEFERRED_EXPENSE_CASH = DEFERRED_EXPENSE_CASH
     +                                 + SBU_VARIABLES(127)
               FASB143_ARO_CASH_PAYMENTS = FASB143_ARO_CASH_PAYMENTS
     +                                     + SBU_VARIABLES(746)
               FASB143_ARO_TRUST_CASH_PAYMENTS =
     +                                   FASB143_ARO_TRUST_CASH_PAYMENTS
     +                                   + SBU_VARIABLES(747)
               INCOME_TAX_DEPRECIATION = INCOME_TAX_DEPRECIATION
     +                                   + SBU_VARIABLES(130)
               CASH_TIMING_ADJUSTMENTS = CASH_TIMING_ADJUSTMENTS +
     +                                                SBU_VARIABLES(759)
               CHANGE_IN_ACCOUNTS_PAYABLE = CHANGE_IN_ACCOUNTS_PAYABLE
     +                                              + SBU_VARIABLES(406)
               CHANGE_IN_ACCOUNTS_RECEIVABLE =
     +                                     CHANGE_IN_ACCOUNTS_RECEIVABLE
     +                                              + SBU_VARIABLES(407)
C
C RATE BASE SECITON
C
               DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS) =
     +                        DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
     +                        + SBU_DEFERRED_DEBIT_RATEBASE(CLASS_LEVEL)
               SBU_DEFERRED_DEBIT_RATEBASE(CLASS_LEVEL) = 0.
               DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS) =
     +                       DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS)
     +                       + SBU_DEFERRED_CREDIT_RATEBASE(CLASS_LEVEL)
               SBU_DEFERRED_CREDIT_RATEBASE(CLASS_LEVEL) = 0.
c 10/1/02               CAPITIALZIED_LEASES(2,CLASS_POS) = SBU_VARIABLES(92) +
c     +                                CAPITIALZIED_LEASES(2,CLASS_POS)
               CALL SBU_2_PARENT_ADJUSTMENTS(CLASS_POS,.FALSE.)
               CAP_LEASES_BAL_ADJ = CAP_LEASES_BAL_ADJ
     +                              + TOTAL_CAP_LEASES_BAL_ADJ
               TOTAL_CAP_LEASES_BAL_ADJ = 0.
            ELSE
               PRIOR_LEVEL_DECOM_FUND_PAYMENTS = 0.
               PRI_LEVEL_NOT_DECOM_FUND_RETURN = 0.
            ENDIF
C
            CLASS_DEFERRED_FUEL_BALANCE =
     +                                  DEFERRED_FUEL_BALANCE(CLASS_POS)
C
            TOTAL_DERIVATIVE_REVENUE = PHYS_DERIVATIVES_VAR_REVENUE
     +                                 + PHYS_DERIVATIVES_FIX_REVENUE
     +                                 + FIN_DERIVATIVES_VAR_REVENUE
     +                                 + FIN_DERIVATIVES_FIX_REVENUE
C
            TOTAL_DERIVATIVE_EXPENSE = PHYS_DERIVATIVES_VAR_EXPENSE
     +                                 + PHYS_DERIVATIVES_FIX_EXPENSE
     +                                 + FIN_DERIVATIVES_VAR_EXPENSE
     +                                 + FIN_DERIVATIVES_FIX_EXPENSE
C
            TOTAL_FUEL_DERIV_REVENUES = PHY_FUEL_DERIV_VAR_REVENUE
     +                                  + PHY_FUEL_DERIV_FIX_REVENUE
     +                                  + FIN_FUEL_DERIV_VAR_REVENUE
     +                                  + FIN_FUEL_DERIV_FIX_REVENUE
C
            TOTAL_FUEL_DERIV_EXPENSES = FIN_FUEL_DERIV_VAR_EXPENSE
     +                                  + FIN_FUEL_DERIV_FIX_EXPENSE
     +                                  + PHY_FUEL_DERIV_VAR_EXPENSE
     +                                  + PHY_FUEL_DERIV_FIX_EXPENSE
            LEASE_PRINCIPAL_PAYMENTS = ATL_LEASE_PAYMENTS  
     +                                 + BTL_LEASE_PAYMENTS 
            TAX_LEASE_EXPENSE = ATL_LEASE_INTEREST
     +                          + BTL_LEASE_INTEREST
            CAPITIALZIED_LEASES(2,CLASS_POS) =
     +                                CAPITIALZIED_LEASES(1,CLASS_POS)
     +                                + CAPITIALIZED_LEASE_ADDITIONS
c     +                                - ATL_LEASE_PAYMENTS  ! removed 2/4/03 M.S.G
c     +                                - BTL_LEASE_PAYMENTS  ! removed 2/4/03 M.S.G
     +                                - ATL_LEASE_AMORTIZATION
     +                                - BTL_LEASE_AMORTIZATION
     +                                + CAP_LEASES_BAL_ADJ
C
C AMEREN ADJUSTMENTS
C

C
C AMORTIZED O&M FOR DQE 1/25/98
C
C
            AMORTIZATION_EXPENSE = ATL_AMORTIZATION
c    +                             + BTL_AMORTIZATION
     +                             + INTEREST_AMORTIZATION
     +                             + ATL_LEASE_AMORTIZATION
     +                             + BTL_AMORTIZATION_IN_EXPENSES
     +                             + PS_PREM_ISSUE_EXP_AMORT
     +                             + VARIABLE_OM_AMORT
     +                             + OTHER_OM_AMORT
     +                             + PURCHASE_POWER_AMORT
     +                             + EXPENSING_MATRIALS_INVENTORY
     +                             + EXPENSING_GAS_INVENTORY
     +                             + EXPENSING_FUEL_INVENTORY
            IF(PARENT_CLASS .AND. ODEC() .AND. ODEC_NA3_ACTIVE)
     +             OTHER_PURCHASE_POWER_EXPENSE =
     +                                   OTHER_PURCHASE_POWER_EXPENSE
     +                                   + ODEC_NA3_PURCHASE_EXPENSE
            IF(WVPA()) THEN
               PURCHASE_POWER_EXPENSE = TRANSACT_MARKET_PURCHASES
     +                               + OTHER_PURCHASE_POWER_EXPENSE
     +                               + EXP_WVPA_NON_MEMBER_COST_OF_POWER
     +                               + EXP_WVPA_MEMBER_COST_OF_POWER
     +                               + WVPA_PURCHASE_POWER_EXPENSE_ADJ
            ELSE
               PURCHASE_POWER_EXPENSE = TRANSACT_MARKET_PURCHASES
     +                                 + OTHER_PURCHASE_POWER_EXPENSE
c     +                                 + WVPA_NON_MEMBER_COST_OF_POWER
c     +                                 + WVPA_MEMBER_COST_OF_POWER
     +                                 + WVPA_PURCHASE_POWER_EXPENSE_ADJ
            ENDIF
            DEFERRED_EXPENSE_CASH = DEFERRED_EXPENSE_CASH
     +                              + DD_DEFERRED_EXPENSE_CASH
            VARIABLE_EXPENSE_PLUS_AMORT = VARIABLE_EXPENSE
     +                                    + VARIABLE_OM_AMORT
            OTHER_OM_EXPENSE_PLUS_AMORT = OTHER_EXPENSE_1
     +                                    + OTHER_OM_AMORT
     +                                    + EXPENSING_MATRIALS_INVENTORY
            OTHER_OM_TAX_EXPENSE = OTHER_EXPENSE_1
     +                             + EXPENSING_MATRIALS_INVENTORY
            PUR_POWER_EXPENSE_PLUS_AMORT = PURCHASE_POWER_EXPENSE
     +                                     + PURCHASE_POWER_AMORT
            FUEL_EXPENSE_PLUS_AMORT = FUEL_EXPENSE
     +                                + EXPENSING_FUEL_INVENTORY
            PURCHASE_GAS_EXPENSE_PLUS_AMORT = PURCHASED_GAS
     +                                        + EXPENSING_GAS_INVENTORY
C           CUMULATIVE_NUCLEAR_BURN(CLASS_POS) =
C    +                              CUMULATIVE_NUCLEAR_BURN(CLASS_POS) +
C    +                              NUC_FUEL_TOTAL_BURN
C           CLASS_NET_NF_VALUE(2,CLASS_POS) = 
C    +                                CLASS_NET_NF_VALUE(2,CLASS_POS) -
C    +                                CUMULATIVE_NUCLEAR_BURN(CLASS_POS)
C           NUC_FUEL_RATE_BASE(2,CLASS_POS) =
C    +                                NUC_FUEL_RATE_BASE(2,CLASS_POS) -
C    +                                CUMULATIVE_NUCLEAR_BURN(CLASS_POS)
C           CLASS_GPV(2,CLASS_POS) = CLASS_GPV(2,CLASS_POS) +
C    +                             CUMULATIVE_GPV_ADJUSTMENTS(CLASS_POS)
            CUM_DEF_REVENUES(2,CLASS_POS)=CUM_DEF_REVENUES(1,CLASS_POS)
     +                        + DEFERRED_REVENUES
     +                        - AMORT_DEF_REVENUES
     +                        + WVPA_MEMBER_ACCRUED_REVENUES
     +                        + CASH_TO_ACCRD_MBR_REVENUES_BAL
c            CLASS_GPV(2,CLASS_POS) = CLASS_GPV(2,CLASS_POS)
c     +                             + Exp_AFDCEquity
c     +                             + Exp_AFDCBorrowed
            CIAC_BALANCE(2,CLASS_POS) = CIAC_BALANCE(1,CLASS_POS) +
     +                                     CIAC_CASH - CIAC_AMORTIZATION
            OTHER_ASSETS(2,CLASS_POS) = OTHER_ASSETS(1,CLASS_POS)
     +                                  + CASH_OTH_ASSET 
     +                                  + Mark_to_Market
     +                                  + FE_NonCashEarningsNonCorp
            PENSION_LIABILITY(2,CLASS_POS) =
     +                                  PENSION_LIABILITY(1,CLASS_POS)
     +                                  + PENSION_EXPENSE_NON_CASH
     +                                  - PENSION_EXPENSE_CASH
     +                                  + CAPX_PENSION_ADJUSTMENT
            STORM_RESERVE_BALANCE(2,CLASS_POS) =
     +                              STORM_RESERVE_BALANCE(1,CLASS_POS)
     +                              + STORM_EXPENSE_NON_CASH
     +                              - STORM_EXPENSE_CASH 
            ExecBenefitsBalance(2,CLASS_POS) = 
     +                                  ExecBenefitsBalance(1,CLASS_POS)
     +                                  + ExecBenefitsNonCash
     +                                  - ExecBenefitsCash
            IncentiveCompBalance(2,CLASS_POS) =
     +                                 IncentiveCompBalance(1,CLASS_POS)
     +                                 + IncentiveCompensationNonCash
     +                                 - IncentiveCompensationCash
            ACCRUED_VACATION_PAY_BALANCE(2,CLASS_POS) =
     +                       ACCRUED_VACATION_PAY_BALANCE(1,CLASS_POS)
     +                       + VACATION_PAY_NON_CASH
     +                       - VACATION_PAY_CASH
C
            CALL RETURN_FUNDS_EARNINGS_ADDENDUMS(YR,CLASS,
     +                                  ADJ_2_EARNINGS_DECOM_FUND,
     +                                  ADJ_2_EARNINGS_POST_RETIREMENT,
     +                                  ADJ_2_EARNINGS_ST_INVESTMENTS,
     +                                  ADJ_2_EARNINGS_LT_INVESTMENTS)
            IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
               CALL MONTHLY_FUNDS_EARNINGS_CALCULATIONS(CLASS,YEAR,
     +                          CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS),
     +                          NUCL_FUND_RETURN,
     +                          OCI_NUCL_FUND_RETURN,
     +                          NET_OF_TAX_NUCL_FUND_RETURN,
     +                          POST_RETIREMENT_MEDICAL_FUND(CLASS_POS),
     +                          RETIREMENT_MEDICAL_FUND_RETURN,
     +                          OCI_RETIREMENT_MEDICAL_FUND_RETURN)
            ELSE   
               FEDERAL_EPA_92_TAX_RATE = .20
C            
               NUCL_FUND_RETURN = (DECOM_FUND_FIRST_HALF_RATE *        ! NUCL_DECOM_FUND_RETURN *
     +                              CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS)
     +                         + DECOM_FUND_SECOND_HALF_RATE *
     +                             (CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS)
     +                              + NUCL_DECOM_FUND))/2.
               OCI_NUCL_FUND_RETURN = (OCI_DECOM_FUND_FIRST_HALF_RATE *        ! NUCL_DECOM_FUND_RETURN *
     +                              CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS)
     +                         + OCI_DECOM_FUND_SECOND_HALF_RATE *
     +                             (CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS)
     +                              + NUCL_DECOM_FUND))/2.
               IF(SALT_RIVER_PROJECT()) FEDERAL_EPA_92_TAX_RATE = 0.
               NET_OF_TAX_NUCL_FUND_RETURN = (1. -
     +                    FEDERAL_EPA_92_TAX_RATE*(1.-STATE_TAX_RATE)) *
     +                   (NUCL_FUND_RETURN + OCI_NUCL_FUND_RETURN)
     +                      + ADJ_2_EARNINGS_DECOM_FUND
               RETIREMENT_MEDICAL_FUND_RETURN =                            ! RETURN_RETIREMENT_MEDICAL_FUND *
     +                     (RETIREMENT_FUND_FIRST_HALF_RATE *
     +                           POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +                      + RETIREMENT_FUND_SECND_HALF_RATE *
     +                          (POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +                           + RETIREMENT_MEDICAL_PAYMENTS
     +                           + CASH_TO_POST_RETIRE_MEDICAL_BAL
     +                           - RETIREE_MEDICAL_PAYMENTS))/2.
     +                     + ADJ_2_EARNINGS_POST_RETIREMENT
               OCI_RETIREMENT_MEDICAL_FUND_RETURN =                            ! RETURN_RETIREMENT_MEDICAL_FUND *
     +                     (OCI_RETIREMENT_FUND_FIRST_HALF_RATE *
     +                           POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +                      + OCI_RETIREMENT_FUND_SECND_HALF_RATE *
     +                          (POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +                           + RETIREMENT_MEDICAL_PAYMENTS
     +                           + CASH_TO_POST_RETIRE_MEDICAL_BAL
     +                           - RETIREE_MEDICAL_PAYMENTS))/2.
            ENDIF
C
C NUCLEAR DECOMMISSIONING FUNDS BALANCES
C
            CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS) =
     +                              CLASS_NUC_DECOM_TRUST_BAL(CLASS_POS)
     +                              + NUCL_DECOM_FUND
     +                              + NET_OF_TAX_NUCL_FUND_RETURN
            NUCL_DECOM_FUND = NUCL_DECOM_FUND +
     +                                   PRIOR_LEVEL_DECOM_FUND_PAYMENTS
            SBU_VARIABLES(117) = 0.
            NET_OF_TAX_NUCL_FUND_RETURN = NET_OF_TAX_NUCL_FUND_RETURN
     +                                 + PRI_LEVEL_NOT_DECOM_FUND_RETURN
            SBU_VARIABLES(235) = 0.
            IF(IP_IS_ACTIVE) THEN
               FED_INCOME_TAX_DEDUCTIONS = FED_INCOME_TAX_DEDUCTIONS +
     +                                                   NUCL_DECOM_FUND
               STATE_INCOME_TAX_DEDUCTIONS=STATE_INCOME_TAX_DEDUCTIONS +
     +                                                   NUCL_DECOM_FUND
            ENDIF
C               NUCL_DECOM_FUND = NUCL_DECOM_FUND + 
C    +                                       NET_OF_TAX_NUCL_FUND_RETURN
            NUC_DECOM_FUND_BAL(2,CLASS_POS) =
     +                                   NUC_DECOM_FUND_BAL(1,CLASS_POS)
     +                                   + NUCL_DECOM_FUND
     +                                   + NET_OF_TAX_NUCL_FUND_RETURN
     +                                   + NUCLEAR_DECOM_FUND_BAL_ADJ
C
C
C POST RETIREMENT MEDICAL BALANCES
C
            BOY_POST_RETIRE_MEDICAL_FUND =
     +                           POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
            POST_RETIREMENT_MEDICAL_FUND(CLASS_POS) =
     +                           POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +                           + RETIREMENT_MEDICAL_PAYMENTS
     +                           - RETIREE_MEDICAL_PAYMENTS
     +                           + CASH_TO_POST_RETIRE_MEDICAL_BAL
     +                           + POST_RETIRE_MEDICAL_BAL_ADJ
     +                           + OCI_RETIREMENT_MEDICAL_FUND_RETURN
            IF(SALT_RIVER_PROJECT() .OR.
     +                           RETAIN_POST_RETIREMENT_EARNINGS()) THEN   ! ADD A RETAIN EARNINGS SWITCH HERE
               POST_RETIREMENT_MEDICAL_FUND(CLASS_POS) =
     +                           POST_RETIREMENT_MEDICAL_FUND(CLASS_POS)
     +                           + RETIREMENT_MEDICAL_FUND_RETURN
            ENDIF 
            BOY_POST_RETIRE_MED_PAYABLE =
     +                            POST_RETIREMENT_MED_PAYABLE(CLASS_POS)
            POST_RETIREMENT_MED_PAYABLE(CLASS_POS) =
     +                            POST_RETIREMENT_MED_PAYABLE(CLASS_POS)
     +                            + RETIREMENT_MEDICAL_PAYMENTS
     +                            - RETIREE_MEDICAL_PAYMENTS
C
C
C
            USE_ACTUAL_STATE_TAXES = .FALSE.
            USE_ACTUAL_FEDERAL_TAXES = .FALSE.
            USE_ACTUAL_DEFERRED_TAXES_CR = .FALSE.
            USE_ACTUAL_DEFERRED_TAXES_DR = .FALSE.
            USE_ACTUAL_BTL_DEF_TAXES_DR = .FALSE.
            USE_ACTUAL_BTL_DEF_TAXES_CR = .FALSE. 
C            IF(MONTHLY_MIDAS_ACTIVE .AND. 
C     +                         YEAR <= LAST_AVAILABLE_MONTHLY_YEAR) THEN
               CALL RETURN_MONTHLY_ACTUAL_TAXES(YR,CLASS,
     +                                     ANNUAL_STATE_INCOME_TAX,
     +                                     USE_ACTUAL_STATE_TAXES,
     +                                     ANNUAL_FEDERAL_INCOME_TAX,
     +                                     USE_ACTUAL_FEDERAL_TAXES,
     +                                     ACTUAL_DEFERRED_TAXES_DR,
     +                                     USE_ACTUAL_DEFERRED_TAXES_DR,
     +                                     ACTUAL_DEFERRED_TAXES_CR,
     +                                     USE_ACTUAL_DEFERRED_TAXES_CR,
     +                                     ACTUAL_BTL_DEF_TAXES_DR,
     +                                     USE_ACTUAL_BTL_DEF_TAXES_DR,
     +                                     ACTUAL_BTL_DEF_TAXES_CR,
     +                                     USE_ACTUAL_BTL_DEF_TAXES_CR)

               IF(USE_ACTUAL_DEFERRED_TAXES_CR) THEN
                  DEFERRED_TAXES_CR = ACTUAL_DEFERRED_TAXES_CR
     +                                - LTD_PS_DEFERRED_TAX_CR 
     +                                - NF_DEFERRED_TAXES_CR
               ENDIF
               IF(USE_ACTUAL_BTL_DEF_TAXES_CR) THEN
                  BTL_DEF_TAXES_CR = ACTUAL_BTL_DEF_TAXES_CR
               ENDIF
C            ENDIF
c            DEFERRED_TAXES_CR = DEFERRED_TAXES_ROLLUP_CR
c     +                          + LTD_PS_DEFERRED_TAX_CR
c     +                          + NF_DEFERRED_TAXES_CR
            TOTAL_DEF_TAXES_CR = DEFERRED_TAXES_CR
     +                           + BTL_DEF_TAXES_CR
     +                           + LTD_PS_DEFERRED_TAX_CR
     +                           + NF_DEFERRED_TAXES_CR
            DEF_TAX_CR_BALANCE(2,CLASS_POS) = TOTAL_DEF_TAXES_CR +
     +                                ADJUSTMENT_2_DEFERRED_TAXES_BAL +
     +                                DEF_TAX_CR_BALANCE(1,CLASS_POS)
            NET_UTILITY_PLANT(2,CLASS_POS) = CLASS_GPV(2,CLASS_POS) +
     +                      CLASS_CWIP(2,CLASS_POS) -
     +                      CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS) +
     +                      CLASS_NET_NF_VALUE(2,CLASS_POS)
C
C FUNDS FLOW SECTION
C
            TOTAL_ACQUISION_COST = NEW_SUB_INVESTMENT
     +                             + GOODWILL_OF_NEW_SUB_INVESTMENT
            COMMON_ISSUED_4_ACQUISITION = 0.
            IF(TOTAL_ACQUISION_COST > 0. .AND. CCN()) THEN
               ACQUISITION_MO = 1
               ACQUISITION_EXPENSE = .025*TOTAL_ACQUISION_COST
               OTHER_EXPENSE_3 = OTHER_EXPENSE_3
     +                           + ACQUISITION_EXPENSE
               COMMON_ISSUED_4_ACQUISITION = EQRATO *
     +                                           (TOTAL_ACQUISION_COST
     +                                            + ACQUISITION_EXPENSE)
               IF(CSUNIT /= 0.0) COMMON_ISSUED_4_ACQUISITION = CSUNIT *
     +                 AINT(0.0001 + COMMON_ISSUED_4_ACQUISITION/CSUNIT)
               IF(CSMIN > 0. .AND. COMMON_ISSUED_4_ACQUISITION < CSMIN)
     +                               COMMON_ISSUED_4_ACQUISITION = CSMIN
               COMMON_EQUITY(1,CLASS_POS) = COMMON_EQUITY(1,CLASS_POS)
     +                                     + COMMON_ISSUED_4_ACQUISITION
c               COMMON_STOCK(1,CLASS_POS) = COMMON_STOCK(1,CLASS_POS)  
c     +                                     + COMMON_ISSUED_4_ACQUISITION
               PREFERRED_ISSUED_4_ACQUISITION = PSRATO * 
     +                                           (TOTAL_ACQUISION_COST
     +                                            + ACQUISITION_EXPENSE)
               IF(PSUNIT /= 0.) PREFERRED_ISSUED_4_ACQUISITION = PSUNIT*
     +              AINT(0.0001 + PREFERRED_ISSUED_4_ACQUISITION/PSUNIT)
               DEBT_ISSUED_4_ACQUISITION = TOTAL_ACQUISION_COST
     +                                  + ACQUISITION_EXPENSE
     +                                  - COMMON_ISSUED_4_ACQUISITION
     +                                  - PREFERRED_ISSUED_4_ACQUISITION
               IF(LDUNIT /= 0.) DEBT_ISSUED_4_ACQUISITION = LDUNIT *
     +                   AINT(0.0001 + DEBT_ISSUED_4_ACQUISITION/LDUNIT)
               DOWHILE ((COMMON_ISSUED_4_ACQUISITION
     +                  + PREFERRED_ISSUED_4_ACQUISITION
     +                  + DEBT_ISSUED_4_ACQUISITION) <
     +                                          (TOTAL_ACQUISION_COST
     +                                           + ACQUISITION_EXPENSE))
                  COMMON_ISSUED_4_ACQUISITION = CSUNIT
     +                                     + COMMON_ISSUED_4_ACQUISITION
                  IF((COMMON_ISSUED_4_ACQUISITION
     +                + PREFERRED_ISSUED_4_ACQUISITION
     +                + DEBT_ISSUED_4_ACQUISITION) >=
     +                           (TOTAL_ACQUISION_COST
     +                                      + ACQUISITION_EXPENSE)) EXIT
                  PREFERRED_ISSUED_4_ACQUISITION = PSUNIT
     +                                  + PREFERRED_ISSUED_4_ACQUISITION
                  IF((COMMON_ISSUED_4_ACQUISITION
     +                + PREFERRED_ISSUED_4_ACQUISITION
     +                + DEBT_ISSUED_4_ACQUISITION) >=
     +                           (TOTAL_ACQUISION_COST
     +                                      + ACQUISITION_EXPENSE)) EXIT
                  DEBT_ISSUED_4_ACQUISITION = LDUNIT
     +                                       + DEBT_ISSUED_4_ACQUISITION
               ENDDO
               SINKING_FUND_PAYMENT = DEBT_ISSUED_4_ACQUISITION * LDSINK
               CALL MONTHLY_LTD_ADDITIONS_ALL_YEAR(ACQUISITION_MO,
     +                                        YR,CLASS,
     +                                        DEBT_ISSUED_4_ACQUISITION,
     +                                        LTDRTE,
     +                                        SINKING_FUND_PAYMENT,
     +                                        LTD_SINKING_FUND_LAG,
     +                                        ANNINT(0,CLASS_POS),
     +                                        ANN_LTD_INT(0,CLASS_POS))
               DEBT_FILE_LTD_ISSUED = DEBT_FILE_LTD_ISSUED
     +                                + DEBT_ISSUED_4_ACQUISITION
               LTDINT(YR,CLASS_POS) = LTDINT(YR,CLASS_POS)
     +                                + DEBT_ISSUED_4_ACQUISITION *
     +                                 (13.-FLOAT(ACQUISITION_MO))/12. *
     +                                  LTDRTE
            ENDIF
C
C 
C
            MONTHLY_COMMON_SHARES_ACTIVE = .FALSE.
            IF(MONTHLY_MIDAS_ACTIVE .or. .true.) THEN
               IF(DEBT_COMMON_STOCK_ISSUED /= 0. .OR.
     +                DEBT_COMMON_STOCK_BUYBACK /= 0. .OR.
     +                       DEBT_COMMON_SHARES_ISSUED /= 0. .OR.
     +                         COMMON_ISSUED_4_ACQUISITION /= 0. .OR.
     +                            DEBT_COMMON_SHARES_BUYBACK /= 0.) THEN
                  MONTHLY_COMMON_SHARES_ACTIVE = .TRUE.
                  CSMIN = MAX(CSMIN,(DEBT_COMMON_STOCK_ISSUED
     +                                   + COMMON_ISSUED_4_ACQUISITION))
                  CSMIN = CSMIN - DEBT_COMMON_STOCK_BUYBACK
                  IF(CSMIN < 0.) THEN
                     CSMAX = CSMIN
                  ELSE
                     CSMAX = MAX(CSMIN,CSMAX)
                  ENDIF
               ENDIF
            ENDIF
            CASH_4_INVESTMENTS = FA_CASH
     +                           + NF_CASH
     +                           - CAPX_PENSION_ADJUSTMENT
     +                           + DSM_CAPITIAL
     +                           + CASH_OTH_ASSET
     +                           + NEW_SUBSIDIARY_INVESTMENT
     +                           - SUBSIDIARY_DIVIDEND
     +                           + SALVAGE_TRANSACTIONS 
     +                           - CIAC_CASH
     +                           + CAPITIALIZED_LEASE_ADDITIONS
     +                           + NEW_SUB_INVESTMENT
     +                           + GOODWILL_OF_NEW_SUB_INVESTMENT

C
C INCOME STATEMENT 
C
C
C UNDER CONSTRUCTION
C
            POWER_AGENCY_OWNED_COST = 0.
C            CASH_ADDITIONS_2_FUEL_INVENTORY = 0.
C            AMORTIZATION_OF_FUEL_INVENTORY = 0.
            FUEL_INVENTORY(CLASS_POS) = FUEL_INVENTORY(CLASS_POS)
     +                                 + CASH_ADDITIONS_2_FUEL_INVENTORY
     +                                 - EXPENSING_FUEL_INVENTORY
            CLASS_MATERIALS_N_SUPPLIES(CLASS_POS) =
     +                             CLASS_MATERIALS_N_SUPPLIES(CLASS_POS)
     +                             + CASH_ADDS_2_MATRIALS_INVENTORY
     +                             - EXPENSING_MATRIALS_INVENTORY
            CLASS_GAS_STORAGE(CLASS_POS) = CLASS_GAS_STORAGE(CLASS_POS)
     +                                     + CASH_ADDS_2_GAS_INVENTORY
     +                                     - EXPENSING_GAS_INVENTORY
     
            CASH_ADDS_2_INVENTORIES = CASH_ADDITIONS_2_FUEL_INVENTORY
     +                                + CASH_ADDS_2_MATRIALS_INVENTORY
     +                                + CASH_ADDS_2_GAS_INVENTORY
            
C           IF(USE_DEFERRED_FUEL_ACCOUNTING) THEN
C              IF(CPL_IS_ACTIVE) THEN
C                 CALL CPL_ACCOUNTING_4_DEFERRED_FUEL(CLASS,
C    +                                            CPL_FUEL_REVENUES,
C    +                                            DEFERRED_FUEL_EXPENSE)
C                 ADJUSTMENT_CLAUSE_REVENUES=ADJUSTMENT_CLAUSE_REVENUES
C    +                                       + CPL_FUEL_REVENUES
C              ELSE
C                 DEFERRED_FUEL_EXPENSE=ADJUSTMENT_CLAUSE_REVENUES
C    +                               - (FUEL_EXPENSE +
C    +                                  NUC_FUEL_TOTAL_BURN +
C    +                                  PURCHASE_POWER_EXPENSE *
C    +                                  PURCHASE_POWER_IN_DEFERRED_FUEL)
C              ENDIF
C           ELSE   
C              DEFERRED_FUEL_EXPENSE = 0.
C           ENDIF
C           DEFERRED_FUEL_BALANCE(CLASS_POS) =
C    +                                DEFERRED_FUEL_BALANCE(CLASS_POS) -
C    +                                DEFERRED_FUEL_EXPENSE
            IF(LAST_CLASS_LEVEL /= CLASS_LEVEL) THEN
C              DEFERRED_FUEL_EXPENSE = DEFERRED_FUEL_EXPENSE
C    +                                 + SBU_VARIABLES(393)
C              CLASS_DEFERRED_FUEL_BALANCE = SBU_VARIABLES(392)
C    +                                + DEFERRED_FUEL_BALANCE(CLASS_POS)
            ENDIF
C NON-CASH EXPENSES
            TOTAL_NON_CASH_EXPENSES = BOOK_DEPRECIATION
     +                                + ATL_AMORTIZATION
     +                                + NF_NON_CASH_EXPENSE
     +                                - BTL_NUC_FUEL_DECOM_LIABILITY
     +                                - CATAWBA_LEVEL_CAP_PAYMENTS
     +                                + ATL_LEASE_AMORTIZATION
     +                                + VARIABLE_OM_AMORT
     +                                + OTHER_OM_AMORT
     +                                + PURCHASE_POWER_AMORT
     +                                + DEFERRED_FUEL_EXPENSE
     +                                + VACATION_PAY_NON_CASH
     +                                + PENSION_EXPENSE_NON_CASH
C     +                                - PENSION_EXPENSE_CASH
     +                                + STORM_EXPENSE_NON_CASH
     +                                + EXPENSING_MATRIALS_INVENTORY
     +                                + EXPENSING_GAS_INVENTORY
     +                                + EXPENSING_FUEL_INVENTORY
     +                                + ExecBenefitsNonCash
     +                                + IncentiveCompensationNonCash
C
C CASH EXPENSES
C
            IF(WVPA() .and. .false.) THEN
               SERVICE_TRANSACTION_EXPENSE = SERVICE_TRANSACTION_EXPENSE
c     +                                       + EXP_SERVICE_TRANSACTIONS
     +                                + WVPA_MEMBER_COST_OF_SERVICES
     +                                + WVPA_NONMBR_COST_OF_SERVICES
            ELSE
               SERVICE_TRANSACTION_EXPENSE = SERVICE_TRANSACTION_EXPENSE
     +                                       + EXP_SERVICE_TRANSACTIONS
            ENDIF
C           OTHER_EXPENSE_2 = OTHER_EXPENSE_2 +
C    +                                   KEPCO_WC_CURENT_MAINT_ENRG_COST
            CALL SUM_CASH_EXPENSES(TOTAL_CASH_EXPENSES)
            CLASS_NON_VARIABLE_EXPENSE = FIXED_EXPENSE
     +                              + INC_CAPACITY_PURCHASES_TO_LEVEL_RM
     +                                   + OTHER_EXPENSE_1
     +                                   + OTHER_EXPENSE_2
     +                                   + OTHER_EXPENSE_3
     +                                   + DSM_EXPENSE
     +                                   + DSM_REBATE
     +                                   + RETIREMENT_MEDICAL_PAYMENTS
     +                                   + TRANSMISSION_OPERATION
     +                                   + TRANSMISSION_MAINTENANCE
     +                                   + DISTRIBUTION_OPERATION
     +                                   + DISTRIBUTION_MAINTENANCE
     +                                   + CUSTOMER_ACCOUNTS
     +                                   + CUSTOMER_SERVICES
     +                                   + SALES_EXPENSE
     +                                   + AG_OPERATIONS
     +                                   + AG_MAINTENANCE
            AMORTIZATION_B4_CAP_SERVICE = ATL_AMORTIZATION
     +                                 + ATL_LEASE_AMORTIZATION
     +                                 + BTL_AMORTIZATION_IN_EXPENSES
     +                                 + VARIABLE_OM_AMORT
     +                                 + OTHER_OM_AMORT
     +                                 + PURCHASE_POWER_AMORT
     +                                 + EXPENSING_MATRIALS_INVENTORY
     +                                 + EXPENSING_GAS_INVENTORY
     +                                 + EXPENSING_FUEL_INVENTORY
c    +                                 + PS_PREM_ISSUE_EXP_AMORT
            TOTAL_EXPENSES_B4_TAXES = TOTAL_CASH_EXPENSES
     +                                + TOTAL_NON_CASH_EXPENSES
C
C ENDOF SBU ADDITONS TO INCOME STATEMENT
C
         IF(PARENT_CLASS) THEN
            CONSOLIDATED_INCOME_TAXES = SUB_FED_TAX_PAYMENTS_2_PARENT
c     +                                 + SUB_STATE_TAX_PAYMENTS_2_PARENT
            CONSOLIDATED_INCOME_TAXES_PAID = 0.
            CONSOLIDATED_INCOME_TAXES_PAID =
     +                                   CONSOLIDATED_FEDERAL_TAXES_PAID
c     +                                   + CONSOLIDATED_STATE_TAXES_PAID
         ELSE
            CONSOLIDATED_INCOME_TAXES = 0.
            CONSOLIDATED_TAX_ADJUSTMENT = 0.
            CONSOLIDATED_INCOME_TAXES_PAID = 0.
            CONSOLIDATED_TAX_LIB_ADJUSTMENT = 0.
         ENDIF
C        CALL CALCULATE_RATE_BASE(YR) ! MOVED 12/2/99
C
         CAPTURED_OPT_METHOD_REVENUES =
     +                           CUM_CAPTURED_OPT_METHOD_REVS(CLASS_POS)
         TOTAL_BASE_RATES_REVENUES = REFERENCE_BASE_REVENUES
     +                               + BASE_RATES_REVENUES
     +                               + UNBILLED_REVENUES
     +                               + RESIDENTIAL_REVENUES
     +                               + COMMERCIAL_REVENUES
     +                               + INDUSTRIAL_REVENUES
     +                               + LIGHTING_REVENUES
     +                               + GOVERNMENT_SALES_REVENUE
     +                               + CAPTURED_OPT_METHOD_REVENUES
     +                               + OPERATING_METHOD_ROLLUP
     +                               + WVPA_MEMBER_ACCRUED_REVENUES
     +                               + REGULATED_REVENUES_11
     +                               + REGULATED_REVENUES_12
     +                               + REGULATED_REVENUES_13
     +                               + REGULATED_REVENUES_14
     +                               + REGULATED_REVENUES_15
         IF(INDEX('C,M,P,A',PRICE_SOURCE_FOR_PRICE_DRIVER) /= 0) THEN
            IF(PRICE_SOURCE_FOR_PRICE_DRIVER == 'P'.OR.
     +                        PRICE_SOURCE_FOR_PRICE_DRIVER == 'A') THEN
               IF(SYSTEM_BASED_FORECAST()) THEN
                  CALL GET_SYSTEM_SALES(RATE_CLASS_ENERGY)
               ELSEIF(.NOT. NERC_REGION_BASED_FORECAST()) THEN
                  CALL RETURN_RATE_CLASS_ENERGY(CLASS,RATE_CLASS_ENERGY)
               ELSE
                  RATE_CLASS_ENERGY = 0.
               ENDIF
               TOTAL_BASE_RATES_REVENUES = TOTAL_BASE_RATES_REVENUES +
     +                            RATE_CLASS_ENERGY*CLASS_SALES/1000000.
            ENDIF
            IF(PRICE_SOURCE_FOR_PRICE_DRIVER == 'C'.OR.
     +                        PRICE_SOURCE_FOR_PRICE_DRIVER == 'A') THEN
               CLASS_FORECAST_REVENUES = 0.
               IF(SYSTEM_BASED_FORECAST()) THEN
                  CALL GET_REVENUES_FORM_SYSTEM_SALES(
     +                                          CLASS_FORECAST_REVENUES)
               ELSEIF(.NOT. NERC_REGION_BASED_FORECAST()) THEN
                  CALL RETURN_RATE_CLASS_REVENUES(CLASS,
     +                                     RATE_REVENUE_CLASS_EXISTS,
     +                                     RATE_CLASS_ENRG_REVENUES,
     +                                     RATE_CLASS_DEMAND_REVENUES,
     +                                     RATE_CLASS_CUSTOMER_REVENUES,
     +                                     RATE_CLASS_CUSTOMERS,
     +                                     RATE_CLASS_DEMAND,
     +                                     RATE_CLASS_ENERGY)
                  CLASS_FORECAST_REVENUES = RATE_CLASS_ENRG_REVENUES+
     +                                      RATE_CLASS_DEMAND_REVENUES +
     +                                      RATE_CLASS_CUSTOMER_REVENUES
               ENDIF
            ENDIF
            REFERENCE_BASE_REVENUES = TOTAL_BASE_RATES_REVENUES +
     +                                MARKET_BASE_REVENUES +
     +                                CLASS_FORECAST_REVENUES +
     +                                CLASS_BASE_REVENUE                    
         ELSE
            REFERENCE_BASE_REVENUES = TOTAL_BASE_RATES_REVENUES +
     +                                CLASS_BASE_REVENUE                    
         ENDIF
         IF(OPERATING_METHOD == 'P') THEN 
c           TOTAL_BASE_RATES_REVENUES = TOTAL_BASE_RATES_REVENUES +
c    +                                  MARKET_BASE_REVENUES +
c    +                                  CLASS_FORECAST_REVENUES
c           REFERENCE_BASE_REVENUES = TOTAL_BASE_RATES_REVENUES
            TOTAL_BASE_RATES_REVENUES = REFERENCE_BASE_REVENUES                
         ELSEIF(OPERATING_METHOD == 'O') THEN
c           TOTAL_BASE_RATES_REVENUES = TOTAL_BASE_RATES_REVENUES +
c    +                                  CLASS_BASE_REVENUE
c           REFERENCE_BASE_REVENUES = TOTAL_BASE_RATES_REVENUES
            TOTAL_BASE_RATES_REVENUES = REFERENCE_BASE_REVENUES                
         ELSE
            TOTAL_BASE_RATES_REVENUES = REFERENCE_BASE_REVENUES                
         ENDIF
C
         IF(OPERATING_METHOD == 'E') THEN
            RETURN_MEASURE = ROEQU
         ELSEIF(OPERATING_METHOD == 'C') THEN
            RETURN_MEASURE = MIN_COV_RATIO
            IF(COVERAGE_RATIO == 1) THEN
               GOPINC = MIN_COV_RATIO * (ANNINT(YR-1,CLASS_POS)
     +                                   + STD_INTEREST_RATE *
     +                                      SHORT_TERM_DEBT(1,CLASS_POS)
     +                                   + STD_INTEREST_ADDEN)
            ELSE
               GOPINC =  MIN_COV_RATIO * (LTDINT(YR,CLASS_POS) +
     +                         INTEREST_ON_SHORT_TERM_DEBT(1,CLASS_POS))
            ENDIF
         ELSE ! IF(INDEX('Rr',OPERATING_METHOD) /= 0) THEN
            IF (RETURN_ON_RATEBASE_SOURCE == 'I') THEN
               TOTAL_WIEGHTED_CAPITAL = COMMON_EQUITY(1,CLASS_POS) + 
     +                        PREFERRED_STOCK(1,CLASS_POS) +
     +                        LONG_TERM_DEBT(1,CLASS_POS) +
     +                        (SHORT_TERM_DEBT(1,CLASS_POS) *
     +                                    STD_IN_WEIGHTED_COST_PERCENT +
     +                         CUSTOMER_DEPOSITS_BAL(1,CLASS_POS) *
     +                                 CUSTOMER_DEPOSITS_IN_WC_PERCENT +
     +                         CIAC_BALANCE(1,CLASS_POS) *
     +                                      CIAC_BALANCE_IN_WC_PERCENT +
     +                         DEF_TAX_CR_BALANCE(1,CLASS_POS) *
     +                                        DEF_TAX_CR_IN_WC_PERCENT +
     +                         DEF_ITC_BALANCE(1,CLASS_POS) *
     +                                       DEF_ITC_IN_WC_PERCENT)/100.

C
C DEFERRED TAXES CR AND CIAC ARE AT ZERO COST.
C
               TOTAL_WEIGHTED_COST = ANNINT(YR-1,CLASS_POS) +
     +                         INTEREST_AMORTIZATION +
     +                         PS_PREM_ISSUE_EXP_AMORT +
     +                         COMMON_EQUITY(1,CLASS_POS) * ROEQU +
     +                        (SHORT_TERM_DEBT(1,CLASS_POS) *
     +                              STD_INTEREST_RATE *
     +                                    STD_IN_WEIGHTED_COST_PERCENT +
     +                         CUSTOMER_DEPOSITS_BAL(1,CLASS_POS) *
     +                              INTEREST_ON_CUSTOMER_DEPOSITS *
     +                                 CUSTOMER_DEPOSITS_IN_WC_PERCENT +
     +                         DEF_ITC_BALANCE(1,CLASS_POS) *
     +                          WEIGHTED_COST_OF_CAPITAL_BY(CLASS_POS) *
     +                                       DEF_ITC_IN_WC_PERCENT)/100.

               IF(ABS(TOTAL_WEIGHTED_COST)<.00001)TOTAL_WEIGHTED_COST=0.
               IF(TOTAL_WIEGHTED_CAPITAL /= 0.) THEN
                  RETURN_ON_NPV = TOTAL_WEIGHTED_COST/
     +                                            TOTAL_WIEGHTED_CAPITAL
               ENDIF
               WEIGHTED_COST_OF_CAPITAL_BY(CLASS_POS) = RETURN_ON_NPV
            ENDIF
            RETURN_MEASURE = RETURN_ON_NPV
         ENDIF
         OTHER_REVENUE(1,CLASS_POS) = OTHER_REVENUE(2,CLASS_POS)
         OTHER_REVENUE(2,CLASS_POS) = CLASS_OTHER_REVENUE
         NON_BASE_REVENUES = ADJUSTMENT_CLAUSE_REVENUES
     +                       + CLASS_GAS_ADJ_CLAUSE_REVENUE
     +                       + SECONDARY_SALES_REVENUES
     +                       + CATAWBA_REVENUES
     +                       + OTHER_REVENUE(2,CLASS_POS)
     +                       + GAS_REVENUES
     +                       + RELATIONSHIP_REVENUES
     +                       + BULK_POWER_REVENUES
     +                       + CAPACITY_SALES_REVENUE
     +                       + INC_CAPACITY_SALES_TO_LEVEL_RM    ! 726
     +                       + TOTAL_DERIVATIVE_REVENUE
     +                       + TOTAL_FUEL_DERIV_REVENUES
     +                       + COMPETITIVE_SALES_REVENUE
     +                       + UTILITY_SALES_REVENUE
     +                       + ICAP_REVENUES
     +                       + FE_Competitive_Unit_Sales
     +                       + NON_REG_REVENUES_10
     +                       + NON_REG_REVENUES_11
     +                       + NON_REG_REVENUES_12
     +                       + NON_REG_REVENUES_13
     +                       + NON_REG_REVENUES_14
     +                       + NON_REG_REVENUES_15
c     +                       + FE_Intra_Company_Utility_Sales
         IF(SALT_RIVER_PROJECT()) THEN
            NON_CASH_ATL_REVENUES = UNBILLED_REVENUES
     +                              + WVPA_MEMBER_ACCRUED_REVENUES
     +                              + NUCL_FUND_RETURN
     +                              + RETIREMENT_MEDICAL_FUND_RETURN
         ELSE
            NON_CASH_ATL_REVENUES = UNBILLED_REVENUES
     +                              + WVPA_MEMBER_ACCRUED_REVENUES
     +                              + RETIREMENT_MEDICAL_FUND_RETURN
         ENDIF
C
         PROPERTY_TAX_GPV = FA_PROPERTY_TAX_GPV + EA_PROPERTY_TAX_GPV +
     +                                              DSM_GPV_PROPERTY_TAX
         PROPERTY_TAX_NPV = FA_PROPERTY_TAX_NPV + EA_PROPERTY_TAX_NPV +
     +                                              DSM_NPV_PROPERTY_TAX
         CLASS_ADDENDUM_TO_PROPERTY_TAX = CLASS_ADDENDUM_TO_PROPERTY_TAX
     +                                    + EXP_FILE_PROPERTY_TAXES
C     +                              + WVPA_PROP_TAXES_IN_POWER_COSTS
         CALL ASSET_CLASS_PROPERTY_TAXES
         
C
         IF(YR == 1 .AND. CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
            PS_ROLLOVER = PREFERRED_STOCK_ADDENDUM(CLASS_POS)
            LTD_ROLLOVER = LONG_TERM_DEBT_ADDENDUM(CLASS_POS)
            SBU_COMMON_STOCK_BOUGHT = 0.
            PREFERRED_STOCK_RETIREMENTS = PS_ROLLOVER +
     +                                       PREFERRED_STOCK_RETIREMENTS
            LONG_TERM_DEBT_RETIREMENTS = LTD_ROLLOVER +
     +                                        LONG_TERM_DEBT_RETIREMENTS
            IF(MONTHLY_MIDAS_ACTIVE) THEN
               CALL MONTHLY_PS_FIRST_HALF(YR,CLASS,
     +                  PS_ROLLOVER * WEIGHTED_CLASS_PS_COST(CLASS_POS),
     +                                                      PS_ROLLOVER)
               CALL MONTHLY_LTD_FIRST_HALF(YR,CLASS,
     +                LTD_ROLLOVER * WEIGHTED_CLASS_LTD_COST(CLASS_POS),
     +                                                     LTD_ROLLOVER)
            ENDIF
         ELSE
            PS_ROLLOVER = 0.
            LTD_ROLLOVER = 0.
         ENDIF
         IF(CLASS_TYPE(CLASS_POS) == SBU
     +                    .or. CLASS_TYPE(CLASS_POS) == SUBSIDIARY) THEN
            PS_ADDEM_DIVIDEND = PREFERRED_STOCK_ADDENDUM(CLASS_POS) *
     +                                 WEIGHTED_CLASS_PS_COST(CLASS_POS)
            LTD_ADDEM_INTEREST = LONG_TERM_DEBT_ADDENDUM(CLASS_POS) *
     +                                WEIGHTED_CLASS_LTD_COST(CLASS_POS)
            IF(MONTHLY_MIDAS_ACTIVE) THEN
               CALL MONTHLY_PS_FULL_YEAR_NO_LAG(YR,CLASS,
     +                             PREFERRED_STOCK_ADDENDUM(CLASS_POS),
     +                             WEIGHTED_CLASS_PS_COST(CLASS_POS),0.)
               PSDIV(YR,CLASS_POS) = PSDIV(YR,CLASS_POS)
     +                               + PS_ADDEM_DIVIDEND
               CALL MONTHLY_LTD_FULL_YEAR_NO_LAG(YR,CLASS,
     +                            LONG_TERM_DEBT_ADDENDUM(CLASS_POS),
     +                            WEIGHTED_CLASS_LTD_COST(CLASS_POS),0.)
c              LTDINT(YR,CLASS_POS) = LTDINT(YR,CLASS_POS)
c    +                                + LTD_ADDEM_INTEREST
            ENDIF
         ELSE
            PS_ADDEM_DIVIDEND = 0.
            LTD_ADDEM_INTEREST = 0.
         ENDIF
         PS_ROLLOVER_DIVIVEND = PS_ROLLOVER/2. *
     +                               WEIGHTED_CLASS_PS_COST(CLASS_POS) +
     +                                                 PS_ADDEM_DIVIDEND
         LTD_ROLLOVER_INTEREST = LTD_ROLLOVER/2. *
     +                              WEIGHTED_CLASS_LTD_COST(CLASS_POS) +
     +                                                LTD_ADDEM_INTEREST
C
C
C ADDED 7/2/98
         IF(ACCURAL_ACCOUNTING_ACTIVE) THEN
            INTEREST_DIVIDENDS_ACCRUDED = LTDINT(YR,CLASS_POS)  !INTEREST_ON_EXISTING_LTD,
     +                                    + LTD_ADDEM_INTEREST
     +                                    - LTD_INTEREST_CASH_PAYMENTS  !CASH INTEREST PAYMENTS
     +                                    + PSDIV(YR,CLASS_POS)  ! DEBT_FILE_PREFERRED_DIVIDENDS,
     +                                    - PS_DIVIDEND_CASH_PAYMENTS ! PS DIVIDEND PAYMENTS
         ELSE   
            INTEREST_DIVIDENDS_ACCRUDED = 0.
            LTD_INTEREST_CASH_PAYMENTS = LTDINT(YR,CLASS_POS) !INTEREST_ON_EXISTING_LTD,
            PS_DIVIDEND_CASH_PAYMENTS = PSDIV(YR,CLASS_POS) ! DEBT_FILE_PREFERRED_DIVIDENDS,
         ENDIF
         LTD_INTEREST_CASH_PAYMENTS = LTD_INTEREST_CASH_PAYMENTS
     +                                + LTD_ROLLOVER_INTEREST
         PS_DIVIDEND_CASH_PAYMENTS = PS_DIVIDEND_CASH_PAYMENTS
     +                               + PS_ROLLOVER_DIVIVEND
C
            LTD_PS_RETIREMENTS = LONG_TERM_DEBT_RETIREMENTS
     +                           + PREFERRED_STOCK_RETIREMENTS
C
            TOTAL_INCOME_TAXES = 0.
            ATL_INCOME_TAXES = 0.
            ITC_USED = 0.
            LOCAL_TAX_RATE = 0.      ! NEED TO ADD TO PARM FILE
            ADJ_2_LOCAL_TAXES = 0.   ! NEED TO ADD TO PARM FILE
C           ADJ_2_STATE_TAXES = 0.   ! NEED TO ADD TO PARM FILE
C           FED_TAX_CREDIT_PASSED_UP = FED_TAX_CREDIT_PASSED_UP + 25. ! NEED TO ADD TO PARM FILE
C           ADJ_2_FOEDERAL_TAXES = 0.
            BTL_INCOME_TAXES = 0.
            COMMON_DIVIDENDS = 0.
            ENVIRONMENTAL_TAX = 0.
            COMMON_STOCK_ISSUED = 0.
            COMMON_STOCK_BOUGHT = DEBT_COMMON_STOCK_BUYBACK
            DEF_TAXES_FROM_NOLS_AMT_CREDITS = 0.
         ITER = 1
         CASH_2_LT_INVESTMENTS = CHANGE_IN_LONG_TERM_INVESTMENTS
         ENVIRONMENTAL_TAX = 0.
         MIN_ITER = 8
         MIN_ITER = 15
         IF(INDEX('Rr',OPERATING_METHOD) /= 0) MIN_ITER = 15
         IF(PARENT_CLASS) THEN
C
C ADDING CREDITS AT PARENT LEVEL
C
            CALL RETURN_CONSOLD_TAX_INFORMATION(ASSET_YR,
     +                                       CONSOLID_DEFERRED_TAXES_DR)
            CONSOLD_AVAIL_FED_TAX_CREDIT = CONSOLD_AVAIL_FED_TAX_CREDIT
     +                                     + FED_TAX_CREDIT_PASSED_UP
            CONSOLID_FED_SEC_29_TAX_CREDITS = SEC_29_CREDITS_PASSED_UP
     +                                 + CONSOLID_FED_SEC_29_TAX_CREDITS
            CONSOLID_FED_SEC_42_TAX_CREDITS =
     +                                 CONSOLID_FED_SEC_42_TAX_CREDITS +
     +                                          SEC_42_CREDITS_PASSED_UP
            CALL RETURN_TAX_ADJUSTMENTS_ELIM(ASSET_YR,
     +                                       ELIMINAITON_CLASS_ID_NUM,
     +                                       CONSOLIDATED_FED_TAX_ADJ,
     +                                       CONSOLIDATED_STATE_TAX_ADJ)
            CALL RETURN_MONTHLY_ACTUAL_TAXES(YR,INT2(-1),
     +                                 ACTUAL_CON_STATE_INCOME_TAX,
     +                                 USE_ACTUAL_CON_STATE_TAXES,
     +                                 ACTUAL_CON_FEDERAL_INCOME_TAX,
     +                                 USE_ACTUAL_CON_FEDERAL_TAXES,
     +                                 ACTUAL_CON_DEFERRED_TAXES_DR,
     +                                 USE_ACTUAL_CON_DEFERRED_TAX_DR,
     +                                 ACTUAL_CON_DEFERRED_TAXES_CR,
     +                                 USE_ACTUAL_CON_DEFERRED_TAX_CR,
     +                                 ACTUAL_CON_BTL_DEF_TAXES_DR,
     +                                 USE_ACTUAL_CON_BTL_DEF_TAXES_DR,
     +                                 ACTUAL_CON_BTL_DEF_TAXES_CR,
     +                                 USE_ACTUAL_CON_BTL_DEF_TAXES_CR)
         ELSE
            CONSOLIDATED_FED_TAX_ADJ = 0.
            CONSOLIDATED_STATE_TAX_ADJ = 0.
            CONSOLID_DEFERRED_TAXES_DR = 0.
         ENDIF
         IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR+1 .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
            CALL GET_INTRS_TAXES_PAYABLE_YEAR_1(CLASS_POS,
     +                                      STD_INTEREST_OWED,
     +                                      REVENUE_TAXES_OWED,
     +                                      PROPERTY_TAXES_OWED,
     +                                      STATE_INCOME_TAXES_OWED,
     +                                      FEDERAL_INCOME_TAXES_OWED,
     +                                      STATE_TAX_ON_CAPITAL_OWED,
     +                                      FEDERAL_TAX_ON_CAPITAL_OWED,
     +                                      OTHER_TAXES_OWED)
         ELSE
            REVENUE_TAXES_OWED = 0.
            PROPERTY_TAXES_OWED = 0.
            STATE_INCOME_TAXES_OWED = 0.
            FEDERAL_INCOME_TAXES_OWED = 0.
            STATE_TAX_ON_CAPITAL_OWED = 0.
            FEDERAL_TAX_ON_CAPITAL_OWED = 0.
            OTHER_TAXES_OWED = 0.
         ENDIF   
C
C SET CATWABA FOR DISPLAY PURPOSES 4/15/97
C
         CATAWBA_TOTAL_CAP_PAYMENTS = CATAWBA_CAPACITY_PAYMENTS -
     +                                      CATAWBA_LEVEL_CAP_PAYMENTS
         CATAWBA_INC_STATEMENT_EXPENSES = CATAWBA_EXPENSES +
     +                                       CATAWBA_TOTAL_CAP_PAYMENTS
C ADDING NOLS AND AMT CREDITS TO BALANCE SHEET 4/14/98
         DEF_TAXES_FROM_NOLS_AMT_CREDITS = 0.
         AMT_CREDITS_CREATED = 0.
         NEW_FINANCING_ACCRUALS = 0.
         COMMON_STOCK_DIV_ACCRUALS = 0.
         INVESTMENT_INCOME = 0.
         IF(MONTHLY_MIDAS_ACTIVE .OR. VERSION_6_OR_GREATER) THEN
            CUSTOMER_DEPOSITS = CUSTOMER_DEPOSITS 
     +                          + ADDENDUM_TO_CUSTOMER_DEPOSITS
            CUSTOMER_DEPOSITS_BAL(2,CLASS_POS) =
     +                                CUSTOMER_DEPOSITS_BAL(1,CLASS_POS)
     +                                + CUSTOMER_DEPOSITS
            CALL CALCULATE_RATE_BASE(YR)
            IF(OPERATING_METHOD /= 'E' .AND. OPERATING_METHOD /= 'C')
     +                   GOPINC = RETURN_MEASURE * ASSET_CLASS_RATE_BASE
         ENDIF
         INTEREST_ON_STD = 0.
         CALCULATED_2_ACTUAL_STATE_ADJ = 0.
         CALCULATED_2_ACTUAL_FED_ADJ = 0.
C        STD_INTEREST_OWED = 0.
         TAXES_ACCRUAL_ADJ = 0.
         STATE_NOL_GENERATED = 0.
         STATE_NOLS_USED = 0.
         FEDERAL_NOL_GENERATED = 0.
         FEDERAL_NOLS_USED = 0.
         EARNINGS_PER_SHARE = 0.
         IF(USE_ACTUAL_DEFERRED_TAXES_DR) THEN
            DEFERRED_TAXES_DR = ACTUAL_DEFERRED_TAXES_DR
         ELSE
            DEFERRED_TAXES_DR = DEFERRED_TAXES_DR_TAX_FILE
         ENDIF
         IF(USE_ACTUAL_BTL_DEF_TAXES_DR) THEN
            BTL_DEFERRED_TAXES_DR = ACTUAL_BTL_DEF_TAXES_DR
         ENDIF
         TOTAL_DEFERRED_TAXES_DR = DEFERRED_TAXES_DR
     +                             + BTL_DEFERRED_TAXES_DR         
C
C SET UP ASSETS AND LIABS NEC
C
         LINEC(2,CLASS_POS) = OPREV_IN_LIBS_NEC *
     +                                 OPERATING_REVENUES(1,CLASS_POS) 
     +                        + NPV_IN_LIBS_NEC *
     +                                  NET_UTILITY_PLANT(2,CLASS_POS)
     +                        + ADDENUM_2_LIBS_NEC 
         ASSETS_NEC = OPREV_IN_ASSETS_NEC *
     +                          OPERATING_REVENUES(1,CLASS_POS)
     +                   + NPV_IN_ASSETS_NEC *
     +                          NET_UTILITY_PLANT(2,CLASS_POS)
     +                   + ADDENUM_2_ASSETS_NEC 
         WCCUM(2,CLASS_POS) = ASSETS_NEC - LINEC(2,CLASS_POS)
         CHANGE_IN_WORKING_CAPITIAL = WCCUM(2,CLASS_POS) -
     +                                                WCCUM(1,CLASS_POS)
C
C FASB 87 ACCOUNTING FOR IPL
C
         CALL MONTHLY_FASB87_CALCULATIONS(CLASS,YR,
     +                    OTHER_COMPREHENSIVE_INCOME_BALANCE(CLASS_POS),  ! 730
     +                    FASB_87_INTANGIBLE_ASSETS(CLASS_POS),
     +                    PENSION_LIABILITY(2,CLASS_POS),
     +                    FASB_87_DEFERRED_TAX_ADJ_DR,
     +                    NORMALIZATION_TAX_RATE)
         ADJ_DEFERRED_TAX_DR_BALANCE = ADJ_DEFERRED_TAX_DR_BALANCE
     +                                 + FASB_87_DEFERRED_TAX_ADJ_DR
         OTHER_COMPREHENSIVE_INCOME_BALANCE(CLASS_POS) =
     +                     OTHER_COMPREHENSIVE_INCOME_BALANCE(CLASS_POS)
     +                     + OCI_RETIREMENT_MEDICAL_FUND_RETURN

C TEMP SETTING OF THE CAP STRUCTURE
C
         MTG_DEBT_RETIREMENTS = 0.
         OTHER_TAXES = 0.
         CUSTOMER_DEPOSIT_INTEREST_ON = 0.
         MODEL_ISSUED_SHARES = 0.
         RETAINED_EARNINGS = 0.
         NET_INCOME = 0.
         ST_INVESTMENT_EARNINGS = 0.
         LT_INVESTMENTS_EARNINGS = 0.
         DIVIDEND_PAYOUT_RATIO = DIVIDEND_PAYMENT_METHOD == DPR .OR.
     +                          DIVIDEND_PAYMENT_METHOD == DPR_CASH .OR.
     +                          DIVIDEND_PAYMENT_METHOD == CASH

         REGULATED_CAPATIAL_STRUCTURE =
     +                          CLASS_TYPE(CLASS_POS) == REGULATED_GROUP
         GRE_LEASE_PAYMENTS_IN_TIER = LEASE_PAYMENTS_IN_TIER
         IF(PARENT_CLASS) THEN
            iter = iter 
         ENDIF
         DOWHILE (ITER <= MAX_ITER+1 .AND.
     +                          (.NOT. CONVERGED .OR. ITER <= MIN_ITER))
c           IF(DONT_TALLY_THIS_CLASS) EXIT ! need the reason for this statement
C
C REVENUES
C
            CASH_2_LT_INVESTMENTS = MAX(CASH_2_LT_INVESTMENTS,
     +                                  CHANGE_IN_LONG_TERM_INVESTMENTS)
            CALL SUM_CASH_EXPENSES(TOTAL_CASH_EXPENSES)
            TOTAL_EXPENSES_B4_TAXES = TOTAL_CASH_EXPENSES
     +                                + TOTAL_NON_CASH_EXPENSES
            IF(INDEX('EC',OPERATING_METHOD) /= 0) THEN
               CALL CALCULATE_TOTAL_REVENUES(OPERATING_REVENUE_TAX,
     +                                  OPERATING_REVENUES(2,CLASS_POS),
     +                                  LTD_PS_DEFERRED_TAX_CR,
     +                                  NF_DEFERRED_TAXES_CR,
     +                                  OPERATING_METHOD)
              IF(IMPA() .AND. OPERATING_METHOD == 'C') THEN
                 OPERATING_REVENUES(2,CLASS_POS) = 
     +                                   OPERATING_REVENUES(2,CLASS_POS)
     +                                   - BOOK_DEPRECIATION 
     +                                   - INTEREST_AMORTIZATION  ! 384
     +                                   + LONG_TERM_DEBT_RETIREMENTS 
               ENDIF
               TOTAL_BASE_RATES_REVENUES =
     +               OPERATING_REVENUES(2,CLASS_POS) - NON_BASE_REVENUES
            ELSE
               OPERATING_REVENUES(2,CLASS_POS) =
     +                     TOTAL_BASE_RATES_REVENUES + NON_BASE_REVENUES
            ENDIF
C
C SBU CUSTOMER DESPOSITS MUST SUM TO THE PARENT OR SUB-PARENT
C
            IF(.NOT. MONTHLY_MIDAS_ACTIVE .AND.
     +                                  .NOT. VERSION_6_OR_GREATER) THEN
               CUSTOMER_DEPOSITS_BAL(2,CLASS_POS) =
     +                        TOTAL_BASE_RATES_REVENUES *
     +                             CUSTOMER_DEPOSITS_PERCENT_REVS/100. +
     +                                     ADDENDUM_TO_CUSTOMER_DEPOSITS
               CUSTOMER_DEPOSITS_BAL(2,CLASS_POS) =
     +                                CUSTOMER_DEPOSITS_BAL(1,CLASS_POS)
     +                                + ADDENDUM_TO_CUSTOMER_DEPOSITS
               IF(PARENT_CLASS .OR. SUBSIDIARY_CLASS) THEN ! CLASS_TYPE(CLASS_POS) /= SBU .AND.
C    +                    CLASS_TYPE(CLASS_POS) /= REGULATED_GROUP) THEN ! PARENT OR SUB
                  CUSTOMER_DEPOSITS_BAL(2,CLASS_POS) = SBU_VARIABLES(85)
     +                              + CUSTOMER_DEPOSITS_BAL(2,CLASS_POS)
               ENDIF
               CUSTOMER_DEPOSITS = CUSTOMER_DEPOSITS_BAL(2,CLASS_POS) -
     +                                CUSTOMER_DEPOSITS_BAL(1,CLASS_POS)
               CALL CALCULATE_RATE_BASE(YR)
               IF(OPERATING_METHOD /= 'E' .AND. OPERATING_METHOD /= 'C')
     +                   GOPINC = RETURN_MEASURE * ASSET_CLASS_RATE_BASE
            ENDIF
c
            IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
C               CUSTOMER_DEPOSIT_INTEREST_ON = 0.
C
C OTHER TAXES
C
C               OTHER_TAXES = 0.
C              ADDITIONS_BALANCE = CUSTOMER_DEPOSITS_BAL(1,CLASS_POS)
C              DO MO = 1, 12
C                 MONTHLY_INTEREST = INTEREST_ON_CUSTOMER_DEPOSITS/12. *
C    +                        (ADDITIONS_BALANCE + MONTHLY_ADDITIONS/2.)      
C                 CUSTOMER_DEPOSIT_INTEREST_ON = MONTHLY_INTEREST +
C    +                                      CUSTOMER_DEPOSIT_INTEREST_ON
C                 ADDITIONS_BALANCE=ADDITIONS_BALANCE+MONTHLY_ADDITIONS
C              ENDDO
C              CUSTOMER_DEPOSITS_INTR_PAYABLE = MONTHLY_INTEREST
            ELSE   
               CUSTOMER_DEPOSIT_INTEREST_ON = 
     +                       (CUST_DEPOSITS_FIRST_HALF_RATE *
     +                                CUSTOMER_DEPOSITS_BAL(1,CLASS_POS)
     +                       + CUST_DEPOSITS_SECOND_HALF_RATE *
     +                               (CUSTOMER_DEPOSITS_BAL(1,CLASS_POS)
     +                                + CUSTOMER_DEPOSITS))/2.
               CUSTOMER_DEPOSITS_INTR_PAYABLE = 0.
C
C OTHER TAXES
C
               OTHER_TAXES = CLASS_OTHER_TAXES_RATE/100. *
     +                         (OPERATING_REVENUES(2,CLASS_POS)
     +                          - EXCLUDED_OTHER_TAXES_REV(CLASS_LEVEL)) 
     +                       + OTHER_TAXES_PERCENT_OF_EXPENSES/100. *
     +                         (CLASS_NON_VARIABLE_EXPENSE
     +                          - EXCLUDED_OTHER_TAXES_EXP(CLASS_LEVEL)) 
     +                       + CLASS_ADDENDUM_2_OTHER_TAXES 
     +                       + EXCLUDED_OTHER_TAXES(CLASS_LEVEL)
            ENDIF
            
C
C BEGINNING FINANCING LOOP
C
            ITC_USED = FED_TAX_CREDIT_PASSED_UP 
            ITC_AMORTIZATION = (DEF_ITC_BALANCE(1,CLASS_POS)
     +                          + ITC_USED
     +                          - PRIOR_CAUSE_OF_ITC_AMORT) * 
     +                                   ITC_AMORTIZATION_RATE
     +                         + ADDENDUM_TO_ITC_AMORTIZATED
            IF(.NOT. IOU_UTILITY) THEN
               FUNDS = CASH_4_INVESTMENTS - CLASS_LEASED_NFCE -
     +                 CAPITIALIZED_LEASE_ADDITIONS +
     +                 CHANGE_IN_WORKING_CAPITIAL + 
     +                 LONG_TERM_DEBT_RETIREMENTS
     +                 + MTG_DEBT_RETIREMENTS
     +                 + AFUDC 
     +                 + Mark_to_Market
     +                 + FE_NonCashEarningsNonCorp
     +                 + DEFERRED_REVENUES -
     +                 ABANDS(1,CLASS_POS) - TOTAL_NON_CASH_EXPENSES -
     +                 BTL_NUC_FUEL_DECOM_LIABILITY +
     +                 SUBSIDIARY_INCOME - NET_OF_TAX_EXEXP - 
     +                 FA_WO_ADJUSTMENT_2_CUM_AFEXP -
     +                 LIQUID_INVESTMENTS(1,CLASS_POS) +
     +                 MIN_ST_INVESTMENTS +
     +                 NUCL_DECOM_FUND + 
     +                 DEFERRED_EXPENSE_CASH - CUSTOMER_DEPOSITS -
     +                 CASH_FROM_SALE_OF_ASSETS +
     +                 CATAWBA_OTHER_NET_REVENUES +
     +                 CASH_2_LT_INVESTMENTS
c    +                 BTL_AMORTIZATION -
     +                - INTEREST_AMORTIZATION 
     +                 - PS_PREM_ISSUE_EXP_AMORT
     +                 + NON_CASH_ATL_REVENUES -
     +                 BTL_AMORTIZATION_IN_EXPENSES
     +                 + DEBT_FILE_ISSUE_EXPENSE
     +                 - INTEREST_DIVIDENDS_ACCRUDED
     +                 - NEW_FINANCING_ACCRUALS
     +                 - COMMON_STOCK_DIV_ACCRUALS
     +                 - CASH_TIMING_ADJUSTMENTS
     +                 - TAXES_ACCRUAL_ADJ
     +                 + INVESTMENTS_MADE - INVESTMENTS_SOLD
     +                 + CASH_CHANGE_IN_NOTES_PAY_REC
     +                 + CASH_ADDS_2_INVENTORIES
     +                 + VACATION_PAY_CASH
     +                 + PENSION_EXPENSE_CASH
     +                 + STORM_EXPENSE_CASH
     +                 + LEASE_PRINCIPAL_PAYMENTS 
     +                 + ExecBenefitsCash
     +                 + IncentiveCompensationCash
            ELSE
               IF(CLASS_TYPE(CLASS_POS) == SBU) THEN
                  FUNDS = CASH_4_INVESTMENTS - CLASS_LEASED_NFCE -
     +                 CAPITIALIZED_LEASE_ADDITIONS +
     +                 CHANGE_IN_WORKING_CAPITIAL +
     +                 SBU_COMMON_STOCK_BOUGHT +
     +                 PREFERRED_STOCK_RETIREMENTS +
     +                 LONG_TERM_DEBT_RETIREMENTS
     +                 + MTG_DEBT_RETIREMENTS
     +                 + AFUDC 
     +                 + Mark_to_Market
     +                 + FE_NonCashEarningsNonCorp
     +                 + DEFERRED_REVENUES + ITC_AMORTIZATION -
     +                 ABANDS(1,CLASS_POS) - TOTAL_NON_CASH_EXPENSES -
     +                 BTL_NUC_FUEL_DECOM_LIABILITY -
     +                (ITC_USED+TOTAL_DEF_TAXES_CR 
     +                    + TOTAL_DEFERRED_TAXES_DR)
c    +                 +DEF_TAXES_FROM_NOLS_AMT_CREDITS
     +                 +SUBSIDIARY_INCOME -
     +                 NET_OF_TAX_EXEXP -
     +                 FA_WO_ADJUSTMENT_2_CUM_AFEXP -
     +                 LIQUID_INVESTMENTS(1,CLASS_POS) + 
     +                 MIN_ST_INVESTMENTS +
     +                 NUCL_DECOM_FUND + 
     +                 DEFERRED_EXPENSE_CASH - CUSTOMER_DEPOSITS -
     +                 CASH_FROM_SALE_OF_ASSETS +
     +                 CATAWBA_OTHER_NET_REVENUES +
     +                 CASH_2_LT_INVESTMENTS
c    +                 - BTL_AMORTIZATION
     +                - INTEREST_AMORTIZATION
     +                 - PS_PREM_ISSUE_EXP_AMORT
     +                 + NON_CASH_ATL_REVENUES -
     +                 BTL_AMORTIZATION_IN_EXPENSES
     +                 + DEBT_FILE_ISSUE_EXPENSE
     +                 - INTEREST_DIVIDENDS_ACCRUDED
     +                 - NEW_FINANCING_ACCRUALS
     +                 - COMMON_STOCK_DIV_ACCRUALS
     +                 - CASH_TIMING_ADJUSTMENTS
     +                 - TAXES_ACCRUAL_ADJ
     +                 + INVESTMENTS_MADE - INVESTMENTS_SOLD
     +                 + CASH_CHANGE_IN_NOTES_PAY_REC
     +                 + CASH_ADDS_2_INVENTORIES
     +                 + VACATION_PAY_CASH
     +                 + PENSION_EXPENSE_CASH
     +                 + STORM_EXPENSE_CASH
     +                 + LEASE_PRINCIPAL_PAYMENTS 
     +                 + ExecBenefitsCash
     +                 + IncentiveCompensationCash
C
               ELSEIF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  FUNDS = CASH_4_INVESTMENTS - CLASS_LEASED_NFCE -
     +                 CAPITIALIZED_LEASE_ADDITIONS +
     +                 CHANGE_IN_WORKING_CAPITIAL
C    +                 + SBU_COMMON_STOCK_BOUGHT
C    +                 + PREFERRED_STOCK_RETIREMENTS
C    +                 + LONG_TERM_DEBT_RETIREMENTS
C    +                 + MTG_DEBT_RETIREMENTS
     +                 + AFUDC 
     +                 + Mark_to_Market
     +                 + FE_NonCashEarningsNonCorp
     +                 + DEFERRED_REVENUES + ITC_AMORTIZATION -
     +                 ABANDS(1,CLASS_POS) - TOTAL_NON_CASH_EXPENSES -
     +                 BTL_NUC_FUEL_DECOM_LIABILITY -
     +                (ITC_USED+TOTAL_DEF_TAXES_CR
     +                     + TOTAL_DEFERRED_TAXES_DR)
c    +                 +DEF_TAXES_FROM_NOLS_AMT_CREDITS
C    +                 + SUBSIDIARY_INCOME
     +                 - NET_OF_TAX_EXEXP
     +                 - FA_WO_ADJUSTMENT_2_CUM_AFEXP
C    +                 - LIQUID_INVESTMENTS(1,CLASS_POS)
C    +                 + MIN_ST_INVESTMENTS
     +                 + NUCL_DECOM_FUND
     +                 + DEFERRED_EXPENSE_CASH
     +                 + RATE_BASE_CASH_ADJ
     +                 - CUSTOMER_DEPOSITS
     +                 - CASH_FROM_SALE_OF_ASSETS
     +                 + CATAWBA_OTHER_NET_REVENUES
     +                 + CASH_2_LT_INVESTMENTS
c    +                 - BTL_AMORTIZATION
     +                 - INTEREST_AMORTIZATION
     +                 - PS_PREM_ISSUE_EXP_AMORT
     +                 + NON_CASH_ATL_REVENUES
     +                 - BTL_AMORTIZATION_IN_EXPENSES
     +                 + DEBT_FILE_ISSUE_EXPENSE
     +                 - INTEREST_DIVIDENDS_ACCRUDED
     +                 - NEW_FINANCING_ACCRUALS
     +                 - COMMON_STOCK_DIV_ACCRUALS
     +                 - CASH_TIMING_ADJUSTMENTS
     +                 - TAXES_ACCRUAL_ADJ
     +                 + INVESTMENTS_MADE - INVESTMENTS_SOLD
     +                 + CASH_CHANGE_IN_NOTES_PAY_REC
     +                 + CASH_ADDS_2_INVENTORIES
     +                 + VACATION_PAY_CASH
     +                 + PENSION_EXPENSE_CASH
     +                 + STORM_EXPENSE_CASH
     +                 + LEASE_PRINCIPAL_PAYMENTS 
     +                 + ExecBenefitsCash
     +                 + IncentiveCompensationCash
               ELSE   
                  FUNDS = CASH_4_INVESTMENTS - CLASS_LEASED_NFCE -
     +                 CAPITIALIZED_LEASE_ADDITIONS +
     +                 CHANGE_IN_WORKING_CAPITIAL +
     +                 PREFERRED_STOCK_RETIREMENTS +
     +                 LONG_TERM_DEBT_RETIREMENTS
     +                 + MTG_DEBT_RETIREMENTS
     +                 + AFUDC 
     +                 + Mark_to_Market
     +                 + FE_NonCashEarningsNonCorp
     +                 + DEFERRED_REVENUES + ITC_AMORTIZATION -
     +                 ABANDS(1,CLASS_POS) - TOTAL_NON_CASH_EXPENSES -
     +                 BTL_NUC_FUEL_DECOM_LIABILITY -
     +                (ITC_USED+TOTAL_DEF_TAXES_CR
     +                              + TOTAL_DEFERRED_TAXES_DR)
C    +                 +DEF_TAXES_FROM_NOLS_AMT_CREDITS
     +                 +SUBSIDIARY_INCOME -
     +                 NET_OF_TAX_EXEXP -
     +                 FA_WO_ADJUSTMENT_2_CUM_AFEXP -
     +                 LIQUID_INVESTMENTS(1,CLASS_POS) + 
     +                 MIN_ST_INVESTMENTS +
     +                 NUCL_DECOM_FUND + 
     +                 DEFERRED_EXPENSE_CASH - CUSTOMER_DEPOSITS -
     +                 CASH_FROM_SALE_OF_ASSETS +
     +                 CATAWBA_OTHER_NET_REVENUES +
     +                 CASH_2_LT_INVESTMENTS 
c    +                 BTL_AMORTIZATION -
     +                 - INTEREST_AMORTIZATION
     +                 - PS_PREM_ISSUE_EXP_AMORT
     +                 + NON_CASH_ATL_REVENUES
     +                 - BTL_AMORTIZATION_IN_EXPENSES
     +                 + DEBT_FILE_ISSUE_EXPENSE
     +                 - INTEREST_DIVIDENDS_ACCRUDED
     +                 - NEW_FINANCING_ACCRUALS
     +                 - COMMON_STOCK_DIV_ACCRUALS
     +                 - CASH_TIMING_ADJUSTMENTS
     +                 - TAXES_ACCRUAL_ADJ
     +                 + INVESTMENTS_MADE - INVESTMENTS_SOLD
     +                 + CASH_CHANGE_IN_NOTES_PAY_REC
     +                 + CASH_ADDS_2_INVENTORIES
     +                 + VACATION_PAY_CASH
     +                 + PENSION_EXPENSE_CASH
     +                 + STORM_EXPENSE_CASH
     +                 + LEASE_PRINCIPAL_PAYMENTS 
     +                 + ExecBenefitsCash
     +                 + IncentiveCompensationCash
               ENDIF
            ENDIF
            IF(IMPA()) THEN
               IF(OPERATING_METHOD == 'C') FUNDS = FUNDS
     +                                      + BOOK_DEPRECIATION         ! Dep
     +                                      + INTEREST_AMORTIZATION     !LTD Amort 
     +                                      - LONG_TERM_DEBT_RETIREMENTS      
            ENDIF
            FUNDS = FUNDS
     +              + FASB143_ARO_CASH_PAYMENTS
     +              + FASB143_ARO_TRUST_CASH_PAYMENTS
     +              + CASH_TO_POST_RETIRE_MEDICAL_BAL
     +              + CASH_TO_ACCRD_MBR_REVENUES_BAL
     +              - CASH_TO_CASH        ! 6/28/04
            IF(SALT_RIVER_PROJECT())  ! PLACE HOLDER FOR A NEW SWITCH
     +                           FUNDS = FUNDS + LT_INVESTMENTS_EARNINGS
            IF(SALT_RIVER_PROJECT()) THEN
               CLASS_REVENUE_TAX_REVENUES = TOTAL_BASE_RATES_REVENUES
     +                         + ADJUSTMENT_CLAUSE_REVENUES
     +                         + DEFERRED_REVENUES
     +                         - EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL)
C                FUNDS = FUNDS + NUCL_FUND_RETURN ! 6/29/04 ADDED TO NON_CASH_ATL_REVENUES
            ELSEIF(REVENUE_TAX_BASIS() == 'A') THEN
               CLASS_REVENUE_TAX_REVENUES = TOTAL_BASE_RATES_REVENUES
     +                       + ADJUSTMENT_CLAUSE_REVENUES
     +                       + CLASS_GAS_ADJ_CLAUSE_REVENUE
     +                       - EXCLUDED_REVENUE_TAX_BASIS_A(CLASS_LEVEL)
            ELSEIF(REVENUE_TAX_BASIS() == 'B') THEN
               CLASS_REVENUE_TAX_REVENUES = TOTAL_BASE_RATES_REVENUES
     +                       - EXCLUDED_REVENUE_TAX_BASIS_B(CLASS_LEVEL)
            ELSE
               CLASS_REVENUE_TAX_REVENUES =
     +                         OPERATING_REVENUES(2,CLASS_POS)
     +                         - EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL)
            ENDIF
            IF(PARENT_CLASS) THEN
               CASH_TAXES_RECEIVABLE_FROM_SUBS =
     +                                 SUBSIDARY_VARIABLES(26)          ! ATL FEDERAL TAXES
     +                                 + SUBSIDARY_VARIABLES(24)        ! ATL STATE TAXES
     +                                 + SUBSIDARY_VARIABLES(36)        ! BTL INCOME TAXES
     +                                 - SUB_FED_TAX_PAYMENTS_2_PARENT 
     +                                 - SUB_STATE_TAX_PAYMENTS_2_PARENT
               CONSOLIDATED_TAX_ADJUSTMENT = FEDERAL_TAXES
     +                                   + SUB_FED_TAX_PAYMENTS_2_PARENT ! THIS IS CASH NON BOOK
     +                                      - CONSOLIDATED_FEDERAL_TAXES
C              CONSOLIDATED_TAX_ADJUSTMENT = FEDERAL_TAXES +
C    +                                   SUB_FED_TAX_PAYMENTS_2_PARENT -
C    +                                   CONSOLIDATED_FEDERAL_TAXES_PAID
               FUNDS_CONSOLIDATING_ADJUSTMENT = PARENT_TAXES_PAID ! FEDERAL_TAXES +
     +                                 + SUB_FED_TAX_PAYMENTS_2_PARENT 
c     +                                 + SUB_STATE_TAX_PAYMENTS_2_PARENT
     +                                 - CONSOLIDATED_INCOME_TAXES_PAID !CONSOLIDATED_FEDERAL_TAXES
               CONSOLIDATED_TAX_LIB_ADJUSTMENT = FEDERAL_TAXES
     +                                      + SUBSIDARY_VARIABLES(26)   ! SUB ATL FED TAXES
     +                                      + SUBSIDARY_VARIABLES(302)  ! SUB BTL FED TAXES
     +                                      - CONSOLIDATED_FEDERAL_TAXES
c    +                                       CONSOLIDATED_TAX_ADJUSTMENT
C              CONSOLIDATED_TAX_ADJUSTMENT = FEDERAL_TAXES
C    +                                 - CONSOLIDATED_FEDERAL_TAXES
C    +                                 - CONSOLIDATED_FEDERAL_TAXES_PAID !CONSOLIDATED_FEDERAL_TAXES
C              CONSOLIDATED_TAX_ADJUSTMENT =
C    +                                    FUNDS_CONSOLIDATING_ADJUSTMENT
C              CONSOLIDATED_TAX_ADJUSTMENT = 0.
               FUNDS = FUNDS - FUNDS_CONSOLIDATING_ADJUSTMENT
C
C REMOVE EXCLUDED TAX BASIS FROM THE PARENT CALCULATIONS
C
C               OPERATING_REVENUE_TAX = OPREV_TAX_RATE *
C     +                               CLASS_REVENUE_TAX_REVENUES
C     +                               + ADJUSTMENT_2_OP_REV_TAX
C     +                               + EXCLUDED_REVENUE_TAX(CLASS_LEVEL)
C            ELSE! IF(PARENT_CLASS .OR. SUBSIDIARY_CLASS) THEN ! CLASS_TYPE(CLASS_POS) /= SBU .AND.
C    +                    CLASS_TYPE(CLASS_POS) /= REGULATED_GROUP) THEN ! PARENT OR SUB
C               OPERATING_REVENUE_TAX = OPREV_TAX_RATE *
C     +                               CLASS_REVENUE_TAX_REVENUES
C     +                               + ADJUSTMENT_2_OP_REV_TAX
C     +                               + EXCLUDED_REVENUE_TAX(CLASS_LEVEL)
c           ELSE
c              OPERATING_REVENUE_TAX = OPREV_TAX_RATE *
c    +                                      CLASS_REVENUE_TAX_REVENUES +
c    +                                           ADJUSTMENT_2_OP_REV_TAX
            ENDIF
C
            IF(UTILITY_TYPE() == 'T') THEN
               LAST_REVENUE_TAX_BASIS = CLASS_REVENUE_TAX_REVENUES
               CLASS_REVENUE_TAX_REVENUES =
     +                     OPERATING_REVENUE_TAX_LAGGED_BASIS(CLASS_POS)
            ENDIF
            IF(YEAR > LAST_AVAILABLE_MONTHLY_YEAR .OR.
     +                                  .NOT. MONTHLY_MIDAS_ACTIVE) THEN
               OPERATING_REVENUE_TAX = OPREV_TAX_RATE *
     +                               CLASS_REVENUE_TAX_REVENUES
     +                               + ADJUSTMENT_2_OP_REV_TAX
     +                               + EXCLUDED_REVENUE_TAX(CLASS_LEVEL)
            ENDIF
            CAPITAL_WITH_STD = COMMON_EQUITY(2,CLASS_POS)
     +                         + PREFERRED_STOCK(2,CLASS_POS)
     +                         + LONG_TERM_DEBT(2,CLASS_POS)
     +                         + SHORT_TERM_DEBT(2,CLASS_POS)
            IF(ITER > 1) THEN
               CALL SUMMARIZE_4_MONTHLY_NEEDS(CLASS_POS)
               CALL SET_NON_EQUIVALENCED_VARIABLES
            ENDIF
            GRE_DEBT_RETIREMENTS = LONG_TERM_DEBT_RETIREMENTS
     +                             + MTG_DEBT_RETIREMENTS
            DEPAMT = BOOK_DEPRECIATION 
     +               + ATL_AMORTIZATION
            OTHER_DD_AMORT =  ATL_AMORTIZATION
     +                        - GOODWILL_AMORT
     +                        - CLASS_REGULATORY_ASSETS_AMORT
     +                        - FASB_109_AMORT
     +                        - FASB_133_AMORT
     +                        - FASB143_ARO_INTEREST_ACCREATION
     +                        + CIAC_AMORTIZATION
            CALL INCOME_CONVERGENCE(ITER,INCOME_CONVERGED,
     +                         OPERATING_METHOD,
     +                         AFUDC_RETURN_POLICY,
     +                         COVERAGE_RATIO,FUNDS_BALANCE,
     +                         COMMON_EQUITY(1,CLASS_POS),
     +                         CAPITAL_WITH_STD,
     +                         OPERATING_REVENUES(2,CLASS_POS),
     +                         INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS),
     +                         OPERATING_REVENUE_TAX,
     +                         BTL_AMORTIZATION_IN_EXPENSES,
     +                         OTHER_TAXES,
     +                         DEF_TAXES_FROM_NOLS_AMT_CREDITS,
     +                         INTEREST_ON_LONG_TERM_DEBT,
     +                         LTD_PS_DEFERRED_TAX_CR,
     +                         NF_DEFERRED_TAXES_CR,
     +                         LTD_INTEREST_CASH_PAYMENTS,
     +                         LONG_TERM_DEBT_RETIREMENTS,
     +                         AFUDC_BORROWED,
     +                         MTG_DEBT_RETIREMENTS,
     +                         VARIABLE)
            CONVERGED = TAXES_CONVERGED(ITER) .AND.
     +                  DIVIDENDS_CONVERGED(ITER,AVERAGE_SHARES,
     +                                    DIVIDEND_PAYMENT_METHOD) .AND.  
     +                  INCOME_CONVERGED 
            IF(.NOT. CONVERGED .OR. ITER <= MIN_ITER) THEN
               QRT_DIVIDEND_ADDENDUM = 0.
               IF(SALT_RIVER_PROJECT()) THEN
                  MONTHLY_COMMON_DIVIDENDS(1:) = COMMON_DIVIDENDS/12.
                  MONTHLY_COMMON_DIVIDENDS(0) = COMMON_DIVIDENDS
               ELSE
                  IF(MONTHLY_MIDAS_ACTIVE .OR.
     +                                MONTHLY_COMMON_SHARES_ACTIVE) THEN
                     AVERAGE_SHARES = 0.
                     END_OF_MONTH_SHARES(0) = COMMON_SHARES(1,CLASS_POS)
                     DO MO = 1, 12
                        END_OF_MONTH_SHARES(MO) =
     +                                         END_OF_MONTH_SHARES(MO-1)
     +                                         + NET_MONTHLY_SHARES(MO)
                        IF(MO == 7) END_OF_MONTH_SHARES(MO) =
     +                                        END_OF_MONTH_SHARES(MO)
     +                                        + MODEL_ISSUED_SHARES
     +                                        + ADDENDUM_2_SHARES_ISSUED
                     ENDDO
                     AVERAGE_SHARES = SUM(END_OF_MONTH_SHARES(1:))/12.
                  ELSE
                     AVERAGE_SHARES = (COMMON_SHARES(1,CLASS_POS) +
     +                                    COMMON_SHARES(2,CLASS_POS))/2.
                  ENDIF
                  IF(DIVIDEND_PAYOUT_RATIO) THEN
                     MONTHLY_COMMON_DIVIDENDS = 0.
                     DO QRT = 1, 4
                        MO = CS_DECLARATION_MONTH(QRT)
                        MONTHLY_COMMON_DIVIDENDS(MO) =
     +                                      COMMON_DIVIDENDS/4.
     +                                      + QRT_DIVIDEND_ADDENDUM(QRT)
                     ENDDO
                  ELSEIF(DIVIDEND_PAYMENT_METHOD == DPS) THEN
                     IF(MONTHLY_MIDAS_ACTIVE .OR.
     +                                MONTHLY_COMMON_SHARES_ACTIVE) THEN
                        COMMON_DIVIDENDS = 0.
                        MONTHLY_COMMON_DIVIDENDS = 0.
                        DO QRT = 1, 4
                           IF(QRT_DIVIDEND_PER_SHARE(QRT) < 0.)
     +                          QRT_DIVIDEND_PER_SHARE(QRT) =
     +                                             DIVIDEND_PER_SHARE/4.
                           MO = CS_DECLARATION_MONTH(QRT)
                           LEAD_SHARE = MIN(12,MO + SHARE_LEAD)
                           EOQ_SHARES=END_OF_MONTH_SHARES(LEAD_SHARE)
                           MONTHLY_COMMON_DIVIDENDS(MO) =
     +                                    EOQ_SHARES
     +                                     * QRT_DIVIDEND_PER_SHARE(QRT)
     +                                    + QRT_DIVIDEND_ADDENDUM(QRT)
                        ENDDO
                     ELSE
                        DO QRT = 1, 4
                           IF(QRT_DIVIDEND_PER_SHARE(QRT) < 0.)
     +                          QRT_DIVIDEND_PER_SHARE(QRT) =
     +                                             DIVIDEND_PER_SHARE/4.
                           MO = CS_DECLARATION_MONTH(QRT)
                           IF(QRT <= 2) THEN
                              MONTHLY_COMMON_DIVIDENDS(MO) = 
     +                                  COMMON_SHARES(1,CLASS_POS) *
     +                                      QRT_DIVIDEND_PER_SHARE(QRT)
     +                                      + QRT_DIVIDEND_ADDENDUM(QRT)
                           ELSE
                              MONTHLY_COMMON_DIVIDENDS(MO) = 
     +                                  COMMON_SHARES(2,CLASS_POS) *
     +                                      QRT_DIVIDEND_PER_SHARE(QRT)
     +                                      + QRT_DIVIDEND_ADDENDUM(QRT)
                           ENDIF
                        ENDDO
C                        COMMON_DIVIDENDS = COMMON_SHARES(1,CLASS_POS) *
C     +                                     (QRT_DIVIDEND_PER_SHARE(1)
C     +                                      + QRT_DIVIDEND_PER_SHARE(2))
C     +                                  + COMMON_SHARES(2,CLASS_POS) *
C     +                                     (QRT_DIVIDEND_PER_SHARE(3)
C     +                                      + QRT_DIVIDEND_PER_SHARE(4))
C     +                                  + QRT_DIVIDEND_ADDENDUM(1)
C     +                                  + QRT_DIVIDEND_ADDENDUM(2)
C     +                                  + QRT_DIVIDEND_ADDENDUM(3)
C     +                                  + QRT_DIVIDEND_ADDENDUM(4)
                     ENDIF
                  ELSE
                     IF(MONTHLY_MIDAS_ACTIVE .OR.
     +                                MONTHLY_COMMON_SHARES_ACTIVE) THEN
                        MONTHLY_COMMON_DIVIDENDS(0) = COMMON_DIVIDENDS
                        EOQ_SHARES = 0
                        DO QRT = 1, 4
                           MO = CS_DECLARATION_MONTH(QRT)
                           LEAD_SHARE = MIN(12,MO + SHARE_LEAD)
                           EOQ_SHARES = EOQ_SHARES
     +                               + END_OF_MONTH_SHARES(LEAD_SHARE)
                        ENDDO
                        IF(EOQ_SHARES /= 0.) THEN
                           DIVIDEND_PER_SHARE = COMMON_DIVIDENDS/
     +                                                        EOQ_SHARES
                           DO QRT = 1, 4
                              QRT_DIVIDEND_PER_SHARE(QRT) =
     +                                                DIVIDEND_PER_SHARE
                              MO = CS_DECLARATION_MONTH(QRT)
                              LEAD_SHARE = MIN(12,MO + SHARE_LEAD)
                              MONTHLY_COMMON_DIVIDENDS(MO) =
     +                                   END_OF_MONTH_SHARES(LEAD_SHARE)
     +                                   * QRT_DIVIDEND_PER_SHARE(QRT)
                           ENDDO
                        ELSE
                           QRT_DIVIDEND_PER_SHARE = 0.
                           DO QRT = 1, 4
                              MO = CS_DECLARATION_MONTH(QRT)
                              MONTHLY_COMMON_DIVIDENDS(MO) =
     +                                      COMMON_DIVIDENDS/4.
     +                                      + QRT_DIVIDEND_ADDENDUM(QRT)
                           ENDDO
                        ENDIF
                     ENDIF ! MONTHLY ACTIVE OR SHARES ISSUED
                  ENDIF ! DIVIDEND METHOD
               ENDIF ! SRP
               MONTHLY_COMMON_DIVIDENDS(0) = 
     +                                 SUM(MONTHLY_COMMON_DIVIDENDS(1:))
               COMMON_DIVIDENDS = MONTHLY_COMMON_DIVIDENDS(0) 
C
               CALL ASSET_FINANCING(ITER,OPERATING_METHOD,
     +                              DIVIDEND_PAYMENT_METHOD,
     +                              EQUITY_DEFINITION,
     +                              FUNDS,
     +                              RETURN_MEASURE,
     +                              PREFERRED_STOCK(1,CLASS_POS) -
     +                                      PREFERRED_STOCK_RETIREMENTS,
     +                              DEBT_FILE_PREFERRED_DIVIDENDS,
     +                              COMMON_EQUITY(1,CLASS_POS),
     +                              SHORT_TERM_DEBT(1,CLASS_POS),
     +                              TOTAL_CAPITIAL(1,CLASS_POS),
     +                              LIQUID_INVESTMENTS(1,CLASS_POS),
     +                              COMMON_STOCK(1,CLASS_POS),
     +                              PS_ROLLOVER_DIVIVEND,
     +                              CLASS_TYPE(CLASS_POS),
C VARIABLE FOR REGULATED GROUP
     +                              ASSET_CLASS_RATE_BASE,
     +                              PREFERRED_STOCK(1,CLASS_POS),
     +                              LONG_TERM_DEBT(1,CLASS_POS),
     +                              PREFERRED_STOCK_RETIREMENTS,
     +                              LONG_TERM_DEBT_RETIREMENTS,
     +                              PS_PREM_ISSUE_EXP_AMORT,
     +                              COMMON_STOCK_DIV_ACCRUALS)
C
               IF(CLASS_TYPE(CLASS_POS) == SUBSIDIARY .AND.
     +                  ((DIVIDEND_PAYMENT_METHOD == DPS .AND.
     +                                  DIVIDEND_PER_SHARE /= 0.) .OR.
     +                   (DIVIDEND_PAYMENT_METHOD == DPR .AND.
     +                                 COMMON_PAYOUT_RATIO /= 0.))) THEN
c    +                             CLASS_TYPE(CLASS_POS) == PARENT) THEN
                  IF(RETAINED_EARNINGS < 0. .AND.
     +                (RETAINED_EARNINGS + REARNC(1,CLASS_POS)
     +                 + RETAINED_EARNINGS_ADJ) < 0. .and. .false.) THEN
                     COMMON_STOCK_ISSUED = COMMON_STOCK_ISSUED
     +                                   + RETAINED_EARNINGS
     +                                   + REARNC(1,CLASS_POS)
     +                                   + RETAINED_EARNINGS_ADJ
                     COMMON_DIVIDENDS = COMMON_DIVIDENDS
     +                                + RETAINED_EARNINGS
     +                                + REARNC(1,CLASS_POS)
     +                                + RETAINED_EARNINGS_ADJ
                     RETAINED_EARNINGS = -(REARNC(1,CLASS_POS)
     +                                     + RETAINED_EARNINGS_ADJ)
                  ENDIF
               ENDIF
               IF((MARKET_2_BOOK > 999. .OR. MARKET_2_BOOK <= 0.) .OR.
     +                                          .NOT. PARENT_CLASS) THEN
                  COMMON_SHARES(2,CLASS_POS)=COMMON_SHARES(1,CLASS_POS)
     +                                      + ADDENDUM_2_SHARES_ISSUED
     +                                      + DEBT_COMMON_SHARES_ISSUED
     +                                      - DEBT_COMMON_SHARES_BUYBACK
                  IF(COMMON_SHARES(2,CLASS_POS) <= 0.0001) THEN
C                     COMMON_SHARES(2,CLASS_POS) = .00001
                     BOOK_VALUE_STOCK(2,CLASS_POS) =
     +                                        COMMON_EQUITY(2,CLASS_POS)
                  ELSE
                     BOOK_VALUE_STOCK(2,CLASS_POS) =
     +                                      COMMON_EQUITY(2,CLASS_POS)/
     +                                        COMMON_SHARES(2,CLASS_POS)
                  ENDIF
               ELSE
                  BOOK_VALUE_STOCK(2,CLASS_POS) =
     +                                     BOOK_VALUE_STOCK(1,CLASS_POS)
                  DO I = 1, 20
                     PRIVIOUS_BOOK_VALUE = BOOK_VALUE_STOCK(2,CLASS_POS)
                     AVERAGE_STOCK_PRICE =
     +                    (BOOK_VALUE_STOCK(2,CLASS_POS)*MARKET_2_BOOK +
     +                             STOCK_PRICE_YEAR_END(1,CLASS_POS))/2.
                     IF(ABS(AVERAGE_STOCK_PRICE) > .001) THEN
                        MODEL_ISSUED_SHARES = 
     +                            ((COMMON_STOCK_ISSUED
     +                                       - DEBT_COMMON_STOCK_ISSUED)
     +                              -(COMMON_STOCK_BOUGHT
     +                                     -DEBT_COMMON_STOCK_BUYBACK))/
     +                                         AVERAGE_STOCK_PRICE
                        MODEL_ISSUED_SHARES = (COMMON_STOCK_ISSUED
     +                                     - DEBT_COMMON_STOCK_ISSUED
     +                                     + DEBT_COMMON_STOCK_BUYBACK)/
     +                                               AVERAGE_STOCK_PRICE
                        COMMON_SHARES(2,CLASS_POS) =
     +                                      COMMON_SHARES(1,CLASS_POS)
     +                                      + ADDENDUM_2_SHARES_ISSUED
     +                                      + DEBT_COMMON_SHARES_ISSUED
     +                                      - DEBT_COMMON_SHARES_BUYBACK
     +                                      + MODEL_ISSUED_SHARES
                     ELSE
                        COMMON_SHARES(2,CLASS_POS) =
     +                                      COMMON_SHARES(1,CLASS_POS)
     +                                      + ADDENDUM_2_SHARES_ISSUED
     +                                      + DEBT_COMMON_SHARES_ISSUED
     +                                      - DEBT_COMMON_SHARES_BUYBACK
                     ENDIF
                     IF(COMMON_SHARES(2,CLASS_POS) == 0.) THEN
C                       COMMON_SHARES(2,CLASS_POS) = .00001
                        BOOK_VALUE_STOCK(2,CLASS_POS) =
     +                                        COMMON_EQUITY(2,CLASS_POS)
                     ELSE
                        BOOK_VALUE_STOCK(2,CLASS_POS) =
     +                                       COMMON_EQUITY(2,CLASS_POS)/
     +                                        COMMON_SHARES(2,CLASS_POS)
                     ENDIF
                     IF(I > 3 .AND. PRIVIOUS_BOOK_VALUE ==
     +                               BOOK_VALUE_STOCK(2,CLASS_POS)) EXIT
                  ENDDO
               ENDIF
               STOCK_MARKET_PRICE = BOOK_VALUE_STOCK(2,CLASS_POS) *
     +                                                ABS(MARKET_2_BOOK)
            ENDIF ! convergence
C
C
            IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
C               OTHER_TAXES = CLASS_OTHER_TAXES_RATE/100. *
C     +                          (OPERATING_REVENUES(2,CLASS_POS)
C     +                           -EXCLUDED_OTHER_TAXES_REV(CLASS_LEVEL))
C     +                       + OTHER_TAXES_PERCENT_OF_EXPENSES/100. *
C     +                          (CLASS_NON_VARIABLE_EXPENSE
C     +                           -EXCLUDED_OTHER_TAXES_EXP(CLASS_LEVEL))
C     +                       + CLASS_ADDENDUM_2_OTHER_TAXES
C     +                       + EXCLUDED_OTHER_TAXES(CLASS_LEVEL)
c              INTEREST_ON_STD = STD_INTEREST_RATE *
c    +                            (SHORT_TERM_DEBT(1,CLASS_POS) +
c    +                                SHORT_TERM_DEBT(2,CLASS_POS))/2.
               INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS) =
     +                                   INTEREST_ON_STD
C    +                                   + CUSTOMER_DEPOSIT_INTEREST_ON
     +                                   + NOTES_PAYABLE_INTEREST
            ELSE   
               OTHER_TAXES = CLASS_OTHER_TAXES_RATE/100. *
     +                        (OPERATING_REVENUES(2,CLASS_POS)
     +                         - EXCLUDED_OTHER_TAXES_REV(CLASS_LEVEL))
     +                    + OTHER_TAXES_PERCENT_OF_EXPENSES/100. *
     +                        (CLASS_NON_VARIABLE_EXPENSE
     +                         - EXCLUDED_OTHER_TAXES_EXP(CLASS_LEVEL))
     +                    + CLASS_ADDENDUM_2_OTHER_TAXES
     +                    + EXCLUDED_OTHER_TAXES(CLASS_LEVEL)
               IF(STD_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
                  INTEREST_ON_STD = STD_FIRST_HALF_RATE *
     +                                 SHORT_TERM_DEBT(1,CLASS_POS)
     +                              + STD_SECOND_HALF_RATE *
     +                                      SHORT_TERM_DEBT(2,CLASS_POS)
     +                              + STD_INTEREST_ADDEN
               ELSE
                  INTEREST_ON_STD = STD_INTEREST_RATE *
     +                               (SHORT_TERM_DEBT(1,CLASS_POS)
     +                                + SHORT_TERM_DEBT(2,CLASS_POS))/2.
     +                              + STD_INTEREST_ADDEN
               ENDIF
               INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS) =
     +                                   INTEREST_ON_STD 
     +                                   + CUSTOMER_DEPOSIT_INTEREST_ON 
     +                                   + NOTES_PAYABLE_INTEREST
            ENDIF
            TOTAL_CAPITIAL(2,CLASS_POS) = COMMON_EQUITY(2,CLASS_POS) +
     +                                    PREFERRED_STOCK(2,CLASS_POS) +
     +                                    LONG_TERM_DEBT(2,CLASS_POS)
            IF(COUNTRY_NOT_USA) THEN
               AMOUNT_OF_TAXED_CAPITAL = TOTAL_CAPITIAL(2,CLASS_POS) +
     +                                   DEF_TAX_CR_BALANCE(2,CLASS_POS)
            ELSE
               AMOUNT_OF_TAXED_CAPITAL = TOTAL_CAPITIAL(2,CLASS_POS)
            ENDIF
            STATE_TAX_ON_CAPITAL = PROVINCIAL_CAPITAL_TAX_RATE/100. *
     +               MAX(0.,AMOUNT_OF_TAXED_CAPITAL -
     +                   PROVINCIAL_CAP_TAX_DEDUCTION -
     +                   EXCLUDE_CAPITAL_TAX_STATE_BASIS(CLASS_LEVEL)) +
     +                         EXCLUDE_CAPITAL_TAXES_STATE(CLASS_LEVEL)+
     +                         PROVINCIAL_CAP_TAX_ADDENDUM
            FEDERAL_TAX_ON_CAPITAL = FEDERAL_CAPITAL_TAX_RATE/100. *
     +               MAX(0.,AMOUNT_OF_TAXED_CAPITAL -
     +                     FEDERAL_CAPITAL_TAX_DEDUCTION -
     +                     EXCLUDE_CAPITAL_TAX_FED_BASIS(CLASS_LEVEL)) +
     +                           FEDERAL_CAPITAL_TAX_ADDENDUM
C           CALL TAXES(OPERATING_METHOD,RUN_YEAR,SPMETH,BASE_YEAR,
C    +                                               TYPETAXPAID,INTLTD)
            IF(.NOT. IOU_UTILITY) THEN
               FDTAXPAID = TITCPY
               DEFERRED_TAXES_DR = 0.
               BTL_DEFERRED_TAXES_DR = 0.
               TOTAL_DEFERRED_TAXES_DR = 0.
            ENDIF
C
C END FINANCING LOOP
C
            IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
               CHANGE_IN_CASH = LIQUID_INVESTMENTS(2,CLASS_POS)
     +                          - LIQUID_INVESTMENTS(1,CLASS_POS)
C    +                          + CASH_2_LT_INVESTMENTS
            ELSE
               CHANGE_IN_CASH = LIQUID_INVESTMENTS(2,CLASS_POS)
     +                          - LIQUID_INVESTMENTS(1,CLASS_POS)
     +                          + CASH_2_LT_INVESTMENTS
               IF(LONG_TERM_INVESTMENTS(CLASS_POS) +
     +            CASH_2_LT_INVESTMENTS < MIN_LONG_TERM_INVESTMENT) THEN
                  CASH_2_LT_INVESTMENTS = MIN_LONG_TERM_INVESTMENT -
     +                                  LONG_TERM_INVESTMENTS(CLASS_POS)
                  STI_CHANGE_IN_CASH =
     +                              CHANGE_IN_CASH-CASH_2_LT_INVESTMENTS
               ELSEIF(LONG_TERM_INVESTMENTS(CLASS_POS) +
     +           CASH_2_LT_INVESTMENTS >= MAX_LONG_TERM_INVESTMENT) THEN
                     CASH_2_LT_INVESTMENTS = MAX_LONG_TERM_INVESTMENT -
     +                                  LONG_TERM_INVESTMENTS(CLASS_POS)
                  STI_CHANGE_IN_CASH =
     +                              CHANGE_IN_CASH-CASH_2_LT_INVESTMENTS
               ELSE
                  STI_CHANGE_IN_CASH =
     +                              CHANGE_IN_CASH-CASH_2_LT_INVESTMENTS
                  IF(LIQUID_INVESTMENTS(1,CLASS_POS)+STI_CHANGE_IN_CASH> 
     +                                   MAX_SHORT_TERM_INVESTMENT) THEN
                     STI_CHANGE_IN_CASH = MAX_SHORT_TERM_INVESTMENT -
     +                                   LIQUID_INVESTMENTS(1,CLASS_POS)
                     CASH_2_LT_INVESTMENTS = CHANGE_IN_CASH
     +                                       - STI_CHANGE_IN_CASH
                     LIQUID_INVESTMENTS(2,CLASS_POS) =
     +                                         MAX_SHORT_TERM_INVESTMENT
                  ENDIF
               ENDIF
            ENDIF
            IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
               LIQUID_INVESTMENTS(2,CLASS_POS) = STI_CHANGE_IN_CASH +
     +                                   LIQUID_INVESTMENTS(1,CLASS_POS)
            ELSE
               LIQUID_INVESTMENTS(2,CLASS_POS) = STI_CHANGE_IN_CASH +
     +                                   LIQUID_INVESTMENTS(1,CLASS_POS)
               LT_INVESTMENTS_EARNINGS =
     +                      (LTI_FIRST_HALF_RATE *
     +                                  LONG_TERM_INVESTMENTS(CLASS_POS)
     +                      + LTI_SECOND_HALF_RATE *
     +                                 (LONG_TERM_INVESTMENTS(CLASS_POS)
     +                                  + CASH_2_LT_INVESTMENTS))/2.
     +                      + ADJ_2_EARNINGS_LT_INVESTMENTS
               ST_INVESTMENT_EARNINGS = (STI_FIRST_HALF_RATE * 
     +                                   LIQUID_INVESTMENTS(1,CLASS_POS)
     +                           + STI_SECOND_HALF_RATE *
     +                               LIQUID_INVESTMENTS(2,CLASS_POS))/2.
     +                           + ADJ_2_EARNINGS_ST_INVESTMENTS
            ENDIF
            IF(SALT_RIVER_PROJECT()) THEN ! PASS DECOM RETURN THROUGH INCOME
               INVESTMENT_INCOME = ST_INVESTMENT_EARNINGS
     +                             + RETIREMENT_MEDICAL_FUND_RETURN
     +                             + LT_INVESTMENTS_EARNINGS
     +                             + NUCL_FUND_RETURN
     +                             + INTEREST_INCOME_AFILLIATES
     +                             + DEBT_FILE_INVESTMENT_INCOME
     +                             + Exp_InterestIncome
     +                             + Exp_Dividends
               INVESTMENT_INCOME_RECEIVABLE = ST_INVESTMENT_EARNINGS
     +                                     + LT_INVESTMENTS_EARNINGS
     +                                     + INTEREST_INCOME_AFILLIATES
     +                                     + DEBT_FILE_INVESTMENT_INCOME
     +                                     + Exp_InterestIncome
     +                                     + Exp_Dividends
            ELSE
               INVESTMENT_INCOME = ST_INVESTMENT_EARNINGS
     +                             + RETIREMENT_MEDICAL_FUND_RETURN
     +                             + LT_INVESTMENTS_EARNINGS
C    +                             + NUCL_FUND_RETURN
     +                             + INTEREST_INCOME_AFILLIATES
     +                             + DEBT_FILE_INVESTMENT_INCOME
     +                             + Exp_InterestIncome
     +                             + Exp_Dividends
               IF(RETAIN_POST_RETIREMENT_EARNINGS()) THEN
                  INVESTMENT_INCOME_RECEIVABLE = ST_INVESTMENT_EARNINGS
     +                                  + LT_INVESTMENTS_EARNINGS
     +                                  + INTEREST_INCOME_AFILLIATES
     +                                  + DEBT_FILE_INVESTMENT_INCOME
     +                                  + Exp_InterestIncome
     +                                  + Exp_Dividends
               ELSE
                  INVESTMENT_INCOME_RECEIVABLE = ST_INVESTMENT_EARNINGS
     +                                  + RETIREMENT_MEDICAL_FUND_RETURN
     +                                  + LT_INVESTMENTS_EARNINGS
     +                                  + INTEREST_INCOME_AFILLIATES
     +                                  + DEBT_FILE_INVESTMENT_INCOME
     +                                  + Exp_InterestIncome
     +                                  + Exp_Dividends
               ENDIF
            ENDIF
C
            IF(REGULATED_CAPATIAL_STRUCTURE) THEN
               INTEREST_ON_LONG_TERM_DEBT=LTDRTE*ASSET_CLASS_RATE_BASE *
     +                                          (1. - (EQRATO + PSRATO))
               LTD_ISSUE_YR_INTEREST_PAYMENT=INTEREST_ON_LONG_TERM_DEBT
               LTD_ISSUE_YR_INTEREST_BOOKED = INTEREST_ON_LONG_TERM_DEBT
               PS_ISSUE_YR_DIVIDEND_PAYMENT = PREFERRED_DIVIDENDS
               PS_ISSUE_YR_DIVIDEND_BOOKED = PREFERRED_DIVIDENDS
               STD_INTEREST_CASH_PAYMENT =
     +                          INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)
               LTD_LAGGED_INTEREST_PAYMENT = 0.
               PS_LAGGED_DIVIDEND_PAYMENT = 0.
               INTEREST_DIVIDENDS_ACCRUDED = 0.
            ELSE
               PS_ISSUE_YR_DIVIDEND_BOOKED = PSRATE *
     +            (PREFERRED_STOCK_ISSUED-DEBT_FILE_PREFERRED_ISSUED)/2.
C
C LTD ITEMS REQUIRE THE MONTHLY SPLIT TO GET INTEREST CORRECT 5/5/99 MSG
C
               IF(ACCURAL_ACCOUNTING_ACTIVE) THEN ! SAME AS MONTHLY ACTIVE 5/5/99
                  IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
                     STD_INTEREST_CASH_PAYMENT = STD_INTEREST_OWED
                     IF(CPL_IS_ACTIVE) THEN
                        CALL MONTHLY_LTD_BOOKED_NEW_ISSUES(
     +                                    MTG_DEBT_RETIREMENTS,
     +                                    LTD_ISSUE_YR_INTEREST_BOOKED,
     +                                    LTD_ISSUE_YR_INTEREST_PAYMENT)
                     ELSE ! CPL IS THE ONLY ONE WITH THE NON MID-YEAR ISSUE STRUCTURE
                        IF(MORTGAGE_DEBT) THEN
C                           CALL MTG_PRIN_INTR(LTDRTE,LDLIFE,
C     +                                   LONG_TERM_DEBT_ISSUED
C     +                                            -DEBT_FILE_LTD_ISSUED,
C     +                                    LTD_ISSUE_YR_INTEREST_BOOKED,
C     +                                    LTD_ISSUE_YR_INTEREST_PAYMENT,
C     +                                    MTG_DEBT_RETIREMENTS)
                           CALL MONTHLY_LTD_BOOKED_NEW_ISSUES(
     +                                    MTG_DEBT_RETIREMENTS,
     +                                    LTD_ISSUE_YR_INTEREST_BOOKED,
     +                                    LTD_ISSUE_YR_INTEREST_PAYMENT)
                        ELSE
                           LTD_ISSUE_YR_INTEREST_BOOKED = LTDRTE *
     +                        (LONG_TERM_DEBT_ISSUED
     +                                         -DEBT_FILE_LTD_ISSUED)/2.
                           LTD_ISSUE_YR_INTEREST_PAYMENT = LTDRTE *
     +                        (LONG_TERM_DEBT_ISSUED
     +                                         -DEBT_FILE_LTD_ISSUED)/4.
                           MTG_DEBT_RETIREMENTS = 0.
                        ENDIF
                     ENDIF
                  ELSE
                    IF(MORTGAGE_DEBT) THEN
                        IF(LONG_TERM_DEBT_ISSUED
     +                               -DEBT_FILE_LTD_ISSUED > .0001) THEN
                           CALL MTG_PRIN_INTR(LTDRTE,LDLIFE,
     +                                     LONG_TERM_DEBT_ISSUED
     +                                            -DEBT_FILE_LTD_ISSUED,
     +                                    LTD_ISSUE_YR_INTEREST_BOOKED,
     +                                    LTD_ISSUE_YR_INTEREST_PAYMENT,
     +                                    MTG_DEBT_RETIREMENTS)
                        ELSE
                           LTD_ISSUE_YR_INTEREST_BOOKED = 0.
                           LTD_ISSUE_YR_INTEREST_PAYMENT = 0.
                           MTG_DEBT_RETIREMENTS = 0.
                        ENDIF
                    ELSE
                        LTD_ISSUE_YR_INTEREST_BOOKED = LTDRTE *
     +                   (LONG_TERM_DEBT_ISSUED-DEBT_FILE_LTD_ISSUED)/2.
                        LTD_ISSUE_YR_INTEREST_PAYMENT = LTDRTE *
     +                   (LONG_TERM_DEBT_ISSUED-DEBT_FILE_LTD_ISSUED)/4.
                        MTG_DEBT_RETIREMENTS = 0.
                     ENDIF
                     STD_INTEREST_CASH_PAYMENT =
C     +                          INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)
     +                                   INTEREST_ON_STD 
     +                                   + CUSTOMER_DEPOSIT_INTEREST_ON 
     +                                   + NOTES_PAYABLE_INTEREST
                  ENDIF
                  LTD_LAGGED_INTEREST_PAYMENT = 
     +                                   LTD_ISSUE_YR_INTEREST_BOOKED
     +                                   - LTD_ISSUE_YR_INTEREST_PAYMENT
C    +                                   - LTD_ROLLOVER_INTEREST
                  IF(EMPIRE_IS_ACTIVE) THEN
                     PS_ISSUE_YR_DIVIDEND_PAYMENT = PSRATE *
     +                               (PREFERRED_STOCK_ISSUED
     +                                  - DEBT_FILE_PREFERRED_ISSUED)/2.
                  ELSE
                     PS_ISSUE_YR_DIVIDEND_PAYMENT = PSRATE *
     +                               (PREFERRED_STOCK_ISSUED
     +                                  - DEBT_FILE_PREFERRED_ISSUED)/4.
                  ENDIF
                  PS_LAGGED_DIVIDEND_PAYMENT = 
     +                                    PS_ISSUE_YR_DIVIDEND_BOOKED
     +                                    - PS_ISSUE_YR_DIVIDEND_PAYMENT
C    +                                    - PS_ROLLOVER_DIVIVEND
               ELSE
                  IF(MORTGAGE_DEBT) THEN
                     IF(LONG_TERM_DEBT_ISSUED
     +                               -DEBT_FILE_LTD_ISSUED > .0001) THEN
                        CALL MTG_PRIN_INTR(LTDRTE,LDLIFE,
     +                                     LONG_TERM_DEBT_ISSUED
     +                                            -DEBT_FILE_LTD_ISSUED,
     +                                    LTD_ISSUE_YR_INTEREST_BOOKED,
     +                                    LTD_ISSUE_YR_INTEREST_PAYMENT,
     +                                    MTG_DEBT_RETIREMENTS)
                     ELSE
                           LTD_ISSUE_YR_INTEREST_BOOKED = 0.
                           LTD_ISSUE_YR_INTEREST_PAYMENT = 0.
                           MTG_DEBT_RETIREMENTS = 0.
                     ENDIF
                  ELSE
                     LTD_ISSUE_YR_INTEREST_BOOKED = LTDRTE *
     +                   (LONG_TERM_DEBT_ISSUED-DEBT_FILE_LTD_ISSUED)/2.
                     LTD_ISSUE_YR_INTEREST_PAYMENT =
     +                                      LTD_ISSUE_YR_INTEREST_BOOKED
                  ENDIF
                  LTD_LAGGED_INTEREST_PAYMENT = 0.
                  PS_LAGGED_DIVIDEND_PAYMENT = 0.
                  PS_ISSUE_YR_DIVIDEND_PAYMENT =
     +                                       PS_ISSUE_YR_DIVIDEND_BOOKED
                  STD_INTEREST_CASH_PAYMENT =
C     +                          INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)
     +                                   INTEREST_ON_STD 
     +                                   + CUSTOMER_DEPOSIT_INTEREST_ON 
     +                                   + NOTES_PAYABLE_INTEREST
               ENDIF
               INTEREST_ON_LONG_TERM_DEBT = LTDINT(YR,CLASS_POS)
     +                                    + LTD_ISSUE_YR_INTEREST_BOOKED
     +                                    + LTD_ROLLOVER_INTEREST
            ENDIF
            INTEREST = INTEREST_ON_LONG_TERM_DEBT
     +                 + INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)
C
C START OF INCOME TAX CALCULATIONS
C
            TAXABLE_INVESTMENT_INCOME = INVESTMENT_INCOME
     +                                  -.7*DIVIDEND_70_NONTAXABLE !ONLY 30% TAXABLE
     +                                  - RETIREMENT_MEDICAL_FUND_RETURN
            IF(WKP_ACTIVE) THEN
               OTHER_TAXABLE_INCOME = CLASS_BTL_REVENUES -
     +                                           OTHER_INCOME_NET_OF_TAX
               TAXABLE_INCOME = OPERATING_REVENUES(2,CLASS_POS)
     +                          - TOTAL_CASH_EXPENSES
     +                          + OTHER_TAXABLE_INCOME
     +                          + TAXABLE_INVESTMENT_INCOME
     +                          - CLASS_BTL_EXPENSES
     +                          - INTEREST
     +                          - OPERATING_REVENUE_TAX
     +                          - OTHER_TAXES
     +                          - Payroll_Taxes
     +                          - CLASS_PROPERTY_TAXES
     +                          - BOOK_DEPRECIATION
     +                          - AMORTIZATION_EXPENSE
     +                          - SALVAGE_TRANSACTIONS
     +                          - EXPENSING_MATRIALS_INVENTORY
     +                          - EXPENSING_GAS_INVENTORY
     +                          - EXPENSING_FUEL_INVENTORY
               FEDERAL_TAXES = FEDERAL_TAX_RATE * TAXABLE_INCOME
               LOCAL_TAXES = ADJ_2_LOCAL_TAXES
               STATE_TAXABLE_INCOME = TAXABLE_INCOME
               STATE_TAXABLE_INCOME_AFTER_NOLS = STATE_TAXABLE_INCOME  
               STATE_TAXES = STATE_TAX_RATE * 
     +               STATE_TAXABLE_INCOME_AFTER_NOLS + ADJ_2_STATE_TAXES
               FEDERAL_TAXABLE_INCOME = TAXABLE_INCOME 
               FED_TAXABLE_INCOME_AFTER_NOLS = FEDERAL_TAXABLE_INCOME
               FEDERAL_TAXES = FEDERAL_TAX_RATE *
     +                                   FED_TAXABLE_INCOME_AFTER_NOLS +
     +                                        ADJ_2_FEDERAL_TAXES -
     +                                       (FED_TAX_CREDIT_PASSED_UP +
     +                                        SEC_29_CREDITS_PASSED_UP +
     +                                        SEC_42_CREDITS_PASSED_UP)
            ELSE ! ENDIF
               IF(MONTHLY_MIDAS_ACTIVE .AND.  .FALSE. .AND.
     +              YEAR<=LAST_AVAILABLE_MONTHLY_YEAR .AND. ITER>1) THEN
               ELSE
                  OTHER_TAXABLE_INCOME = CLASS_BTL_REVENUES - 
     +                                   CATAWBA_OTHER_NET_REVENUES -
     +                                   OTHER_INCOME_NET_OF_TAX
                  IF(UI()) THEN
                     PENSION_TAX_DEDUCTION = PENSION_EXPENSE_CASH     ! 689
                     STORM_TAX_DEDUCTION = STORM_EXPENSE_CASH         ! 690
                     VACATION_TAX_DEDUCTION = VACATION_PAY_CASH      ! 691
                  ELSE
                     PENSION_TAX_DEDUCTION = PENSION_EXPENSE_NON_CASH      ! 689
                     STORM_TAX_DEDUCTION = STORM_EXPENSE_NON_CASH         ! 690
                     VACATION_TAX_DEDUCTION = VACATION_PAY_NON_CASH      ! 691
                  ENDIF
                  PENSION_VAC_storm_TAX_EXP = PENSION_TAX_DEDUCTION
     +                                       + STORM_TAX_DEDUCTION
     +                                       + VACATION_TAX_DEDUCTION
     +                                       + ExecBenefitsCash
     +                                       + IncentiveCompensationCash
                  TAXABLE_INCOME = OPERATING_REVENUES(2,CLASS_POS)
     +                             - TOTAL_CASH_EXPENSES
     +                             + NF_CASH_EXPENSE
     +                             - NF_TAX_EXPENSE
     +                             - INCOME_TAX_DEPRECIATION
     +                             + OTHER_TAXABLE_INCOME
     +                             + TAXABLE_INVESTMENT_INCOME
     +                             - CLASS_BTL_EXPENSES
     +                             - BTL_NUC_FUEL_DECOM_LIABILITY
     +                             - INTEREST
     +                             + CAPITIALIZED_INTEREST
     +                             - CONSTRUCTION_TAX_EXPENSE
     +                             - ENVIRONMENTAL_TAX
     +                             - OPERATING_REVENUE_TAX
     +                             - Payroll_Taxes
     +                             - OTHER_TAXES
     +                             - CLASS_PROPERTY_TAXES
     +                             - SALVAGE_TRANSACTIONS
     +                             - PENSION_VAC_storm_TAX_EXP
     +                             - EXPENSING_MATRIALS_INVENTORY
     +                             - EXPENSING_GAS_INVENTORY
     +                             - EXPENSING_FUEL_INVENTORY
                  LOCAL_TAXES = LOCAL_TAX_RATE/100.*TAXABLE_INCOME + 
     +                                                 ADJ_2_LOCAL_TAXES
                  STATE_TAXABLE_INCOME = TAXABLE_INCOME - 
     +                                STATE_INCOME_TAX_DEDUCTIONS -
     +                             STATE_DEDUC_PERCT_OF_TIB4DEDUC/100.*
     +                                                    TAXABLE_INCOME
C     LOGICAL*1 USE_STATE_TAX_BENEFITS_NOW
C     USE_STATE_TAX_BENEFITS_NOW = .TRUE.
c                 USE_ALL_STATE_TAX_BENEFITS_NOW=.NOT.PARENT_CLASS .AND.
c    +                                        USE_STATE_TAX_BENEFITS_NOW
                  USE_ALL_STATE_TAX_BENEFITS_NOW= ! .NOT.PARENT_CLASS .AND.
     +                                        USE_STATE_TAX_BENEFITS_NOW
                  USE_ALL_FED_TAX_BENEFITS_NOW = .NOT.PARENT_CLASS .AND.
     +                                          USE_ALL_FED_TAX_BENEFITS
                  IF(USE_ALL_STATE_TAX_BENEFITS_NOW) THEN
                     STATE_TAXABLE_INCOME_AFTER_NOLS = 
     +                   ADJUST_4_STATE_NOLS(CLASS,STATE_TAXABLE_INCOME,
     +                                   USE_ALL_STATE_TAX_BENEFITS_NOW)
                  
                  ELSE
                     IF(CLASS_TYPE(CLASS_POS) == SBU .OR.
     +                    CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN ! LET SBU HAVE NEGATIVE TAXES
                        STATE_TAXABLE_INCOME_AFTER_NOLS =
     +                                              STATE_TAXABLE_INCOME 
                     ELSE   
                        STATE_TAXABLE_INCOME_AFTER_NOLS = 
     +                   ADJUST_4_STATE_NOLS(CLASS,STATE_TAXABLE_INCOME,
     +                                   USE_ALL_STATE_TAX_BENEFITS_NOW)
                     ENDIF
                  ENDIF
                  STATE_TAXES_B4_CREDITS_ADJTS = STATE_TAX_RATE * 
     +                                   STATE_TAXABLE_INCOME_AFTER_NOLS
                  STATE_CREDITS_USED = ADJUST_4_STATE_CREDITS(CLASS,
     +                                   STATE_TAXES_B4_CREDITS_ADJTS,
     +                                   STATE_TAX_CREDIT_PASSED_UP,
     +                                   USE_ALL_STATE_TAX_BENEFITS_NOW)
                  STATE_TAXES = STATE_TAXES_B4_CREDITS_ADJTS
     +                          - STATE_CREDITS_USED
     +                          + ADJ_2_STATE_TAXES !set this adj to match to actual
C    +                          + CALCULATED_2_ACTUAL_STATE_ADJ
C
                  IF(USE_ACTUAL_STATE_TAXES) THEN
                     CALCULATED_2_ACTUAL_STATE_ADJ =
     +                                           ANNUAL_STATE_INCOME_TAX
     +                                           - STATE_TAXES 
                     STATE_TAXES = ANNUAL_STATE_INCOME_TAX
                  ENDIF
C
C FEDERAL TAX CALCULATIONS
C
                  FEDERAL_TAXABLE_INCOME = TAXABLE_INCOME 
     +                              - LOCAL_TAXES
     +                              - STATE_TAXES
     +                              - FED_INCOME_TAX_DEDUCTIONS  
     +                              - STATE_TAX_ON_CAPITAL  
     +                              - FED_DEDUC_PERCT_OF_TIB4DEDUC/100.*
     +                                                    TAXABLE_INCOME
C    +                               -ENVIRONMENTAL_TAX
C
C ADJUSTMENT TO AMT AND EINVIRONMENTAL 1/7/98
C
                  AMTINCOME =  FEDERAL_TAXABLE_INCOME +
     +                      TAX_PREFERENCE_DEPRECIATION +
     +                      min(0.,.75*(-ACE_TAX_DEPRECIATION -
     +                               TAX_PREFERENCE_DEPRECIATION)) +
     +                      AMT_INCOME_ADDENDUM
C
                  AMTINCOME = ADJUST_4_AMT_NOLS(CLASS,AMTINCOME)
                  IF(IOU_UTILITY.AND.CALCULATE_ENVIRONMENTAL_TAX()) THEN
                     ENVIRONMENTAL_TAX = .0012 * MAX(0.,AMTINCOME-2.)
                  ELSE
                     ENVIRONMENTAL_TAX = 0.
                  ENDIF
C                 AMTINCOME = AMTINCOME - ENVIRONMENTAL_TAX
                  AMT_CREDITS_CREATED = 0.
                  AMT_CREDITS_USED = 0.
C     LOGICAL*1 USE_ALL_FED_TAX_BENEFITS
C        USE_ALL_FED_TAX_BENEFITS = .TRUE. ! .false. ! needs to be true for KCP&L
                  FED_DEFERRED_TAXES_FROM_NOL = 0.
                  STATE_DEFERRED_TAXES_FROM_NOL = 0.
C
                  IF(CLASS_TYPE(CLASS_POS) == SBU .OR.
     +                    CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN ! LET SBU HAVE NEGATIVE TAXES
                     FED_TAXABLE_INCOME_AFTER_NOLS =
     +                                            FEDERAL_TAXABLE_INCOME
                     FED_TAXES_B4_CREDITS_ADJTS = FEDERAL_TAX_RATE *
     +                                     FED_TAXABLE_INCOME_AFTER_NOLS
                     FED_CREDITS_USED = FED_TAX_CREDIT_PASSED_UP
                     SEC_29_CREDITS_USED = SEC_29_CREDITS_PASSED_UP
                     SEC_42_CREDITS_USED = SEC_42_CREDITS_PASSED_UP
                  ELSEIF(INDEX(CLASS_NAME(CLASS_POS),'Monta') /= 0 .AND.
     +                                           MONTAUK_IS_ACTIVE) THEN
                     FED_TAXABLE_INCOME_AFTER_NOLS =
     +                                            FEDERAL_TAXABLE_INCOME
                     FED_TAXES_B4_CREDITS_ADJTS = FEDERAL_TAX_RATE *
     +                                     FED_TAXABLE_INCOME_AFTER_NOLS
                     FED_CREDITS_USED = FED_TAX_CREDIT_PASSED_UP
                     SEC_29_CREDITS_USED = SEC_29_CREDITS_PASSED_UP
                     SEC_42_CREDITS_USED = SEC_42_CREDITS_PASSED_UP
                  ELSEIF(USE_ALL_FED_TAX_BENEFITS_NOW) THEN
                     FED_TAXABLE_INCOME_AFTER_NOLS =
     +                                            FEDERAL_TAXABLE_INCOME
                     FED_TAXES_B4_CREDITS_ADJTS = FEDERAL_TAX_RATE *
     +                                     FED_TAXABLE_INCOME_AFTER_NOLS
                     FED_CREDITS_USED = FED_TAX_CREDIT_PASSED_UP
                     SEC_29_CREDITS_USED = SEC_29_CREDITS_PASSED_UP
                     SEC_42_CREDITS_USED = SEC_42_CREDITS_PASSED_UP
                  ELSE   
                     FED_TAXABLE_INCOME_AFTER_NOLS =
     +                   ADJUST_4_FED_NOLS(CLASS,FEDERAL_TAXABLE_INCOME)
C
C NEED TO ACCOUNT 4 NOLs AT THE SUB LEVEL USING DIT(DR)
                     IF(CLASS_TYPE(CLASS_POS) == SUBSIDIARY .OR.
     +                                                PARENT_CLASS) THEN
                        FED_DEFERRED_TAXES_FROM_NOL = FEDERAL_TAX_RATE *
     +                                 (FEDERAL_TAXABLE_INCOME
     +                                  - FED_TAXABLE_INCOME_AFTER_NOLS)
                        STATE_DEFERRED_TAXES_FROM_NOL = STATE_TAX_RATE * 
     +                               (STATE_TAXABLE_INCOME
     +                                - STATE_TAXABLE_INCOME_AFTER_NOLS)
                     ENDIF 
                     IF(COUNTRY_NOT_USA .OR. .NOT. IOU_UTILITY) THEN
                        FED_TAXES_B4_CREDITS_ADJTS = FEDERAL_TAX_RATE *
     +                                     FED_TAXABLE_INCOME_AFTER_NOLS
                        FED_CREDITS_USED = FED_TAX_CREDIT_PASSED_UP
                        SEC_29_CREDITS_USED = SEC_29_CREDITS_PASSED_UP
                        SEC_42_CREDITS_USED = SEC_42_CREDITS_PASSED_UP
                     ELSE
                        IF(CALCULATE_AMT) THEN
                           AMT_MINIMUM_TAX = .20 * AMTINCOME
                        ELSE                
                           AMT_MINIMUM_TAX = 0.
                        ENDIF
                        IF(USE_FED_TAX_TABLE .AND.
     +                                  .NOT. MONTHLY_MIDAS_ACTIVE) THEN
                           FED_TAXES_B4_CREDITS_ADJTS =
     +                           FEDERAL_TAX_TABLE(
     +                                    FED_TAXABLE_INCOME_AFTER_NOLS)
                        ELSE
                           FED_TAXES_B4_CREDITS_ADJTS=FEDERAL_TAX_RATE *
     +                                     FED_TAXABLE_INCOME_AFTER_NOLS
                        ENDIF
                        FED_CREDITS_USED = ADJUST_4_FED_CREDIT(CLASS,
     +                                       AMT_MINIMUM_TAX,
     +                                       FED_TAXES_B4_CREDITS_ADJTS,
     +                                       FED_TAX_CREDIT_PASSED_UP,
     +                                       SEC_29_CREDITS_PASSED_UP,
     +                                       SEC_42_CREDITS_PASSED_UP,
     +                                       SEC_29_CREDITS_USED,
     +                                       AMT_CREDITS_USED,
     +                                       AVAILCREDIT(1,CLASS_POS))
                        IF(AMT_CREDITS_USED < 0.) THEN
                           AMT_CREDITS_CREATED = -AMT_CREDITS_USED
                           AMT_CREDITS_USED = 0.
                        ELSE   
                           AMT_CREDITS_CREATED = 0.
                        ENDIF
                        DEF_TAXES_FROM_NOLS_AMT_CREDITS =
     +                            AMT_CREDITS_CREATED - AMT_CREDITS_USED
     +                            - FED_DEFERRED_TAXES_FROM_NOL
     +                            - STATE_DEFERRED_TAXES_FROM_NOL
                     ENDIF
                  ENDIF
C
C ADJUST FOR CREDITS AND ADJUSTMENTS
C
                  FEDERAL_TAXES = FED_TAXES_B4_CREDITS_ADJTS
     +                                 + ADJ_2_FEDERAL_TAXES
     +                                 - (FED_CREDITS_USED
     +                                    + SEC_29_CREDITS_USED
     +                                    + SEC_42_CREDITS_USED)
     +                                 - AMT_CREDITS_USED
     +                                 + AMT_CREDITS_CREATED
C    +                                 + CALCULATED_2_ACTUAL_FED_ADJ
                  LOST_SEC_29_CREDITS = SEC_29_CREDITS_PASSED_UP
     +                                  - SEC_29_CREDITS_USED
C
C ADJUST TO MEET ACTUAL TAXES
C
                  IF(USE_ACTUAL_FEDERAL_TAXES) THEN
                     CALCULATED_2_ACTUAL_FED_ADJ =
     +                                         ANNUAL_FEDERAL_INCOME_TAX
     +                                         - FEDERAL_TAXES
                     FEDERAL_TAXES = ANNUAL_FEDERAL_INCOME_TAX
                  ENDIF
               ENDIF
            ENDIF ! end of monthly not active taxes
C
            IF(PARENT_CLASS) THEN
C
C USE INPUTTED ACTUAL OR CALCUALTED CONSOLIDATED STATE TAX
C
               CONSOLIDATED_STATE_TAXES = EXCLUDE_STATE_TAXES
     +                                    + STATE_TAXES
     +                                    - CONSOLIDATED_STATE_TAX_ADJ
               CON_2_ACTUAL_STATE_ADJ = 0.
               CON_2_ACTUAL_FEDERAL_ADJ = 0.
               IF(USE_ACTUAL_CON_STATE_TAXES) THEN
                  CON_2_ACTUAL_STATE_ADJ = ACTUAL_CON_STATE_INCOME_TAX
     +                                     - CONSOLIDATED_STATE_TAXES
                  CONSOLIDATED_STATE_TAXES = ACTUAL_CON_STATE_INCOME_TAX
               ENDIF
               CONSOLIDATED_FED_TAXABLE_INCOME = FEDERAL_TAXABLE_INCOME
     +                                      + SUB_FEDERAL_TAXABLE_INCOME
     +                                      + EXCLUDE_STATE_TAXES
     +                                      + STATE_TAXES
     +                                      - CONSOLIDATED_STATE_TAX_ADJ
     +                                      - CONSOLIDATED_STATE_TAXES
c$ifdefined(no_credit_passing)
c               CONSOLD_AVAIL_FED_TAX_CREDIT = FED_TAX_CREDIT_PASSED_UP
c               CONSOLID_FED_SEC_29_TAX_CREDITS=SEC_29_CREDITS_PASSED_UP
c               CONSOLID_FED_SEC_42_TAX_CREDITS=SEC_42_CREDITS_PASSED_UP
c$endif
C
               CONSOLD_FED_INCOME_AFTER_NOLS =
     +                            ADJUST_4_FED_CONSOLIDATED_NOLS(
     +                                  CONSOLIDATED_FED_TAXABLE_INCOME)
               CONSOLD_FED_DEF_TAXES_FROM_NOL = FEDERAL_TAX_RATE *
     +                                 (CONSOLIDATED_FED_TAXABLE_INCOME
     +                                  - CONSOLD_FED_INCOME_AFTER_NOLS)
               CONSOLD_STATE_DEF_TAX_FROM_NOL = STATE_TAX_RATE * 
     +                               (STATE_TAXABLE_INCOME
     +                                - STATE_TAXABLE_INCOME_AFTER_NOLS)
C
               IF(COUNTRY_NOT_USA .OR. .NOT. IOU_UTILITY) THEN
                  CONSOLD_FED_TAXES_B4_CREDITS = FEDERAL_TAX_RATE *
     +                                     CONSOLD_FED_INCOME_AFTER_NOLS
               ELSE
                  IF(USE_FED_TAX_TABLE .AND.  
     +                                  .NOT. MONTHLY_MIDAS_ACTIVE) THEN
                     CONSOLD_FED_TAXES_B4_CREDITS =
     +                  FEDERAL_TAX_TABLE(CONSOLD_FED_INCOME_AFTER_NOLS)
                  ELSE
                     CONSOLD_FED_TAXES_B4_CREDITS = FEDERAL_TAX_RATE *
     +                                     CONSOLD_FED_INCOME_AFTER_NOLS
                  ENDIF
                  IF(IOU_UTILITY .AND. CALCULATE_AMT) THEN ! THIS WAS ALWAYS TRUE
                     CONSOLIDATED_AMT_INCOME =
     +                    CONSOLIDATED_FED_TAXABLE_INCOME +
     +                        TAX_PREFERENCE_DEPRECIATION +
     +                        min(0.,.75*(-ACE_TAX_DEPRECIATION -
     +                                    TAX_PREFERENCE_DEPRECIATION))+
     +                        AMT_INCOME_ADDENDUM
C
                     AMT_INCOME_AFTER_NOL = CONSOLIDATED_AMT_INCOME
                     CONSOLIDATED_AMT_INCOME =
     +                  ADJUST_4_AMT_NOLS(CLASS,CONSOLIDATED_AMT_INCOME)
                     CONSOLD_AMT_MINIMUM_TAX=.20*CONSOLIDATED_AMT_INCOME
                  ELSE
                     AMT_INCOME_AFTER_NOL = 0.
                     CONSOLD_AMT_MINIMUM_TAX = 0.
                  ENDIF
C
                  CONSOLIDATED_FED_CREDITS_USED =
     +                   ADJUST_CONSOLD_4_FED_CREDIT(
     +                                  CONSOLD_AMT_MINIMUM_TAX,
     +                                  CONSOLD_FED_TAXES_B4_CREDITS,
     +                                  CONSOLD_AVAIL_FED_TAX_CREDIT,
     +                                  CONSOLID_FED_SEC_29_TAX_CREDITS,
     +                                  CONSOLID_FED_SEC_42_TAX_CREDITS,
     +                                  CONSOLID_SEC_29_CREDITS_USED,
     +                                  CONSOLID_AMT_CREDITS_USED,
     +                                  CONSOLID_AVAILABLE_AMT_CREDITS)
               ENDIF
C
C ADJUST FOR CREDITS AND ADJUSTMENTS
C
               IF(CONSOLID_AMT_CREDITS_USED < 0.) THEN
                  CONSOLID_AMT_CREDITS_CREATED = 
     +                                        -CONSOLID_AMT_CREDITS_USED
                  CONSOLID_AMT_CREDITS_USED = 0
               ELSE
                  CONSOLID_AMT_CREDITS_CREATED = 0.
               ENDIF
c              CONSOLIDATED_FEDERAL_TAXES= MAX(CONSOLD_AMT_MINIMUM_TAX,
c    +                                   CONSOLD_FED_TAXES_B4_CREDITS) -
c    +                                   CONSOLIDATED_FED_TAX_ADJ -
c    +                                   CONSOLIDATED_FED_CREDITS_USED -
c    +                                   CONSOLID_SEC_29_CREDITS_USED
               CONSOLIDATED_FEDERAL_TAXES= 
     +                                   CONSOLD_FED_TAXES_B4_CREDITS
     +                                   + CONSOLIDATED_FED_TAX_ADJ
     +                                   - CONSOLIDATED_FED_CREDITS_USED
     +                                   - CONSOLID_SEC_29_CREDITS_USED
     +                                   - CONSOLID_AMT_CREDITS_USED
     +                                   + CONSOLID_AMT_CREDITS_CREATED
               IF(USE_ACTUAL_CON_FEDERAL_TAXES) THEN
                  CON_2_ACTUAL_FEDERAL_ADJ =
     +                                     ACTUAL_CON_FEDERAL_INCOME_TAX
     +                                     - CONSOLIDATED_FEDERAL_TAXES
                  CONSOLIDATED_FEDERAL_TAXES =
     +                                     ACTUAL_CON_FEDERAL_INCOME_TAX
               ENDIF
               CON_DEF_TAX_DR_NOLS_AMT_CREDITS =
     +                                 CONSOLID_AMT_CREDITS_CREATED
     +                                 - CONSOLID_AMT_CREDITS_USED
     +                                 - CON SOLD_FED_DEF_TAXES_FROM_NOL
     +                                 - CONSOLD_STATE_DEF_TAX_FROM_NOL
               CONSOLID_LOST_SEC_29_CREDITS =
     +                               CONSOLID_FED_SEC_29_TAX_CREDITS -
     +                               CONSOLID_SEC_29_CREDITS_USED
C
               CONSOLIDATED_INCOME_TAXES = CONSOLIDATED_FEDERAL_TAXES +
     +                                     CONSOLIDATED_STATE_TAXES
               IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
                  CALL CONSOLIDATED_TAXES_CASH(YEAR,
     +                                  CONSOLIDATED_STATE_TAXES,
     +                                  CONSOLIDATED_FEDERAL_TAXES,
     +                                  CONSOLIDATED_FEDERAL_TAXES_PAID,
     +                                  CONSOLIDATED_STATE_TAXES_PAID)

C     +                                   CONSOLD_FED_TAXES_B4_CREDITS
C     +                                   + CONSOLIDATED_FED_TAX_ADJ
C     +                                   - CONSOLIDATED_FED_CREDITS_USED
C     +                                   - CONSOLID_SEC_29_CREDITS_USED
C     +                                   - CONSOLID_AMT_CREDITS_USED
C     +                                   + CONSOLID_AMT_CREDITS_CREATED



               ELSE
                  CONSOLIDATED_FEDERAL_TAXES_PAID =
     +                                        CONSOLIDATED_FEDERAL_TAXES
                  CONSOLIDATED_STATE_TAXES_PAID =
     +                                          CONSOLIDATED_STATE_TAXES
               ENDIF
               CONSOLIDATED_INCOME_TAXES_PAID =
     +                                   CONSOLIDATED_FEDERAL_TAXES_PAID
c     +                                   + CONSOLIDATED_STATE_TAXES_PAID
C               EXCLUDE_FED_TAXES = EXCLUDE_FED_TAXES + FEDERAL_TAXES
            ENDIF
C
C BTL INCOME TAXES
C
C           IF(YEAR > LAST_AVAILABLE_MONTHLY_YEAR .OR.
C    +                   .NOT. MONTHLY_MIDAS_ACTIVE .OR. ITER == 1) THEN
               IF(CALCULATE_BTL_INCOME_TAXES) THEN
                  BTL_TAXABLE_INCOME = OTHER_TAXABLE_INCOME
     +                                 + TAXABLE_INVESTMENT_INCOME ! INVESTMENT_INCOME
     +                                 - CLASS_BTL_EXPENSES
     +                                 - BTL_NUC_FUEL_DECOM_LIABILITY
     +                                 - BTL_MISC_DEDUCTIONS
     +                                 - DD_BTL_CURRENT_TAX_EXPENSE
     +                                 - PIOR_LEVEL_BTL_TAX_DEDUCTIONS
                  BTL_STATE_TAXES = STATE_TAX_RATE * BTL_TAXABLE_INCOME
                  BTL_INTRA_STATE_TAXES = STATE_TAX_RATE * 
     +                                           INTRA_INVESTMENT_INCOME
                  ATL_STATE_TAXES = STATE_TAXES - BTL_STATE_TAXES
                  BTL_FEDERAL_TAXES = FEDERAL_TAX_RATE *
     +                              (BTL_TAXABLE_INCOME-BTL_STATE_TAXES)
                  BTL_INTRA_FEDERAL_TAXES = FEDERAL_TAX_RATE * 
     +                                     (INTRA_INVESTMENT_INCOME
     +                                      - BTL_INTRA_STATE_TAXES)
                  ATL_FEDERAL_TAXES = FEDERAL_TAXES - BTL_FEDERAL_TAXES
                  BTL_INCOME_TAXES = BTL_STATE_TAXES + BTL_FEDERAL_TAXES
               ELSE
                  ATL_STATE_TAXES = STATE_TAXES
                  ATL_FEDERAL_TAXES = FEDERAL_TAXES
                  BTL_STATE_TAXES = 0.
                  BTL_FEDERAL_TAXES = 0.
                  BTL_INCOME_TAXES = 0.
                  BTL_INTRA_FEDERAL_TAXES = 0.
                  BTL_INTRA_STATE_TAXES = 0.
               ENDIF
C           ENDIF
            ATL_INCOME_TAXES = ATL_FEDERAL_TAXES + LOCAL_TAXES + 
     +                                                   ATL_STATE_TAXES
            IF(USE_ACTUAL_DEFERRED_TAXES_DR) THEN
               DEFERRED_TAXES_DR = ACTUAL_DEFERRED_TAXES_DR
            ELSE
               DEFERRED_TAXES_DR = DEFERRED_TAXES_DR_TAX_FILE -
     +                                   DEF_TAXES_FROM_NOLS_AMT_CREDITS
            ENDIF
            IF(USE_ACTUAL_BTL_DEF_TAXES_DR) THEN
               BTL_DEFERRED_TAXES_DR = ACTUAL_BTL_DEF_TAXES_DR
            ENDIF
            TOTAL_DEFERRED_TAXES_DR = DEFERRED_TAXES_DR
     +                                + BTL_DEFERRED_TAXES_DR         
            TOTAL_TAX_EXPENSE = OPERATING_REVENUE_TAX
     +                          + OTHER_TAXES
     +                          + Payroll_Taxes
     +                          + CLASS_PROPERTY_TAXES
     +                          + ENVIRONMENTAL_TAX
     +                          + LOCAL_TAXES
     +                          + ATL_STATE_TAXES
     +                          + ATL_FEDERAL_TAXES
     +                          + DEFERRED_TAXES_CR
     +                          + LTD_PS_DEFERRED_TAX_CR
     +                          + NF_DEFERRED_TAXES_CR
     +                          + DEFERRED_TAXES_DR
C    +                          + FED_DEFERRED_TAXES_FROM_NOL
     +                          + ITC_USED - ITC_AMORTIZATION
C    +                          - DEF_TAXES_FROM_NOLS_AMT_CREDITS
     +                          + STATE_TAX_ON_CAPITAL
     +                          + FEDERAL_TAX_ON_CAPITAL
            TOTAL_EXPENSE_AND_TAXES = TOTAL_EXPENSES_B4_TAXES
     +                                + TOTAL_TAX_EXPENSE
            IF(INDEX('Rr',OPERATING_METHOD) /= 0) THEN
c              GOPINC = OPERATING_REVENUES(2,CLASS_POS) -
c    +                                           TOTAL_EXPENSE_AND_TAXES
               OPERATING_REVENUES(2,CLASS_POS) = GOPINC + 
     +                                           TOTAL_EXPENSE_AND_TAXES
               TOTAL_BASE_RATES_REVENUES =
     +               OPERATING_REVENUES(2,CLASS_POS) - NON_BASE_REVENUES
            ELSEIF(INDEX('EC',OPERATING_METHOD) /= 0) THEN
               TOTAL_BASE_RATES_REVENUES = 
     +               OPERATING_REVENUES(2,CLASS_POS) - NON_BASE_REVENUES
            ELSE
               OPERATING_REVENUES(2,CLASS_POS) =
     +                     TOTAL_BASE_RATES_REVENUES + NON_BASE_REVENUES
            ENDIF
            OPERATING_INCOME = OPERATING_REVENUES(2,CLASS_POS) -
     +                                           TOTAL_EXPENSE_AND_TAXES
            INCOME_B4_INTEREST = OPERATING_INCOME 
     +                           + DEFERRED_REVENUES
     +                           + CLASS_BTL_REVENUES
     +                           + INVESTMENT_INCOME
     +                           + Mark_to_Market
     +                           + FE_NonCashEarningsNonCorp
     +                           - CLASS_BTL_EXPENSES
c    +                           - BTL_NUC_FUEL_DECOM_LIABILITY
     +                           - BTL_DEF_TAXES_CR
     +                           - BTL_DEFERRED_TAXES_DR
     +                           - BTL_INCOME_TAXES
     +                           + AFUDC_EQUITY
     +                           - BTL_AMORTIZATION_IN_EXPENSES
            INCOME_AFTER_INTEREST = INCOME_B4_INTEREST
     +                        - INTEREST_ON_LONG_TERM_DEBT
     +                        - INTEREST_AMORTIZATION
     +                        - INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)
     +                        + AFUDC_BORROWED
            NET_PROFIT_OR_LOSS = INCOME_AFTER_INTEREST
     +                           +  SUBSIDIARY_INCOME
     +                           -  NET_OF_TAX_EXEXP  
c    +                           -  BTL_AMORTIZATION
            IF(IMPA()) THEN
               NET_PROFIT_OR_LOSS = NET_PROFIT_OR_LOSS
     +                              + BOOK_DEPRECIATION
     +                              + INTEREST_AMORTIZATION
     +                              - LONG_TERM_DEBT_RETIREMENTS 
            ENDIF
            EARNINGS_AVAILABLE_TO_COMMON = NET_PROFIT_OR_LOSS
     +                                     - PREFERRED_DIVIDENDS
     +                                     - PS_PREM_ISSUE_EXP_AMORT
c           IF(DIVIDEND_PAYMENT_METHOD /= DPS) THEN
c              COMMON_DIVIDENDS = COMMON_PAYOUT_RATIO *
c    +                              MAX(0.,EARNINGS_AVAILABLE_TO_COMMON)
c           ENDIF
            RETAINED_EARNINGS = EARNINGS_AVAILABLE_TO_COMMON
     +                          - COMMON_DIVIDENDS
            IF(ACCURAL_ACCOUNTING_ACTIVE) THEN
               NEW_FINANCING_ACCRUALS = LTD_LAGGED_INTEREST_PAYMENT
     +                        + PS_LAGGED_DIVIDEND_PAYMENT
     +                        + INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)
     +                        - STD_INTEREST_CASH_PAYMENT
               IF(PARENT_CLASS) THEN
                  IF(AVERAGE_SHARES /= 0.)
     +              DIVIDEND_PER_SHARE = COMMON_DIVIDENDS/AVERAGE_SHARES
C
                    COMMON_STOCK_DIV_ACCRUALS = COMMON_DIVIDENDS
     +                                     - COMMON_STOCK_CASH_DIVIDENDS
c 9/30/02                  CALL COMMON_STOCK_DIVIDEND_ACCRUAL(
c     +                                      MONTHLY_COMMON_DIVIDENDS,
c     +                                      COMMON_STOCK_DIV_ACCRUALS,
c     +                                      COMMON_STOCK_CASH_DIVIDENDS)
C                 IF(EMPIRE_IS_ACTIVE) THEN
C                    COMMON_STOCK_DIV_ACCRUALS = 0.
C                    COMMON_STOCK_CASH_DIVIDENDS = COMMON_DIVIDENDS
C                 ELSE
C                    COMMON_STOCK_DIV_ACCRUALS =
C    +                                 QUARTERLY_COMMON_DIVIDENDS(4)
C    +                                 - PARENT_CASH_CS_DIVIDEND_PAYMENT ! COMMON_DIVIDEND_PAYMENT(CLASS_POS)
C                    COMMON_STOCK_CASH_DIVIDENDS = COMMON_DIVIDENDS +
C    +                              PARENT_CASH_CS_DIVIDEND_PAYMENT  ! COMMON_DIVIDEND_PAYMENT(CLASS_POS) -
C    +                              - QUARTERLY_COMMON_DIVIDENDS(4)
C                 ENDIF
               ELSE
                  COMMON_STOCK_DIV_ACCRUALS = 0.
                  COMMON_STOCK_CASH_DIVIDENDS = COMMON_DIVIDENDS
               ENDIF
            ELSE
               NEW_FINANCING_ACCRUALS = 0.
               COMMON_STOCK_DIV_ACCRUALS = 0.
               COMMON_STOCK_CASH_DIVIDENDS = COMMON_DIVIDENDS
            ENDIF
C
            IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
               VOID_LOGICAL = RETURN_CURRENT_NOLS_INFO(
     +                                            STATE_NOL_GENERATED,
     +                                            STATE_NOLS_USED,
     +                                            FEDERAL_NOL_GENERATED,
     +                                            FEDERAL_NOLS_USED)
               IF(USE_ALL_FED_TAX_BENEFITS_NOW) THEN
                  FEDERAL_NOL_GENERATED = 0.
                  FEDERAL_NOLS_USED = 0.
               ENDIF
               CALL SUMMARIZE_4_MONTHLY_NEEDS(CLASS_POS)
               CALL SET_NON_EQUIVALENCED_VARIABLES
               OPERATING_METHOD_ADJUSTMENT = TOTAL_BASE_RATES_REVENUES
     +                                       - REFERENCE_BASE_REVENUES
               IF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  MIDAS_ISSUED_LTD = LONG_TERM_DEBT_ISSUED
                  MIDAS_ISSUED_PS = PREFERRED_STOCK_ISSUED
               ELSE  
                  MIDAS_ISSUED_LTD = LONG_TERM_DEBT_ISSUED
     +                               - DEBT_FILE_LTD_ISSUED
                  MIDAS_ISSUED_PS = PREFERRED_STOCK_ISSUED
     +                              - DEBT_FILE_PREFERRED_ISSUED
               ENDIF
               VARIABLE(28) = DEFERRED_TAXES_DR
               CALL MONTHLY_FINANCIAL_ANALYSIS(YEAR,CLASS,
     +                               CLASS_POS,
     +                               CLASS_TYPE(CLASS_POS),
     +                               CLASS_LEVEL,
     +                               DONT_TALLY_THIS_CLASS,
     +                               VARIABLE,ITER,
     +                               SHORT_TERM_DEBT(1,CLASS_POS),
     +                               STD_MINIMUM_BAL,
     +                               MIN_ST_INVESTMENTS,
     +                               LIQUID_INVESTMENTS(1,CLASS_POS),
     +                               LTD_ISSUE_YR_INTEREST_BOOKED,
     +                               PS_ISSUE_YR_DIVIDEND_BOOKED,
     +                               LTD_ISSUE_YR_INTEREST_PAYMENT,
     +                               PS_ISSUE_YR_DIVIDEND_PAYMENT,
     +                               BTL_CASH_EARNINGS,
     +                               ST_INVESTMENT_EARNINGS,
     +                               STD_INTEREST_OWED,
     +                               INTEREST_ON_STD,
     +                               NON_INCOME_TAXES_ACCRUAL_ADJ,
     +                               STATE_TAXES_ACCRUAL_ADJ,
     +                               FEDERAL_TAXES_ACCRUAL_ADJ,
     +                               MIDAS_ISSUED_LTD,
     +                               MIDAS_ISSUED_PS,
     +                               CUSTOMER_DEPOSITS_BAL(1,CLASS_POS),
     +                               SHORT_TERM_DEBT_ISSUED,
     +                               MONTHLY_COMMON_DIVIDENDS,
     +                               CPL_FUEL_REVENUE_RECEIVABLE,
     +                               LONG_TERM_INVESTMENTS(CLASS_POS),
     +                               LT_INVESTMENTS_EARNINGS,
     +                               CASH_2_LT_INVESTMENTS,
     +                               STI_CHANGE_IN_CASH,
     +                               CATAWBA_RECEIVABLES,
     +                               CATAWBA_PAYABLES,
C    +                               JAN_JUN_STD_ISSUED,
     +                               PARENT_TAXES_PAID,
     +                               MAX_SHORT_TERM_INVESTMENT,
     +                               SUB_FED_TAX_PAYMENTS_2_PARENT,
     +                               SUB_STATE_TAX_PAYMENTS_2_PARENT,
     +                               WCCUM(1,CLASS_POS)
     +                                + LINEC(1,CLASS_POS), !ASSETS NEC BOY
     +                               LINEC(1,CLASS_POS), !ASSETS NEC BOY
     +                               COMMON_STOCK_CASH_DIVIDENDS,
     +                               WCCUM(2,CLASS_POS)
     +                                + LINEC(2,CLASS_POS), !ASSETS NEC EOY
     +                               LINEC(2,CLASS_POS), !ASSETS NEC EOY
     +                               NET_UTILITY_PLANT(2,CLASS_POS),
     +                               LONG_TERM_DEBT_RETIREMENTS,
     +                               PREFERRED_STOCK_RETIREMENTS,
     +                               LONG_TERM_DEBT(1,CLASS_POS),
     +                               PREFERRED_STOCK(1,CLASS_POS),
     +                               OTHER_TAXES,
c     +                      + Payroll_Taxes
     +                               OPERATING_REVENUE_TAX,
     +                               NUC_DECOM_FUND_BAL(1,CLASS_POS),
     +                               NEW_SUB_INVESTMENT,
     +                               GOODWILL_OF_NEW_SUB_INVESTMENT,
     +                               FUEL_EXPENSE,
     +                               VARIABLE_EXPENSE,
     +                               FIXED_EXPENSE,
     +                               CASH_REVENUES_RECEIVED,
     +                               CASH_EXPENSES_PAID,
     +                               INVESTMENTS_BOY)
c    +                               ATL_FEDERAL_TAXES,
c    +                               FEDERAL_TAXES,
c    +                               ATL_STATE_TAXES,
c    +                               STATE_TAXES)
C
                  VARIABLE_EXPENSE_PLUS_AMORT = VARIABLE_EXPENSE
     +                                          + VARIABLE_OM_AMORT
                  FUEL_EXPENSE_PLUS_AMORT = FUEL_EXPENSE
     +                                      + EXPENSING_FUEL_INVENTORY
               IF(CPL_IS_ACTIVE) THEN
C                 STDMIN = MIN(STD_MAX,SHORT_TERM_DEBT(1,CLASS_POS)
C    +                                             + JAN_JUN_STD_ISSUED)
                  STDMIN = MIN(STD_MAX,SHORT_TERM_DEBT(1,CLASS_POS)
     +                                         + SHORT_TERM_DEBT_ISSUED)
                  LONG_TERM_DEBT_ISSUED = MIDAS_ISSUED_LTD
     +                                    + DEBT_FILE_LTD_ISSUED
               ELSE
                  STDMIN = MIN(STD_MAX,SHORT_TERM_DEBT(1,CLASS_POS)
     +                                         + SHORT_TERM_DEBT_ISSUED)
               ENDIF
C
c              BTL_STATE_TAXES = STATE_TAXES - ATL_STATE_TAXES
c              BTL_FEDERAL_TAXES = FEDERAL_TAXES - ATL_FEDERAL_TAXES
c              BTL_INCOME_TAXES = BTL_STATE_TAXES + BTL_FEDERAL_TAXES
C
               TAXES_ACCRUAL_ADJ = NON_INCOME_TAXES_ACCRUAL_ADJ
     +                             + STATE_TAXES_ACCRUAL_ADJ
     +                             + FEDERAL_TAXES_ACCRUAL_ADJ
               INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS) =
     +                                   INTEREST_ON_STD
C    +                                   + CUSTOMER_DEPOSIT_INTEREST_ON
     +                                   + NOTES_PAYABLE_INTEREST
               STD_INTEREST_CASH_PAYMENT = STD_INTEREST_OWED
               IF(ITER == 1) THEN
                  CALL ANNUAL_PRODUCTION_REC_PAYABLES(
     +                                 PRODUCTION_CHANGE_IN_RECEIVABLES,
     +                                 PRODUCTION_CHANGE_IN_PAYABLES)
                  CHANGE_IN_ACCOUNTS_RECEIVABLE =
     +                                CHANGE_IN_ACCOUNTS_RECEIVABLE
     +                                + PRODUCTION_CHANGE_IN_RECEIVABLES
     +                                + CPL_FUEL_REVENUE_RECEIVABLE
     +                                + CATAWBA_RECEIVABLES
     +                                - CASH_REVENUES_RECEIVED
                  CHANGE_IN_ACCOUNTS_PAYABLE =
     +                                   CHANGE_IN_ACCOUNTS_PAYABLE
     +                                   + CATAWBA_PAYABLES
     +                                   + PRODUCTION_CHANGE_IN_PAYABLES
     +                                   - CASH_EXPENSES_PAID
                  CASH_TIMING_ADJUSTMENTS = CASH_TIMING_ADJUSTMENTS
     +                                + CATAWBA_PAYABLES
     +                                + PRODUCTION_CHANGE_IN_PAYABLES
     +                                - CASH_EXPENSES_PAID
     +                                - PRODUCTION_CHANGE_IN_RECEIVABLES
     +                                - CPL_FUEL_REVENUE_RECEIVABLE
     +                                - CATAWBA_RECEIVABLES
     +                                + CASH_REVENUES_RECEIVED
               ENDIF
            ELSE
               TAXES_ACCRUAL_ADJ = 0.
               STATE_TAXES_ACCRUAL_ADJ = 0.
               FEDERAL_TAXES_ACCRUAL_ADJ = 0.
               BTL_CASH_EARNINGS = INVESTMENT_INCOME_RECEIVABLE ! INVESTMENT_INCOME 6/29/04
               COMMON_STOCK_CASH_DIVIDENDS = COMMON_DIVIDENDS
               IF(PARENT_CLASS) THEN 
                  PARENT_TAXES_PAID = FEDERAL_TAXES ! + STATE_TAXES 4/26/02
               ELSE
                  PARENT_TAXES_PAID = 0.
               ENDIF
               CHANGE_IN_ACCOUNTS_RECEIVABLE =
     +                                 OPREV_IN_ACCTS_RECEIVABLE/100.*
     +                                   OPERATING_REVENUES(2,CLASS_POS)
     +                                 + ADDEN_ACCOUNTS_RECEIVABLE
               ANNUAL_INVOICES_RECEIVED = TOTAL_CASH_EXPENSES
     +                                    + CLASS_BTL_EXPENSES
cC TAXES PAYABLE
c     +                                    + OTHER_TAXES
c     +                                    + CLASS_PROPERTY_TAXES
c     +                                    + ENVIRONMENTAL_TAX
c     +                                    + LOCAL_TAXES
c     +                                    + ATL_STATE_TAXES
c     +                                    + ATL_FEDERAL_TAXES
c     +                                    + STATE_TAX_ON_CAPITAL
c     +                                    + FEDERAL_TAX_ON_CAPITAL
c     +                                    + BTL_INCOME_TAXES
cC INTEREST &  DIVIDENDS
c     +                                    + INTEREST_ON_LONG_TERM_DEBT
c     +                                    + INTEREST_ON_SHORT_TERM_DEBT
c     +                                                     (2,CLASS_POS)
c     +                                    + PREFERRED_DIVIDENDS
c     +                                    + COMMON_DIVIDENDS


C
               
               NON_INCOME_TAXES_ACCRUAL_ADJ = 0.
               IF(GreatRiver()) THEN
                  NON_INCOME_TAXES_ACCRUAL_ADJ =
     +                              .75*(CLASS_PROPERTY_TAXES
     +                                  + STATE_TAX_ON_CAPITAL
     +                                  + OPERATING_REVENUE_TAX
     +                                  + Payroll_Taxes
     +                                  + OTHER_TAXES
     +                                  + FEDERAL_TAX_ON_CAPITAL
     +                                  - GRE_OTH_PROP_TAXES(CLASS_POS))
               ENDIF
               CHANGE_IN_ACCOUNTS_PAYABLE = EXP_IN_ACCTS_PAYABLE/100. *
     +                                          ANNUAL_INVOICES_RECEIVED
     +                                    + ADDEN_ACCOUNTS_PAYABLE
               CASH_TIMING_ADJUSTMENTS = CHANGE_IN_ACCOUNTS_PAYABLE
     +                                   + NON_INCOME_TAXES_ACCRUAL_ADJ
     +                                   - CHANGE_IN_ACCOUNTS_RECEIVABLE
            ENDIF
            IF(ITER > MAX_ITER) THEN
               WRITE(4,'(I5,A,I3,A,3(A,L1),2A)')
     +                     BASE_YEAR+YEAR,
     +                     ' End Point ',END_POINT,
     +                     ' FINANCIALS DID NOT CONVERGE FOR ',
     +                     ' Income ', INCOME_CONVERGED,
     +                     ' Dividends ',DIVIDENDS_CONVERGED_STATE(),
     +                     ' Income Taxes ',TAXES_CONVERGED_STATE(),
     +                     '    Class Name: ',CLASS_NAME(CLASS_POS)
               EXIT ! ELIMINATE THE HALF CYCLE
            ENDIF
            ITER = ITER + 1
         ENDDO
c         call locate(17,9)
c         WRITE(6,"('&',A)") class_name(class_pos)
C
C ENDOF CALCULATION LOOP
C
c        IF(DONT_TALLY_THIS_CLASS) THEN  ! 4/29/99 need to know why this is here msg
c           RETAINED_EARNINGS = 0
c           RETAINED_EARNINGS_ADJ = 0.
c           COMMON_STOCK_ISSUED = 0.
c           COMMON_STOCK_BOUGHT = 0.
c           INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS) = 0.
c        ENDIF
C
C
C TRACKING DEFERRED TAXES DR
C
         GRE_OTH_PROP_TAXES(CLASS_POS) = CLASS_PROPERTY_TAXES
     +                                   + STATE_TAX_ON_CAPITAL
     +                                   + OPERATING_REVENUE_TAX
     +                                   + Payroll_Taxes
     +                                   + OTHER_TAXES
     +                                   + FEDERAL_TAX_ON_CAPITAL
         IF(UTILITY_TYPE() == 'T') THEN
            OPERATING_REVENUE_TAX_LAGGED_BASIS(CLASS_POS) =
     +                                            LAST_REVENUE_TAX_BASIS
         ENDIF
         CALL SAVE_LAG_PRODUCTION_CASH()
         IF(MODEL_ISSUED_DEBT_REPORT) THEN ! ()) THEN
            CALL CLASS_FINANCE_DETAIL_RPT(YEAR,
     +                                    CLASS,
     +                                    CLASS_NAME(CLASS_POS),
     +                                    MORTGAGE_DEBT)
         ENDIF
         AFILIATE_PURCHASE_POWER_EXPENSE =
     +                                 AFILIATE_PURCHASE_POWER_EXPENSE
     +                                 + TF_OTHER_PURCHASE_POWER_EXPENSE
     +                                 + RC_OTHER_PURCHASE_POWER_EXPENSE
         FE_EXP_PURCHASE_POWER_EXPENSE = OTHER_PURCHASE_POWER_EXPENSE
     +                                 - AFILIATE_PURCHASE_POWER_EXPENSE
         IF(.NOT. USE_ACTUAL_DEFERRED_TAXES_DR) THEN
            DEF_TAXES_FROM_FED_AMT_CREDITS = AMT_CREDITS_CREATED
     +                                       - AMT_CREDITS_USED
            DEF_TAX_ADDEND_FROM_TAX_FILE = DEFERRED_TAXES_DR_TAX_FILE
         ENDIF
C
         LONG_TERM_DEBT_RETIREMENTS = LONG_TERM_DEBT_RETIREMENTS
     +                                + MTG_DEBT_RETIREMENTS
         GRE_DEBT_RETIREMENTS = LONG_TERM_DEBT_RETIREMENTS
         LTD_PS_RETIREMENTS = LONG_TERM_DEBT_RETIREMENTS
     +                        + PREFERRED_STOCK_RETIREMENTS
         ADJ_2_STATE_TAXES = ADJ_2_STATE_TAXES
     +                       + CALCULATED_2_ACTUAL_STATE_ADJ
         ADJ_2_FEDERAL_TAXES = ADJ_2_FEDERAL_TAXES
     +                         + CALCULATED_2_ACTUAL_FED_ADJ
         DEF_ITC_BALANCE(2,CLASS_POS) = DEF_ITC_BALANCE(1,CLASS_POS)
     +                                  + ITC_USED
     +                                  - ITC_AMORTIZATION
     +                                  + ADJUSTMENT_2_DEFERRED_ITCS_BAL
         ACCOUNTS_RECEIVABLE_BOY = ACCOUNTS_RECEIVABLE(CLASS_POS)
         ACCOUNTS_RECEIVABLE(CLASS_POS) = ACCOUNTS_RECEIVABLE(CLASS_POS)
     +                                   + CHANGE_IN_ACCOUNTS_RECEIVABLE
     +                                   + UNBILLED_REVENUES
C     +                                   + INVESTMENT_INCOME  ! 6/16/04
     +                                   + INVESTMENT_INCOME_RECEIVABLE
     +                                   - BTL_CASH_EARNINGS
         CHANGE_INVEST_INCOME_RECIVABLE = INVESTMENT_INCOME_RECEIVABLE ! INVESTMENT_INCOME6/16/04
     +                                    - BTL_CASH_EARNINGS
         CASH_TIMING_ADJUSTMENTS = CASH_TIMING_ADJUSTMENTS
     +                             - UNBILLED_REVENUES
     +                             - INVESTMENT_INCOME_RECEIVABLE ! INVESTMENT_INCOME 6/16/04
     +                             + BTL_CASH_EARNINGS
         IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR) THEN
            ANNUAL_CASH_FLOW_TIMING_ADJUSTMENTS =CASH_TIMING_ADJUSTMENTS
         ELSE
            ANNUAL_CASH_FLOW_TIMING_ADJUSTMENTS =CASH_TIMING_ADJUSTMENTS
c     +                                     + INTEREST_DIVIDENDS_ACCRUDED ! added 8/25/04
         ENDIF
         INCOME_TAX_TIMING_ADJS = STATE_TAXES_ACCRUAL_ADJ
     +                            + FEDERAL_TAXES_ACCRUAL_ADJ
     +                            + NON_INCOME_TAXES_ACCRUAL_ADJ
         LTD_PS_ISSUE_EXPENSES = DEBT_FILE_ISSUE_EXPENSE
         LTD_INTEREST_CASH_PAYMENTS = LTD_INTEREST_CASH_PAYMENTS
     +                                + LTD_ISSUE_YR_INTEREST_PAYMENT
         PS_DIVIDEND_CASH_PAYMENTS = PS_DIVIDEND_CASH_PAYMENTS
     +                               + PS_ISSUE_YR_DIVIDEND_PAYMENT
         ACCOUNTS_PAYABLE_BOY = ACCOUNTS_PAYABLE(CLASS_POS)
         ACCOUNTS_PAYABLE(CLASS_POS) = ACCOUNTS_PAYABLE(CLASS_POS)
     +                                 + CHANGE_IN_ACCOUNTS_PAYABLE     ! 406
     +                                 + INTEREST_DIVIDENDS_ACCRUDED
     +                                 + NEW_FINANCING_ACCRUALS         ! 442 THESE COMBINED
     +                                 + COMMON_STOCK_DIV_ACCRUALS
     +                                 + NON_INCOME_TAXES_ACCRUAL_ADJ   ! 445
     +                                 + STATE_TAXES_ACCRUAL_ADJ        ! 443
     +                                 + FEDERAL_TAXES_ACCRUAL_ADJ      ! 444
C
         CHANGE_INTEREST_DIVS_ACCRUED = INTEREST_DIVIDENDS_ACCRUDED
     +                                  + NEW_FINANCING_ACCRUALS
     +                                  + COMMON_STOCK_DIV_ACCRUALS
         IF(SUBSIDIARY_CLASS) THEN
            INTRA_TAXES_PAYABLE = INTRA_TAXES_PAYABLE
     +                            + STATE_TAXES_ACCRUAL_ADJ
     +                            + FEDERAL_TAXES_ACCRUAL_ADJ
            SUB_NON_INCOME_TAX_ACCRUALS = SUB_NON_INCOME_TAX_ACCRUALS
     +                                    + NON_INCOME_TAXES_ACCRUAL_ADJ
         ENDIF
         IF(PARENT_CLASS) THEN
C
            SUB_TAXES_ACCRUAL = SUBSIDARY_VARIABLES(408)
            CONCOLIDATED_INCOME_TAX_ACCRUAL = CONSOLIDATED_INCOME_TAXES
     +                                  - CONSOLIDATED_INCOME_TAXES_PAID
            CONSOLID_FED_INCOME_TAX_ACCRUAL = CONSOLIDATED_FEDERAL_TAXES
     +                                 - CONSOLIDATED_FEDERAL_TAXES_PAID
            CONSOLID_STATE_INC_TAX_ACCRUAL = CONSOLIDATED_STATE_TAXES
     +                                   - CONSOLIDATED_STATE_TAXES_PAID
            CONSOLID_NON_INCOME_TAX_ACCRUAL=SUB_NON_INCOME_TAX_ACCRUALS
     +                                    + NON_INCOME_TAXES_ACCRUAL_ADJ
            PARENT_STATE_TAXES_ACCRUAL_ADJ = STATE_TAXES_ACCRUAL_ADJ
            PARENT_FEDERAL_TAX_ACCRUAL_ADJ = FEDERAL_TAXES_ACCRUAL_ADJ
            PARENT_NON_INCOME_TAX_ACCRL_ADJ =
     +                                      NON_INCOME_TAXES_ACCRUAL_ADJ
C
            ACCOUNTS_PAYABLE(CLASS_POS) = ACCOUNTS_PAYABLE(CLASS_POS)
c 10/1/02     +                                 - CONSOLIDATED_TAX_ADJUSTMENT
     +                                 + FUNDS_CONSOLIDATING_ADJUSTMENT
     +                                 + INCOME_TAX_PAYABLE_4_AFFILIATES
c 9/29/02            FEDERAL_TAXES_ACCRUAL_ADJ = FEDERAL_TAXES_ACCRUAL_ADJ
c     +                                  - CONSOLIDATED_TAX_ADJUSTMENT
            ACCOUNTS_RECEIVABLE(CLASS_POS) =
     +                                    ACCOUNTS_RECEIVABLE(CLASS_POS)
     +                                    + INTRA_TAXES_PAYABLE
            INTRA_TAXES_PAYABLE_OUTPUT = INTRA_TAXES_PAYABLE 
            CONSOLIDATED_FED_TAX_ADJ = CONSOLIDATED_FED_TAX_ADJ
     +                                 + CON_2_ACTUAL_FEDERAL_ADJ
            CONSOLIDATED_STATE_TAX_ADJ = CONSOLIDATED_STATE_TAX_ADJ
     +                                   + CON_2_ACTUAL_STATE_ADJ
         ELSE
            FEDERAL_TAX_EXCLUSION_ADJ = FEDERAL_TAX_EXCLUSION_ADJ
     +                                  + FEDERAL_TAXES_ACCRUAL_ADJ
         ENDIF
         IF(USE_ACTUAL_DEFERRED_TAXES_DR) THEN
            DEFERRED_TAXES_DR = ACTUAL_DEFERRED_TAXES_DR
         ELSE
            DEFERRED_TAXES_DR = DEFERRED_TAXES_DR_TAX_FILE -
     +                                   DEF_TAXES_FROM_NOLS_AMT_CREDITS
         ENDIF
         UNUSED_FEDERAL_TAX_CREDITS =  (FED_TAX_CREDIT_PASSED_UP +
     +                                       SEC_42_CREDITS_PASSED_UP) - 
     +                                 (FED_CREDITS_USED +
     +                                        SEC_42_CREDITS_USED)
C
         PS_DIVIDEND_PLUS_AMORT = PREFERRED_DIVIDENDS +
     +                                           PS_PREM_ISSUE_EXP_AMORT
         EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL) = 0.
         EXCLUDED_REVENUE_TAX_BASIS_A(CLASS_LEVEL) = 0.
         EXCLUDED_REVENUE_TAX_BASIS_B(CLASS_LEVEL) = 0.
         EXCLUDED_REVENUE_TAX(CLASS_LEVEL) = 0.
         EXCLUDED_OTHER_TAXES_REV(CLASS_LEVEL) = 0.
         EXCLUDED_OTHER_TAXES_EXP(CLASS_LEVEL) = 0.
         EXCLUDED_OTHER_TAXES(CLASS_LEVEL) = 0.
         EXCLUDE_CAPITAL_TAXES_STATE(CLASS_LEVEL) = 0.
         EXCLUDE_CAPITAL_TAXES_FED(CLASS_LEVEL) = 0.
         EXCLUDE_CAPITAL_TAX_STATE_BASIS(CLASS_LEVEL) = 0.
         EXCLUDE_CAPITAL_TAX_FED_BASIS(CLASS_LEVEL) = 0.
C
         ATL_LEASE_AMORT_EXPENSE = ATL_LEASE_AMORTIZATION 
c     +                             + ATL_LEASE_INTEREST
c     +                             + ATL_LEASE_PAYMENTS ! REMOVED 2/4/03 MSG
         R_TEMP = CLOSE_CLASS_STATE_TAX_INFO(CLASS,ASSET_YR,
     +                                   USE_ALL_STATE_TAX_BENEFITS_NOW)
         R_TEMP = CLOSE_CLASS_FED_TAX_INFO(CLASS,ASSET_YR,
     +                                     USE_ALL_FED_TAX_BENEFITS_NOW)
         FED_INCOME_TAX_DEDUCTIONS = FED_INCOME_TAX_DEDUCTIONS +
     +                               FED_DEDUC_PERCT_OF_TIB4DEDUC/100.*
     +                                                    TAXABLE_INCOME
         VOID_REAL = CLOSE_FED_CREDIT(CLASS,ASSET_YR,
     +                                FED_TAX_CREDIT_PASSED_UP,
     +                                AVAILCREDIT(1,CLASS_POS))
         VOID_REAL = CLOSE_STATE_CREDIT(CLASS,ASSET_YR,
     +                                  STATE_TAX_CREDIT_PASSED_UP)
         STATE_INCOME_TAX_DEDUCTIONS = STATE_INCOME_TAX_DEDUCTIONS +
     +                             STATE_DEDUC_PERCT_OF_TIB4DEDUC/100.*
     +                                                    TAXABLE_INCOME
         VOID_LOGICAL = RETURN_NOLS_INFO(STATE_NOL_GENERATED,
     +                                   STATE_NOLS_USED,
     +                                   FEDERAL_NOL_GENERATED,
     +                                   FEDERAL_NOLS_USED)
         IF(USE_ALL_FED_TAX_BENEFITS_NOW) THEN
            FEDERAL_NOL_GENERATED = 0.
            FEDERAL_NOLS_USED = 0.
         ENDIF
         TOTAL_CAPITAL_SERVICE = INTEREST + PREFERRED_DIVIDENDS +
     +                           COMMON_DIVIDENDS
c
c 9/28/98 fix which still has common dividends wrong.
c
         STD_INTEREST = INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS) 
         TOTAL_CAPITAL_SERVICE = LTD_INTEREST_CASH_PAYMENTS
     +                           + STD_INTEREST_CASH_PAYMENT
     +                           + PS_DIVIDEND_CASH_PAYMENTS
     +                           + COMMON_STOCK_CASH_DIVIDENDS
c        NET_OF_TAX_EXEXP = NET_OF_TAX_EXEXP + BTL_AMORTIZATION
         LTD_INTEREST_AND_AMORTIZATION = INTEREST_ON_LONG_TERM_DEBT
     +                                   + INTEREST_AMORTIZATION
         IF(SALT_RIVER_PROJECT()) THEN  ! place holder for LTI earnings stays in the fund
            CASH_2_LT_INVESTMENTS = CASH_2_LT_INVESTMENTS
     +                              + LT_INVESTMENTS_EARNINGS
         ENDIF
         LONG_TERM_INVESTMENTS(CLASS_POS) =
     +                                LONG_TERM_INVESTMENTS(CLASS_POS) +
     +                                CASH_2_LT_INVESTMENTS
C
         OTHER_LT_LIABILITY(2,CLASS_POS) = ! OTHER_LT_LIABILITY_BAL
     +                                 OTHER_LT_LIABILITY(1,CLASS_POS)
     +                                 + CLASS_LEASED_NFCE
     +                                 - NUCLEAR_FUEL_LEASE_PAYMENTS 
     +                                 + CAPITIALIZED_LEASE_ADDITIONS
     +                                 -  (ATL_LEASE_PAYMENTS +
     +                                              BTL_LEASE_PAYMENTS)
C    +                                   -(ATL_LEASE_AMORTIZATION +
C    +                                         BTL_LEASE_AMORTIZATION)  
C SALE OF ASSETS
C    +                                + CLASS_OTH_LIAB_SALE_ASSETS
     +                                + LT_LIAB_BAL_ADJ
         CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_POS) =
     +                  CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_POS)
     +                  + CLASS_OTH_LIAB_SALE_ASSETS
         DEFERRED_GAIN_FROM_SALES(2,CLASS_POS) =
     +                DEFERRED_GAIN_FROM_SALES(2,CLASS_POS)
     +                + CUMULATIVE_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_POS)
C     +                             + CLASS_OTH_LIAB_SALE_ASSETS
C DECOMMISSIONING LIABILITY
         BOY_NUC_DECOM_FUND_LIABILITY =
     +                               NUC_DECOM_FUND_LIABILITY(CLASS_POS)
         IF(SALT_RIVER_PROJECT()) THEN
            NUC_DECOM_FUND_LIABILITY(CLASS_POS) =
     +                               NUC_DECOM_FUND_LIABILITY(CLASS_POS)
c     +                             + NUC_DECOMMISSIONING_COST ! removed 6/27/02
     +                             + BTL_NUC_FUEL_DECOM_LIABILITY
C    +                             + NET_OF_TAX_NUCL_FUND_RETURN ! keeps the balance sheet balanced
     +                             + OCI_NUCL_FUND_RETURN
     +                             + CHANGE_2_DECOMMISSIONING_LIAB
         ELSE
            NUC_DECOM_FUND_LIABILITY(CLASS_POS) =
     +                               NUC_DECOM_FUND_LIABILITY(CLASS_POS)
     +                             + NUC_DECOMMISSIONING_COST
     +                             + BTL_NUC_FUEL_DECOM_LIABILITY
     +                             + NET_OF_TAX_NUCL_FUND_RETURN ! keeps the balance sheet balanced
     +                             + CHANGE_2_DECOMMISSIONING_LIAB
         ENDIF
         IF(PARENT_CLASS) THEN 
            CONSOLID_AVAILABLE_AMT_CREDITS = 
     +                            MAX(0.,CONSOLID_AVAILABLE_AMT_CREDITS+
     +                                   CONSOLID_AMT_CREDITS_CREATED-
     +                                   CONSOLID_AMT_CREDITS_USED)
            IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.            
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
            ELSE
               PARENT_TAXES_PAID =  FEDERAL_TAXES ! + STATE_TAXES
            ENDIF
c            OTHER_LT_LIABILITY(2,CLASS_POS) =
c 9/29/02     +                                 CONSOLIDATED_TAX_LIB_ADJUSTMENT ! FUNDS_CONSOLIDATING_ADJUSTMENT
c     +                                 + OTHER_LT_LIABILITY(2,CLASS_POS)
            INCOME_TAX_PAYABLE_4_AFFILIATES =
     +                                   CONSOLIDATED_TAX_LIB_ADJUSTMENT
         ELSE
            PARENT_TAXES_PAID = 0.
         ENDIF
C
C INCOME STATEMENT MODIFICATIONS
C
C
C CASH FLOW AND ISSUED STATEMENT
C
         IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
            SHORT_TERM_DEBT(2,CLASS_POS) = SHORT_TERM_DEBT_ISSUED +
     +                                      SHORT_TERM_DEBT(1,CLASS_POS)
         ELSE
            SHORT_TERM_DEBT_ISSUED = SHORT_TERM_DEBT(2,CLASS_POS) -
     +                                      SHORT_TERM_DEBT(1,CLASS_POS)
         ENDIF
C
C BALANCE SHEET UPDATE
C
C        IF(CLASS_LEVEL == 1 .AND. 
C    +                         CLASS_TYPE(CLASS_POS) == SUBSIDIARY) THEN
         IF(CLASS_TYPE(CLASS_POS) == SUBSIDIARY) THEN
            SUB_COMMON_BUYBACK_CS_ADJ = SUB_COMMON_BUYBACK_CS_ADJ
     +                                  + COMMON_STOCK_BOUGHT 
     +                                  + CS_BUYBACK_ADJ_RETAINED_ERNING
            SUB_COMMON_BUYBACK_RE_ADJ = SUB_COMMON_BUYBACK_RE_ADJ
     +                                  - CS_BUYBACK_ADJ_RETAINED_ERNING ! THIS IS A NEGATIVE NUMBER
         ENDIF
         REARNC(2,CLASS_POS) = REARNC(1,CLASS_POS)
     +                         + RETAINED_EARNINGS
     +                         + RETAINED_EARNINGS_ADJ
     +                         + CS_BUYBACK_ADJ_RETAINED_ERNING
         COMMON_STOCK(2,CLASS_POS) = COMMON_STOCK(1,CLASS_POS)
     +                               + COMMON_STOCK_ISSUED
     +                               - COMMON_STOCK_BOUGHT
     +                               + PAID_IN_CAPITAL
     +                               - CS_BUYBACK_ADJ_RETAINED_ERNING
         COMMON_STOCK(2,CLASS_POS) = COMMON_STOCK(1,CLASS_POS)
     +                               + COMMON_STOCK_ISSUED
     +                               + PAID_IN_CAPITAL
     +                               - CS_BUYBACK_ADJ_RETAINED_ERNING
         COMMON_EQUITY(2,CLASS_POS) = REARNC(2,CLASS_POS) +
     +                                      COMMON_STOCK(2,CLASS_POS)
         AVERAGE_EQUITY = (COMMON_EQUITY(1,CLASS_POS) +
     +                                    COMMON_EQUITY(2,CLASS_POS))/2.
         IF(AVERAGE_EQUITY /= 0.) THEN
            RETURN_ON_EQUITY = 100.* EARNINGS_AVAILABLE_TO_COMMON/
     +                                      AVERAGE_EQUITY
         ELSE
            RETURN_ON_EQUITY = NOT_AVAIL   
         ENDIF
C         IF(EARNINGS_AVAILABLE_TO_COMMON == 0.) THEN
C            DIVIDEND_PAYOUT = 0.   
C         ELSE
         IF((PARENT_CLASS .AND. EARNINGS_AVAILABLE_TO_COMMON /= 0.) .OR.
     +                           EARNINGS_AVAILABLE_TO_COMMON > 0.) THEN
            DIVIDEND_PAYOUT = 100.* COMMON_DIVIDENDS/
     +                                      EARNINGS_AVAILABLE_TO_COMMON
         ENDIF
c        AVERAGE_SHARES = (COMMON_SHARES(1,CLASS_POS) +  ! removed 3/2/99
c    +                                    COMMON_SHARES(2,CLASS_POS))/2.
            IF(AVERAGE_SHARES /= 0.) THEN
               DIVIDEND_PER_SHARE = COMMON_DIVIDENDS/AVERAGE_SHARES
               EARNINGS_PER_SHARE = EARNINGS_AVAILABLE_TO_COMMON/
     +                                                    AVERAGE_SHARES
            ELSE
               DIVIDEND_PER_SHARE = 0. ! NOT_AVAIL  
               EARNINGS_PER_SHARE = 0. ! NOT_AVAIL
            ENDIF
            IF(PREFERRED_STOCK_ADDENDUM(CLASS_POS) > 0.) THEN
               DIVIDEND_PS = PREFERRED_STOCK_ADDENDUM(CLASS_POS) *
     +                                 WEIGHTED_CLASS_PS_COST(CLASS_POS)
               PSDIV(YR,CLASS_POS) = PSDIV(YR,CLASS_POS) + DIVIDEND_PS
               ANN_PS_DIV(YR,CLASS_POS) = ANN_PS_DIV(YR,CLASS_POS)
     +                                                     + DIVIDEND_PS
               ANNINT(YR,CLASS_POS) = ANNINT(YR,CLASS_POS) + DIVIDEND_PS
            ENDIF
            IF(LONG_TERM_DEBT_ADDENDUM(CLASS_POS) > 0.) THEN
               INTEREST_LTD = LONG_TERM_DEBT_ADDENDUM(CLASS_POS) *
     +                                WEIGHTED_CLASS_LTD_COST(CLASS_POS)
               LTDINT(YR,CLASS_POS) = LTDINT(YR,CLASS_POS)+INTEREST_LTD
               ANN_LTD_INT(YR,CLASS_POS) = ANN_LTD_INT(YR,CLASS_POS)
     +                                                    + INTEREST_LTD
               ANNINT(YR,CLASS_POS) = ANNINT(YR,CLASS_POS)+INTEREST_LTD
            ENDIF
            CALL CLASS_INTEREST_PS_DIVIDENDS(YR,CLASS,
     +                                       MORTGAGE_DEBT,
     +                                       LTDINT(0,CLASS_POS),
     +                                       LTDRET(0,CLASS_POS),
     +                                       PSDIV(0,CLASS_POS),
     +                                       PSRED(0,CLASS_POS),
     +                                       ANNINT(0,CLASS_POS),
     +                                       ANN_PS_DIV(0,CLASS_POS),
     +                                       ANN_LTD_INT(0,CLASS_POS))
C           IF(YR ==1 .AND. CLASS_TYPE(CLASS_POS) == SBU) THEN
C              PREFERRED_STOCK_RETIREMENTS=PREFERRED_STOCK_RETIREMENTS - 
C    +                                                   PS_ROLLOVER
C              LONG_TERM_DEBT_RETIREMENTS = LONG_TERM_DEBT_RETIREMENTS -
C    +                                                  LTD_ROLLOVER
C              PREFERRED_STOCK_ISSUED = PREFERRED_STOCK_ISSUED -
C    +                                                   PS_ROLLOVER
C              LONG_TERM_DEBT_ISSUED = LONG_TERM_DEBT_ISSUED -
C    +                                                  LTD_ROLLOVER
C           ENDIF   
            PREFERRED_STOCK(2,CLASS_POS)= PREFERRED_STOCK(1,CLASS_POS)+
     +                                    PREFERRED_STOCK_ISSUED -
     +                                    PREFERRED_STOCK_RETIREMENTS -
     +                                    PS_PREM_AMORT
            LONG_TERM_DEBT(2,CLASS_POS) = LONG_TERM_DEBT(1,CLASS_POS)
     +                                  + LONG_TERM_DEBT_ISSUED
     +                                  - LONG_TERM_DEBT_RETIREMENTS
     +                                  - LTD_PREM_AMORT
            IF(COMMON_SHARES(2,CLASS_POS) == 0.) THEN
C               COMMON_SHARES(2,CLASS_POS) = .0001
               BOOK_VALUE_STOCK(2,CLASS_POS)=COMMON_EQUITY(2,CLASS_POS)
            ELSE
               BOOK_VALUE_STOCK(2,CLASS_POS)=COMMON_EQUITY(2,CLASS_POS)/
     +                                        COMMON_SHARES(2,CLASS_POS)
            ENDIF
            STD_RATE(2,CLASS_POS) = 0.0
            IF(SHORT_TERM_DEBT(2,CLASS_POS) /= 0.) 
     +                STD_RATE(2,CLASS_POS) =
     +                         INTEREST_ON_SHORT_TERM_DEBT(2,CLASS_POS)/
     +                                 SHORT_TERM_DEBT(2,CLASS_POS)
      def_taxes_dr_is_contra = .FALSE.
            if(def_taxes_dr_is_contra .OR. BANGOR()) then
               DEF_TAX_CR_BALANCE(2,CLASS_POS) = DEFERRED_TAXES_DR
     +                                 + DEF_TAX_CR_BALANCE(2,CLASS_POS)
     +                                 - ADJ_DEFERRED_TAX_DR_BALANCE
            else
               CUMTXNORM(2,CLASS_POS) = CUMTXNORM(1,CLASS_POS)
     +                                  - DEFERRED_TAXES_DR
     +                                  - BTL_DEFERRED_TAXES_DR
     +                                  + ADJ_DEFERRED_TAX_DR_BALANCE
            endif
C
C RATIOS
C
            IF(ASSET_CLASS_RATE_BASE /= 0.) THEN
               RETURN_ON_RATEBASE = 100.*OPERATING_INCOME/
     +                                             ASSET_CLASS_RATE_BASE
            ELSE
                
               RETURN_ON_RATEBASE = NOT_AVAIL
            ENDIF
C       
C WRITE INCOME STATEMENT RESULTS
C
            BASE_REVENUE(1,CLASS_POS) = BASE_REVENUE(2,CLASS_POS)
            ADJ_CLAUSE_REVENUE(1,CLASS_POS) = 
     +                                   ADJ_CLAUSE_REVENUE(2,CLASS_POS)
            IF(INDEX('Rr',OPERATING_METHOD) /= 0) THEN
               TOTAL_BASE_RATES_REVENUES =
     +               OPERATING_REVENUES(2,CLASS_POS) - NON_BASE_REVENUES
     +                                                 
            ELSEIF(INDEX('EC',OPERATING_METHOD) /= 0) THEN
               TOTAL_BASE_RATES_REVENUES = 
     +               OPERATING_REVENUES(2,CLASS_POS) - NON_BASE_REVENUES
            ENDIF
            IF(ODEC() .AND. SUBSIDIARY_CLASS .AND. 
     +                        CLASS-1 == ODEC_NA3_ID .AND.
     +                                 .NOT. DONT_TALLY_THIS_CLASS) THEN
               ODEC_NA3_PURCHASE_EXPENSE = TOTAL_BASE_RATES_REVENUES
               ODEC_NA3_TIER_RETURN = (MIN_COV_RATIO -1.) * INTEREST
               BULK_POWER_REVENUES = BULK_POWER_REVENUES
     +                               + ODEC_NA3_PURCHASE_EXPENSE 
               TOTAL_BASE_RATES_REVENUES = 0.
               ODEC_NA3_ACTIVE = .TRUE.
            ENDIF
            OPERATING_METHOD_ADJUSTMENT = TOTAL_BASE_RATES_REVENUES -
     +                                    REFERENCE_BASE_REVENUES
            CUM_CAPTURED_OPT_METHOD_REVS(CLASS_POS) =
     +                           CUM_CAPTURED_OPT_METHOD_REVS(CLASS_POS)
     +                           + OPERATING_METHOD_ADJUSTMENT
c     +                           + OPERATING_METHOD_ROLLUP
            REFERENCE_BASE_REVENUES = TOTAL_BASE_RATES_REVENUES -
     +                               (RESIDENTIAL_REVENUES
     +                                + UNBILLED_REVENUES
     +                                + COMMERCIAL_REVENUES
     +                                + INDUSTRIAL_REVENUES
     +                                + LIGHTING_REVENUES
     +                                + GOVERNMENT_SALES_REVENUE
     +                                + OPERATING_METHOD_ROLLUP
     +                                + WVPA_MEMBER_ACCRUED_REVENUES
     +                                + REGULATED_REVENUES_11
     +                                + REGULATED_REVENUES_12
     +                                + REGULATED_REVENUES_13
     +                                + REGULATED_REVENUES_14
     +                                + REGULATED_REVENUES_15
     +                                + CAPTURED_OPT_METHOD_REVENUES
     +                                + OPERATING_METHOD_ADJUSTMENT)
            BASE_REVENUE(2,CLASS_POS) = TOTAL_BASE_RATES_REVENUES
            ADJ_CLAUSE_REVENUE(2,CLASS_POS) = ADJUSTMENT_CLAUSE_REVENUES
            STOCK_BOOK_VALUE = BOOK_VALUE_STOCK(2,CLASS_POS)
            STOCK_PRICE_YEAR_END(2,CLASS_POS) = STOCK_MARKET_PRICE
            AVERAGE_STOCK_PRICE = (STOCK_PRICE_YEAR_END(2,CLASS_POS) +
     +                             STOCK_PRICE_YEAR_END(1,CLASS_POS))/2.
            GAV_OTHER_OPT_REVENUES = OPERATING_REVENUES(2,CLASS_POS) -
     +                                      CAPACITY_SALES_REVENUE -
     +                                      SECONDARY_SALES_REVENUES
C
C CALCULATE EXCLUSTIONS
C
            IF(PARENT_CLASS) THEN
               EXCLUDE_SUB_INCOME = EXCLUDE_SUB_INCOME +
     +                              SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL)
               EXCLUDE_FED_TAXES = EXCLUDE_FED_TAXES + FEDERAL_TAXES
               PARENT_ATL_FEDERAL_TAX = ATL_FEDERAL_TAXES
               PARENT_BTL_FEDERAL_TAX = BTL_FEDERAL_TAXES
               PARENT_BTL_INTRA_FED_TAXES = BTL_INTRA_FEDERAL_TAXES
               PARENT_BTL_INTRA_STATE_TAXES = BTL_INTRA_STATE_TAXES
               R_COVERAGE_RATIO = COVERAGE_RATIO
            ELSE
               SUB_SBU_ACE_TAX_DEPRECIATION(CLASS_LEVEL-1)  =
     +                     SUB_SBU_ACE_TAX_DEPRECIATION(CLASS_LEVEL-1) +
     +                     ACE_TAX_DEPRECIATION
               SUB_SBU_TAX_PRE_DEPRECIATION(CLASS_LEVEL-1) =
     +                     SUB_SBU_TAX_PRE_DEPRECIATION(CLASS_LEVEL-1) +
     +                     TAX_PREFERENCE_DEPRECIATION
               IF(CLASS_TYPE(CLASS_POS) == SBU .OR.
     +                    CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN ! ASSET_CLASS_TYPE
C                 SBU_LTD_ELIM = SBU_LTD_ELIM + LONG_TERM_DEBT_ISSUED -
C    +                                        LONG_TERM_DEBT_RETIREMENTS
C                 SBU_STD_ELIM = SBU_STD_ELIM + SHORT_TERM_DEBT_ISSUED
C                 SBU_PS_ELIM = SBU_PS_ELIM + PREFERRED_STOCK_ISSUED -
C    +                                       PREFERRED_STOCK_RETIREMENTS
                  IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                     IF(EXCLUDE_SBU_REVENUE_TAX) THEN
                        EXCLUDED_REVENUE_TAX(CLASS_LEVEL-1) =
     +                             EXCLUDED_REVENUE_TAX(CLASS_LEVEL-1) +
     +                                             OPERATING_REVENUE_TAX
                        IF(SALT_RIVER_PROJECT()) THEN
                           EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL-1) =
     +                         EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL-1)
     +                         + TOTAL_BASE_RATES_REVENUES
     +                         + ADJUSTMENT_CLAUSE_REVENUES
     +                         + DEFERRED_REVENUES
                        ELSE
                           EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL-1) =
     +                         EXCLUDED_REVENUE_TAX_BASIS(CLASS_LEVEL-1)
     +                         + OPERATING_REVENUES(2,CLASS_POS)
                        ENDIF
                        EXCLUDED_REVENUE_TAX_BASIS_A(CLASS_LEVEL-1) =
     +                       EXCLUDED_REVENUE_TAX_BASIS_A(CLASS_LEVEL-1) 
     +                       + TOTAL_BASE_RATES_REVENUES
     +                       + ADJUSTMENT_CLAUSE_REVENUES
     +                       + CLASS_GAS_ADJ_CLAUSE_REVENUE 
                        EXCLUDED_REVENUE_TAX_BASIS_B(CLASS_LEVEL-1) =
     +                       EXCLUDED_REVENUE_TAX_BASIS_B(CLASS_LEVEL-1) 
     +                       + TOTAL_BASE_RATES_REVENUES
                     ENDIF
                     IF(EXCLUDE_SBU_OTHER_TAXES) THEN
                        EXCLUDED_OTHER_TAXES_REV(CLASS_LEVEL-1) =
     +                         EXCLUDED_OTHER_TAXES_REV(CLASS_LEVEL-1) +
     +                                   OPERATING_REVENUES(1,CLASS_POS) 
                        EXCLUDED_OTHER_TAXES_EXP(CLASS_LEVEL-1) =
     +                         EXCLUDED_OTHER_TAXES_EXP(CLASS_LEVEL-1) +
     +                                        CLASS_NON_VARIABLE_EXPENSE
                        EXCLUDED_OTHER_TAXES(CLASS_LEVEL-1) =
     +                            EXCLUDED_OTHER_TAXES(CLASS_LEVEL-1) +
     +                                                       OTHER_TAXES
                     ENDIF
                     IF(EXCLUDE_SBU_CAPITAL_TAX) THEN
                        EXCLUDE_CAPITAL_TAXES_STATE(CLASS_LEVEL-1) =
     +                        EXCLUDE_CAPITAL_TAXES_STATE(CLASS_LEVEL-1)
     +                        + STATE_TAX_ON_CAPITAL
                        EXCLUDE_CAPITAL_TAXES_FED(CLASS_LEVEL-1) =
     +                          EXCLUDE_CAPITAL_TAXES_FED(CLASS_LEVEL-1)
     +                          + FEDERAL_TAX_ON_CAPITAL
                        EXCLUDE_CAPITAL_TAX_FED_BASIS(CLASS_LEVEL-1) =
     +                      EXCLUDE_CAPITAL_TAX_FED_BASIS(CLASS_LEVEL-1)
     +                      + MAX(0.,AMOUNT_OF_TAXED_CAPITAL -
     +                                    FEDERAL_CAPITAL_TAX_DEDUCTION)
                        EXCLUDE_CAPITAL_TAX_STATE_BASIS(CLASS_LEVEL-1) =
     +                    EXCLUDE_CAPITAL_TAX_STATE_BASIS(CLASS_LEVEL-1)
     +                    + MAX(0.,AMOUNT_OF_TAXED_CAPITAL -
     +                                     PROVINCIAL_CAP_TAX_DEDUCTION)
                     ENDIF
C               
C                    NUC_FUEL_RATE_BASE_AT(CLASS_LEVEL-1) = 
C    +                            NUC_FUEL_RATE_BASE_AT(CLASS_LEVEL-1) +
C    +                                 NUC_FUEL_RATE_BASE(2,R_CLASS_POS)
C                    CWIP_IN_RATE_BASE_AT(CLASS_LEVEL-1) =
C    +                             CWIP_IN_RATE_BASE_AT(CLASS_LEVEL-1) +
C    +                                  CWIP_IN_RATE_BASE(2,R_CLASS_POS)
                     SBU_ATL_EXCLUDE_FED_TAXES=SBU_ATL_EXCLUDE_FED_TAXES
     +                                         + ATL_FEDERAL_TAXES
                     SBU_CASH_OTH_ASSET(CLASS_LEVEL-1) = CASH_OTH_ASSET 
     +                               + SBU_CASH_OTH_ASSET(CLASS_LEVEL-1)
                     SBU_DSM_CAPITIAL(CLASS_LEVEL-1) = DSM_CAPITIAL +
     +                                   SBU_DSM_CAPITIAL(CLASS_LEVEL-1)
                     SBU_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_LEVEL-1) =
     +                   SBU_CLASS_OTH_LIAB_SALE_ASSETS(CLASS_LEVEL-1) +
     +                                        CLASS_OTH_LIAB_SALE_ASSETS
                     SBU_BTL_LEASE_PAYMENTS(CLASS_LEVEL-1) =
     +                           SBU_BTL_LEASE_PAYMENTS(CLASS_LEVEL-1) +
     +                                                BTL_LEASE_PAYMENTS
                     SBU_ATL_LEASE_PAYMENTS(CLASS_LEVEL-1) =
     +                           SBU_ATL_LEASE_PAYMENTS(CLASS_LEVEL-1) +
     +                                                ATL_LEASE_PAYMENTS
                     SBU_RETIREE_MEDICAL_PAYMENTS(CLASS_LEVEL-1) =
     +                     SBU_RETIREE_MEDICAL_PAYMENTS(CLASS_LEVEL-1) +
     +                     RETIREE_MEDICAL_PAYMENTS
                     SBU_CHANGE_DECOMMISSIONING_LIAB(CLASS_LEVEL-1) =
     +                  SBU_CHANGE_DECOMMISSIONING_LIAB(CLASS_LEVEL-1) +
     +                                     CHANGE_2_DECOMMISSIONING_LIAB
                     SBU_UNAMORT_DEBIT_INTEREST_BAL =
     +                         UNAMORTIZED_INTEREST_BALANCE(1,CLASS_POS)
     +                         + SBU_UNAMORT_DEBIT_INTEREST_BAL
                     SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL =
     +                        UNAMORTIZED_ISSUE_EXP_BALANCE(1,CLASS_POS)
     +                        + SBU_UNAMORTIZED_ISSUE_EXPENSE_BAL
                     SBU_DEFERRED_DEBIT_RATEBASE(CLASS_LEVEL-1) =
     +                        SBU_DEFERRED_DEBIT_RATEBASE(CLASS_LEVEL-1)
     +                        + DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
                     SBU_DEFERRED_CREDIT_RATEBASE(CLASS_LEVEL-1) =
     +                      SBU_DEFERRED_CREDIT_RATEBASE(CLASS_LEVEL-1)
     +                      + DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS)
                     
                     SBU_ATL_TAX_EXPENSE(CLASS_LEVEL-1) =
     +                                SBU_ATL_TAX_EXPENSE(CLASS_LEVEL-1)
     +                                + DD_ATL_CURRENT_TAX_EXPENSE
     +                                + PIOR_LEVEL_ATL_TAX_DEDUCTIONS
                     SBU_BTL_TAX_EXPENSE(CLASS_LEVEL-1) =
     +                                SBU_BTL_TAX_EXPENSE(CLASS_LEVEL-1)
     +                                + DD_BTL_CURRENT_TAX_EXPENSE
     +                                + PIOR_LEVEL_BTL_TAX_DEDUCTIONS
                  ENDIF ! DONT ADD
               ELSE
                  IF(APS_ACTIVE .AND. CLASS == 401) THEN ! AGC
                     AGC_SUBSIDIARY_INCOME = SUBSIDIARY_INCOME
                     AGC_EARNINGS_AVAILABLE_2_COMMON =
     +                                      EARNINGS_AVAILABLE_TO_COMMON
                     AGC_COMMON_DIVIDENDS = COMMON_DIVIDENDS
                     AGC_COMMON_STOCK_ISSUED = COMMON_STOCK_ISSUED
                  ELSE
                     IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                        SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL-1) =
     +                           SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL-1) +
     +                                                 SUBSIDIARY_INCOME
                        SUB_EARNINGS_2_COMMON(CLASS_LEVEL-1) =
     +                            SUB_EARNINGS_2_COMMON(CLASS_LEVEL-1) +
     +                                      EARNINGS_AVAILABLE_TO_COMMON
                        SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL-1) =
     +                   SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL-1) +
     +                                                  COMMON_DIVIDENDS
                        SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL-1) =
     +                     SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL-1) +
     +                                               COMMON_STOCK_ISSUED
                     ENDIF
                  ENDIF ! APS ACTIVE
                  IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                     SUB_FED_TAX_PAYMENTS_2_PARENT = FEDERAL_TAXES +
     +                                     SUB_FED_TAX_PAYMENTS_2_PARENT
                     SUB_STATE_TAX_PAYMENTS_2_PARENT = STATE_TAXES +
     +                                   SUB_STATE_TAX_PAYMENTS_2_PARENT
                     SUB_TAXABLE_INCOME = SUB_TAXABLE_INCOME +
     +                                                    TAXABLE_INCOME
                     SUB_FEDERAL_TAXABLE_INCOME = 
     +                                      SUB_FEDERAL_TAXABLE_INCOME +
     +                                      FEDERAL_TAXABLE_INCOME
C    +                                       TAXABLE_INCOME -
C    +                                       LOCAL_TAXES -
C    +                                       STATE_TAXES -
C    +                                       FED_INCOME_TAX_DEDUCTIONS -
C    +                                       STATE_TAX_ON_CAPITAL -
C    +                                       ENVIRONMENTAL_TAX
                     SUB_TOTAL_BTL_FEDERAL_TAXES =
     +                   SUB_TOTAL_BTL_FEDERAL_TAXES + BTL_FEDERAL_TAXES
                     SUB_TOTAL_BTL_INTRA_FED_TAXES =
     +                                     SUB_TOTAL_BTL_INTRA_FED_TAXES
     +                                     + BTL_INTRA_FEDERAL_TAXES
                     SUB_TOTAL_BTL_INTRA_STATE_TAXES =
     +                                   SUB_TOTAL_BTL_INTRA_STATE_TAXES
     +                                   + BTL_INTRA_STATE_TAXES
                     SUB_TOTAL_ATL_FEDERAL_TAXES =
     +                   SUB_TOTAL_ATL_FEDERAL_TAXES + ATL_FEDERAL_TAXES
                     EXCLUDE_STATE_TAXES=EXCLUDE_STATE_TAXES+STATE_TAXES
                     EXCLUDE_COMMON_DIVIDENDS=EXCLUDE_COMMON_DIVIDENDS +
     +                                                  COMMON_DIVIDENDS
                     EXCLUDE_SUB_INCOME = EXCLUDE_SUB_INCOME +
     +                                                 SUBSIDIARY_INCOME
                  ENDIF ! DONT ADD
               ENDIF
               IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                  EXCLUDE_STATE_NOL_TAX_DEF_DR =
     +                                   EXCLUDE_STATE_NOL_TAX_DEF_DR
     +                                   + STATE_DEFERRED_TAXES_FROM_NOL
                  EXCLUDE_FED_NOL_TAX_DEF_DR =
     +                                     EXCLUDE_FED_NOL_TAX_DEF_DR
     +                                     + FED_DEFERRED_TAXES_FROM_NOL
                  EXCLUDE_TAX_DEFERRALS_DR = EXCLUDE_TAX_DEFERRALS_DR 
     +                                       + DEFERRED_TAXES_DR
c     +                                       + BTL_DEFERRED_TAXES_DR
               ENDIF
            ENDIF
            CURRENT_LTD_RETIREMENTS  = CURRENT_LTD_RETIREMENTS
     +                                 + LTDRET(YR+1,CLASS_POS)
C
            IF(YR >= 1) THEN
               WRITE(STR_CLASS_NUM,'(I4)') CLASS-1
               IF(CLASS == 0 .AND. SUBS_ACTIVE_FOR_REPORTING) THEN
                  ASSET_CLASS_NAME =
     +                           trim(CLASS_NAME(CLASS_POS))//' (Con)'
               ELSEIF(PARENT_CLASS .AND. SUBS_ACTIVE_FOR_REPORTING) THEN
                  ASSET_CLASS_NAME =
     +                      trim(CLASS_NAME(CLASS_POS))//STR_CLASS_NUM
     +                                                   //' (Parent)'
               ELSEIF(trim(CLASS_NAME(CLASS_POS)) /= ' ')THEN
                  ASSET_CLASS_NAME = trim(CLASS_NAME(CLASS_POS))
     +                                                   //STR_CLASS_NUM                  
               ELSE
                  ASSET_CLASS_NAME = 'Class '//STR_CLASS_NUM
               ENDIF
               WRITE(STR_CLASS_NUM,'(I2)') CLASS_LEVEL
               IF(CLASS_TYPE(CLASS_POS) == SBU) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (SBU)'//
     +                                                     STR_CLASS_NUM
               ELSEIF(SUBSIDIARY_CLASS) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Sub)'//
     +                                                     STR_CLASS_NUM
               ELSEIF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  ASSET_CLASS_NAME=trim(ASSET_CLASS_NAME)//' (Reg)'//
     +                                                     STR_CLASS_NUM
               ENDIF
C
C VARIBLE ASSIGNMENT
C              
               CALL SUMMARIZE_VARIABLES(CLASS_POS,YR)
               CALL SET_NON_EQUIVALENCED_VARIABLES
C
C EMISSIONS REPORT INFORMATION
C
               IF(.NOT. ASSET_ANALYST_ONLY()) THEN
                  VOID_LOGICAL = REPORT_CLASS_EMISSIONS_INFO(VARIABLE) !155 TO 208
               ENDIF
               
               CALL CLASS_SHAREHOLDER_VALUE(VARIABLE,
     +                             OPERATING_ASSETS_YEAR_END(CLASS_POS),
     +                             EMBEDDED_PARENT_LTD_COST,
     +                             EMBEDDED_PARENT_PS_COST)
               CALL GRE_DSC_REPORT(VARIABLE)
               CALL EBITDA_REPORT(VARIABLE)
               CALL SUB_SEC_RATIOS(VARIABLE)
               IF(FirstEnergy_Is_Active) THEN
                  CALL FIRST_ENERGY_PandL_REPORT(CLASS,VARIABLE,
     +                                       CL_ANN_CLASS_ENERGY,
     +                                       EXP_FUEL_EXPENSE,
     +                                       EXP_PURCHASE_POWER_EXPENSE,
     +                                       EXP_FILE_VARIABLE_EXPENSE,
     +                                       EXP_FILE_FIXED_EXPENSE)
                  ATL_AMORTIZATION = ATL_AMORTIZATION
     +                               + VARIABLE_OM_AMORT
                  OTHER_DD_AMORT = OTHER_DD_AMORT
     +                             + VARIABLE_OM_AMORT
               ENDIF
C              CALL SET_ALL_OUTPUT_VARIABLES
c               DEFERRED_TAXES_ROLLUP_CR = DEFERRED_TAXES_CR
c    +                                     + LTD_PS_DEFERRED_TAX_CR
c     +                              + NF_DEFERRED_TAXES_CR
               IF(CLASS_LEVEL >= 0) THEN
c moved to eliminate adding SUB to SUB 12/30/97
c                 CALL TALLY_RESULTS_INFO(VARS_2_PASS, 
c    +                                  VARIABLE,
c    +                                  LEVEL_SUMATION(0,CLASS_LEVEL-1))
                  VARIABLE(262) = ADJUSTMENT_2_ECONOMIC_ASSETS
                  IF(CLASS_TYPE(CLASS_POS) == SBU .OR.
     +                    CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                     SBU_VARIABLES(636) =
     +                                 LEVEL_SUMATION(636,CLASS_LEVEL-1)
                     IF(.NOT. DONT_TALLY_THIS_CLASS)
     +                    CALL TALLY_RESULTS_INFO(VARS_2_PASS,
     +                                  VARIABLE,
     +                                  LEVEL_SUMATION(0,CLASS_LEVEL-1))
                     LEVEL_SUMATION(89,CLASS_LEVEL-1) = 0.  ! LIAB NEC
                     LEVEL_SUMATION(75,CLASS_LEVEL-1) = 0.  ! ASSET NEC
                     IF(.NOT. DONT_TALLY_THIS_CLASS)
     +                      CALL TALLY_RESULTS_INFO(VARS_2_PASS,
     +                                           VARIABLE,SBU_VARIABLES)
                     SBU_VARIABLES(29) = SBU_VARIABLES(681)
     +                                   + SBU_VARIABLES(682)
     +                                   + SUBSIDARY_VARIABLES(733)
                     TOTAL_CAP_LEASES_BAL_ADJ = TOTAL_CAP_LEASES_BAL_ADJ
     +                                          + CAP_LEASES_BAL_ADJ
                     SBU_VARIABLES(89) = 0. ! LIAB NEC
                     SBU_VARIABLES(75) = 0. ! ASSET NEC
                  ELSEIF(CLASS_LEVEL >= 0) THEN
C                     IF(CLASS_LEVEL >= 1) THEN ! passing tax credits to parent
                    IF(CLASS_LEVEL >= 1 .AND.    ! passing tax credits to parent
     +                                 .NOT. DONT_TALLY_THIS_CLASS) THEN
                        CONSOLD_AVAIL_FED_TAX_CREDIT =
     +                                    CONSOLD_AVAIL_FED_TAX_CREDIT +
     +                                    FED_TAX_CREDIT_PASSED_UP
                        CONSOLID_FED_SEC_29_TAX_CREDITS =
     +                                 CONSOLID_FED_SEC_29_TAX_CREDITS +
     +                                          SEC_29_CREDITS_PASSED_UP
                        CONSOLID_FED_SEC_42_TAX_CREDITS =
     +                                 CONSOLID_FED_SEC_42_TAX_CREDITS +
     +                                          SEC_42_CREDITS_PASSED_UP
c$ifdefined(no_credit_passing)
c                        LEVEL_SUMATION(342,CLASS_LEVEL-1)=VARIABLE(342)+
c     +                                 LEVEL_SUMATION(342,CLASS_LEVEL-1)
c                        LEVEL_SUMATION(371,CLASS_LEVEL-1)=VARIABLE(371)+
c     +                                 LEVEL_SUMATION(371,CLASS_LEVEL-1)
c                        LEVEL_SUMATION(372,CLASS_LEVEL-1)=VARIABLE(372)+
c     +                                 LEVEL_SUMATION(372,CLASS_LEVEL-1)
c                        LEVEL_SUMATION(347,CLASS_LEVEL-1)=VARIABLE(347)+
c     +                                 LEVEL_SUMATION(347,CLASS_LEVEL-1)
c$endif
c                       LEVEL_SUMATION(,CLASS_LEVEL-1) = VARIABLE() +
c    +                                  LEVEL_SUMATION(,CLASS_LEVEL-1)
                     ENDIF
                     IF(CONSOLIDATING_CLASS(CLASS_POS)) THEN
                        IF(.NOT. DONT_TALLY_THIS_CLASS)
     +                        CALL SUB_CONSOLIDATING_ADJUSTMENTS(
     +                                     VARS_2_PASS,
     +                                     VARIABLE,SUBSIDARY_VARIABLES)
                     ELSE   
                        IF(.NOT. DONT_TALLY_THIS_CLASS)
     +                        CALL TALLY_RESULTS_INFO(VARS_2_PASS,
     +                                     VARIABLE,SUBSIDARY_VARIABLES)
                     ENDIF
                     IF(.NOT. DONT_TALLY_THIS_CLASS) THEN
                        TOTAL_SUB_COMMON_EQUITY = VARIABLE(77) +
     +                                           TOTAL_SUB_COMMON_EQUITY
                        TOTAL_SUB_RETAINED_EARNINGS = VARIABLE(78) +
     +                                       TOTAL_SUB_RETAINED_EARNINGS
                        TOTAL_SUB_OCI_EARNINGS = TOTAL_SUB_OCI_EARNINGS
     +                                           + VARIABLE(730)
                        TOTAL_SUB_INVESTMENT = TOTAL_SUB_INVESTMENT +
     +                                                      VARIABLE(91)
                     ENDIF
                     IF(CLASS_LEVEL == 1 .AND.
     +                                 .NOT. DONT_TALLY_THIS_CLASS) THEN
                        SUB_TOTAL_SUB_INCOME(CLASS_LEVEL) =
     +                               SUB_TOTAL_SUB_INCOME(CLASS_LEVEL) +
     +                                                      VARIABLE(43)
                     ENDIF
                  ENDIF
               ENDIF
               IF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP .OR.
     +                                CLASS_TYPE(CLASS_POS) == SBU) THEN
                  CALL SET_SUBSIDARY_NA(VARIABLE)
               ENDIF
               IF(CLASS_TYPE(CLASS_POS) == SUBSIDIARY) THEN
                  CALL SET_SUBSIDARY_VALUES_AND_NA(VARIABLE)
               ENDIF
               IF(PARENT_CLASS)   
     +                       ST_JOE_BASE_ELECTRIC_REVENEUS = VARIABLE(0)
C     
               FED_TAXABLE_INCOME_AFTER_NOLS = VARIABLE(136)
               IF(FED_TAXABLE_INCOME_AFTER_NOLS > 0.) THEN
                  VARIABLE(213) = 100. * VARIABLE(340)/
     +                                     FED_TAXABLE_INCOME_AFTER_NOLS
               ELSE
                  VARIABLE(213) = 100. * FEDERAL_TAX_RATE
               ENDIF
C
C
C CORRECTS FOR CHANGES IN RB THAT DON'T INVOLVE CASH 3/15/98
C
               IF(CLASS_TYPE(CLASS_POS) == REGULATED_GROUP) THEN
                  VARIABLE(127) = VARIABLE(127) + RATE_BASE_CASH_ADJ     ! DEFERRED_EXPENSE_CASH
               ENDIF
C
c               OTHER_PURCHASE_POWER_EXPENSE =
c     +                                 OTHER_PURCHASE_POWER_EXPENSE
c     +                                 + AFILIATE_PURCHASE_POWER_EXPENSE

               IF(WVPA()) THEN
                  CALL WVPA_SPECIAL_REPORT_VARIABLES(CLASS,
     +                                               VARIABLE)
               ENDIF
C
               IF(WVPA()) THEN
                  CALL WVPA_ANNUAL_RISK_VALUES(
     +                                    WVPA_MEMBER_RATES_WITH_SDI,    !744
     +                                    WVPA_MEMBER_RATES_WITHOUT_SDI, ! 745
     +                                    WVPA_MEMBER_ENERGY_SALES, ! 751
     +                                    WVPA_SDI_ENERGY_SALES) ! 752
                  CALL WVPA_ANNUAL_MARGINS(VARIABLE)
               ENDIF
               IF(ODEC() .AND. SUBSIDIARY_CLASS .AND. 
     +                                         CLASS - 1 == ODEC_NA3_ID)
     +                   ODEC_NA3_PURCHASE_EXPENSE =
     +                                   OPERATING_REVENUES(2,CLASS_POS)
               IF(ASSET_REPORTS_ACTIVE .AND. (PARENT_CLASS .OR.
     +                                    REPORT_CLASS(CLASS_POS))) THEN
c                 VARIABLE(759) = CASH_TIMING_ADJUSTMENTS
c    +                            + INCOME_TAX_TIMING_ADJS
                  ECITIES_TRANSFER_BENEFIT = 
     +              RETURN_ECITIES_OBJ_VARS(CLASS,                        ! 683  WTB 
     +                                      ECITIES_WHOLESALE_PROD_COST,  ! 684  C-PROD
     +                                      ECITIES_VAR_PROD_COST,        ! 685  C-SUPP
     +                                      ECITIES_NEW_FIXED_COST,       ! 686  C-CAP
     +                                      ECITIES_MARKET_ENERGY_SALES,  ! 687  R
     +                                      ECITIES_TRANSMISSION_FEES)    ! 688  C-FEES
                  VARIABLE(641) = VARIABLE(76)
     +                            - VARIABLE(90) ! ASSET_MINUS_LIABS
                  VARIABLE(642) = VARIABLE(641)
     +                            - CLASS_PRIOR_INBALANCE(CLASS_POS)
                  CLASS_PRIOR_INBALANCE(CLASS_POS) = VARIABLE(641)
                  IF(REPORT_ZEROS_4_CLASS(CLASS_POS) .AND.
     +                      ACTIVATE_CLASS_IN_YEAR(CLASS_POS) > YR) THEN
                     VARIABLE = 0.
                  ENDIF
                  OUTPUT_CLASS_ID = CLASS - 1
                  DEFERRED_TAXES_ROLLUP_CR = DEFERRED_TAXES_CR
     +                                       + LTD_PS_DEFERRED_TAX_CR
     +                                       + NF_DEFERRED_TAXES_CR
                  IF(IMPA()) CALL IMPA_ANNUAL_RATIOS(PARENT_CLASS,CLASS,
     +                                               VARIABLE,
     +                                               OPERATING_METHOD)
C                  IF(SALT_RIVER_PROJECT()) THEN
C                     VARIABLE(117) = VARIABLE(117)   ! NUCL_DECOM_FUND
C     +                               + VARIABLE(235) ! NET_OF_TAX_NUCL_FUND_RETURN
C                  ENDIF
                  CALL MG_LOCATE_WRITE(8,15,ASSET_CLASS_NAME,3,4)
                  WRITE(INCOME_UNIT,REC=OUTPUT_RECORD)
     +                                            PRT_ENDPOINT(),
     +                                            FLOAT(BASE_YEAR+YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            VARIABLE
                  IF(FirstEnergy_Is_Active)
     +                  CALL FE_PCA_LEGAL_REPORTS(FLOAT(BASE_YEAR+YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            OUTPUT_RECORD,
     +                                            VARIABLE)
                  IF(base_year+year >= 2011 .and. .false.) THEN
                     write(37673,1021) output_record,
     +                                 ASSET_CLASS_NAME,
     +                                 VARIABLE
                  ENDIF
 1021 FORMAT(1X,I4,',"',A,'",',1000(F15.0,','))
                  OUTPUT_RECORD = OUTPUT_RECORD - 1
               ENDIF
C 
               IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
                  WRITE_MONTHLY_INFOR = ASSET_REPORTS_ACTIVE .AND.
     +                       (PARENT_CLASS .OR. REPORT_CLASS(CLASS_POS))
                  CALL REPORT_MONTHLY_ANALYSIS(YEAR,CLASS,
     +                     ASSET_CLASS_NAME,
     +                     CLASS_POS,
     +                     CLASS_TYPE(CLASS_POS),
     +                     CLASS_LEVEL,
     +                     WRITE_MONTHLY_INFOR,
     +                     DONT_TALLY_THIS_CLASS,
     +                     THIS_IS_REPORTING_CLASS,
     +                     VARIABLE,
     +                     CLASS_CUMULATIVE_DEPRECIATION(1,CLASS_POS),
     +                     REARNC(1,CLASS_POS),
     +                     COMMON_STOCK(1,CLASS_POS),
     +                     LONG_TERM_DEBT(1,CLASS_POS),
     +                     PREFERRED_STOCK(1,CLASS_POS),
     +                     INVESTMENTS_BOY,
     +                     NOTES_RECEIVABLE_BOY,
     +                     NOTES_PAYABLE_BOY,
     +                     DEFERRED_PURCHASE_POWER(1,CLASS_POS),
     +                     PENSION_LIABILITY(1,CLASS_POS),
     +                     DEFERRED_GAIN_FROM_SALES(1,CLASS_POS),
     +                     STORM_RESERVE_BALANCE(1,CLASS_POS),
     +                     ACCRUED_VACATION_PAY_BALANCE(1,CLASS_POS),
     +                     OTHER_ASSETS(1,CLASS_POS),
     +                     NET_DD_BALANCE(1,CLASS_POS),
     +                     CUMTXNORM(1,CLASS_POS),
     +                     WCCUM(1,CLASS_POS) + LINEC(1,CLASS_POS), !ASSETS NEC BOY
     +                     ACCOUNTS_RECEIVABLE_BOY,
     +                     CLASS_CUMULATIVE_DEPRECIATION(1,CLASS_POS),
     +                     CUM_DEF_REVENUES(1,CLASS_POS),
     +                     DEF_TAX_CR_BALANCE(1,CLASS_POS),
     +                     DEF_ITC_BALANCE(1,CLASS_POS),
     +                     OTHER_LT_LIABILITY(1,CLASS_POS),
     +                     ACCOUNTS_PAYABLE_BOY,
     +                     LINEC(1,CLASS_POS), !ASSETS NEC BOY
     +                     CLASS_CWIP(1,CLASS_POS),
     +                     BOY_POST_RETIRE_MEDICAL_FUND,
     +                     BOY_POST_RETIRE_MED_PAYABLE,
     +                     BOY_NUC_DECOM_FUND_LIABILITY,
     +                     CAPITIALZIED_LEASES(1,CLASS_POS),
     +                     NUC_DECOM_FUND_BAL(1,CLASS_POS),
     +                     CLASS_NET_NF_VALUE(1,CLASS_POS),
     +                     INVESTMENT_IN_SUBSIDIARIES(1,CLASS_POS),
     +                     CONSOLIDATED_TAX_LIB_ADJUSTMENT,
     +                     BOY_ISSUE_EXP_BAL,
     +                     FUEL_INVENTORY_BOY,
     +                     GAS_STORAGE_BOY,
     +                     MATERIALS_SUPPLIES_BOY,
     +                     UNAMORTIZED_INTEREST_BALANCE(1,CLASS_POS),
     +                     REGULATORY_DEFERRED_CREDITS_BAL_BOY,
     +                     GAIN_ON_REAQUIRED_DEBT_BAL_BOY,
     +                     OTHER_DEFERRED_CREDITS_BAL_BOY,
     +                     GOODWILL(1,CLASS_POS),
     +                     ExecBenefitsBalance(1,CLASS_POS),
     +                     IncentiveCompBalance(1,CLASS_POS))
               ENDIF
C
               IF(THIS_IS_REPORTING_CLASS .OR.
     +               (PARENT_CLASS .AND. REPORTING_CLASS_ID == -1)) THEN
                  CALL STORE_REPORTING_VALUES(VARIABLE)
C                  THIS_IS_REPORTING_CLASS = .FALSE.
               ENDIF
               CALL MOVE_BALANCE_SHEET_ITEMS()
               IF(PARENT_CLASS) THEN
                  EMBEDDED_PARENT_LTD_COST =
     +                                WEIGHTED_CLASS_LTD_COST(CLASS_POS)
                  EMBEDDED_PARENT_PS_COST =
     +                                 WEIGHTED_CLASS_PS_COST(CLASS_POS)
               ENDIF
               IF(PARENT_CLASS .AND. SUBS_ACTIVE) THEN
C
C CONSOLIDATING ADJUSTMENTS 
C
                  WE_ARE_CONSOLIDATING = .TRUE.
                  CALL TRANSFER_ZERO_ASSETS(INT2(0))
                  DEFERRED_TAX_BASIS = 0.
                  NF_DEFERRED_TAX_BASIS = 0.
                  LEASOR_DEFERRED_TAX_BASIS = 0.
                  BOOK_DEPRECIATION = 0.
                  CAPITIALIZED_INTEREST = 0.
                  NF_CAPITIALIZED_INTEREST = 0.
                  AMORTIZATION_EXPENSE = 0.
                  ATL_AMORTIZATION = 0.
                  BTL_AMORTIZATION = 0.
                  FASB143_ARO_INTEREST_ACCREATION = 0.
                  INTEREST_AMORTIZATION = 0.
                  ATL_LEASE_AMORTIZATION = 0.
                  BTL_AMORTIZATION_IN_EXPENSES = 0.
                  CIAC_AMORTIZATION = 0.
                  PS_PREM_ISSUE_EXP_AMORT = 0.
                  INCOME_TAX_DEPRECIATION = 0.
                  EA_TAX_BOOK_DEP = 0.
                  FA_SL_TAX_DEP = 0.
                  LEASOR_NF_SL_TAX_DEP = 0.
                  DSM_SL_TAX_DEP = 0.
                  LEASOR_NF_AMORTIZATION = 0.
                  BTL_DEFERRED_TAXES_DR = 0.
                  DEFERRED_TAXES_DR = 0.
c                 SUBSIDARY_VARIABLES(759) = SUBSIDARY_VARIABLES(759)
c    +                                     + INCOME_TAX_TIMING_ADJS
                  INCOME_TAX_TIMING_ADJS = 0.
                  SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL) =
     +                                 SUBSIDIARY_DIVIDEND
     +                                 - UNMODELED_SUB_DIVIDEND_2_PARENT
C                  IF(NUM_OF_SUBSIDIARIES > 0) THEN
                     INVESTMENT_IN_SUBSIDIARIES(2,0) =
     +                                              TOTAL_SUB_INVESTMENT ! + VARIABLE(91)
                     INVESTMENT_IN_SUBSIDIARIES(2,0) = 
     +                     INVESTMENT_IN_SUBSIDIARIES(1,0)
     +                     + SUB_EQUITY_NEEDS_FROM_PARENT(CLASS_LEVEL)
     +                     - SUB_DIVIDEND_PAYMENTS_2_PARENT(CLASS_LEVEL)
     +                     + SUB_EARNINGS_2_EXCLUDE(CLASS_LEVEL)
                     INVESTMENT_IN_SUBSIDIARIES(2,0) =
     +                                 SUBSIDARY_VARIABLES(91)
     +                                 - UNMODELLED_SUBS_OWNED_BY_SUBS
     +                                 - UNMODELLED_SUBS_OWNED_BY_PARENT
C                  ELSE
C                     INVESTMENT_IN_SUBSIDIARIES(2,0) = 0.
C                  ENDIF
                  PARENT_MARKET_TO_BOOK = ABS(MARKET_2_BOOK)
                  PARENT_AVERAGE_SHARES = AVERAGE_SHARES
                  PARENT_AVERAGE_EQUITY = AVERAGE_EQUITY
                  PARENT_YEAR_END_SHARES = YEAR_END_SHARES
                  PARENT_STOCK_BOOK_VALUE = STOCK_BOOK_VALUE
                  PARENT_STOCK_MARKET_PRICE = STOCK_MARKET_PRICE
                  PARENT_AVERAGE_STOCK_PRICE = AVERAGE_STOCK_PRICE
                  PARENT_DIVIDEND_PER_SHARE = DIVIDEND_PER_SHARE
                  PARENT_COMMON_STOCK_ISSUED = COMMON_STOCK_ISSUED
C    +                                       - NEW_SUBSIDIARY_INVESTMENT ! 6/10/98
                  PARENT_SUBSIDIARY_INCOME = SUBSIDIARY_INCOME
C
C 5/18/99 MODIFICATION TO FIX NOLs
C
                  VOID_LOGICAL = RETURN_CONSOLIDATED_NOLS_INFO(
     +                                        CONSOLIDATED_FED_NOL_GEN,
     +                                        CONSOLIDATED_FED_NOL_USED)
                  CONSOLIDATED_FED_NOL_GEN = SUBSIDARY_VARIABLES(310)
     +                                       - CONSOLIDATED_FED_NOL_GEN
                  CONSOLIDATED_FED_NOL_USED = SUBSIDARY_VARIABLES(311)
     +                                       - CONSOLIDATED_FED_NOL_USED
C                 CONSOLIDATED_FED_NOL_GEN = 0.
C                 CONSOLIDATED_FED_NOL_USED = 0.
C END CHANGE
                  CONSOLIDATED_FED_TAX_CREDITS = VARIABLE(342)
C
c                 CONSOLID_FED_SEC_29_TAX_CREDITS = VARIABLE(371)
c                 CONSOLID_FED_SEC_42_TAX_CREDITS = VARIABLE(372)
                  CONSOLIDATED_STATE_TAX_CREDITS = VARIABLE(347)
C
C SHAREHOLDER VALUE
C
                  PARENT_EQUITY_RATIO = EQRATO
                  PARENT_EQUITY_RATE = ROEQU
                  PARENT_EQUITY_RISK_ADJ=COST_OF_CAPITAL_RISK_ADJUSTMENT
                  PARENT_PS_RATE = PSRATE
                  PARENT_PS_RATIO = PSRATO
                  PARENT_LTD_RATE = LTDRTE
                  PARENT_STD_RATE = STD_INTEREST_RATE
                  PARENT_STATE_TAX_RATE = STATE_TAX_RATE
                  CON_FEDERAL_TAXABLE_INCOME_ADJ =
     +                                 FEDERAL_TAXABLE_INCOME
     +                                 + SUB_FEDERAL_TAXABLE_INCOME
     +                                 - CONSOLIDATED_FED_TAXABLE_INCOME
                  IF(USE_ACTUAL_CON_DEFERRED_TAX_DR) THEN
                     CON_FED_DEFERRED_TAX_DR_ADJ = DEFERRED_TAXES_DR
     +                                    + EXCLUDE_TAX_DEFERRALS_DR
     +                                    - ACTUAL_CON_DEFERRED_TAXES_DR
     +                                    - EXCLUDE_STATE_NOL_TAX_DEF_DR
                  ELSE
                     CON_FED_DEFERRED_TAX_DR_ADJ = DEFERRED_TAXES_DR
c     +                                 + BTL_DEFERRED_TAXES_DR
     +                                 + EXCLUDE_TAX_DEFERRALS_DR
     +                                 - CONSOLID_DEFERRED_TAXES_DR ! DR SPECIFIED AT CONSOLD IN TAX FILE
C     +                                 + CON_DEF_TAX_DR_NOLS_AMT_CREDITS ! REMOVED FOR TESTING 12/28/11
     +                                 - EXCLUDE_STATE_NOL_TAX_DEF_DR
                  ENDIF
C
                  VARIABLE = 0.
                  CALL ZERO_NON_EQUIVALENT_VALUES
                  CALL READ_ELIMINATIONS_PARM_FILE(
     +                                      RETIREMENT_MEDICAL_PAYMENTS,
     +                                      SALVAGE_TRANSACTIONS)
C
                  IF(.NOT.SEPARATE_ELIMINATIONS) THEN
C
C NOTE!!! EXPENSE VARIABLES ARE SET TO ZERO IN THE FOLLOWING ROUTINE
C EXCEPT FOR THE FOLLOWING WHICH ARE INITIALIZED BY READING THE 
C FINANCIAL PARAMETER FILE
C
C 
C
                     CASH_2_LT_INVESTMENTS = 0.
                     INVESTMENTS_MADE = 0.
                     INVESTMENTS_SOLD = 0.
                     PURCHASE_POWER_EXPENSE = 0.
                     OTHER_PURCHASE_POWER_EXPENSE = 0.
                     AFILIATE_PURCHASE_POWER_EXPENSE = 0.
                     CL_MARKET_PURCHASES = 0.
                     SERVICE_TRANSACTION_EXPENSE = 0.
                     TAXES_PAID_BY_PARENT = 0.
                     TAX_PAYMENTS_2_PARENT_FROM_SUB = 0.
C
                     OPERATING_REVENUES(2,0) = 0.
                     GAS_REVENUES = 0.
                     RELATIONSHIP_REVENUES = 0.
                     COMPETITIVE_SALES_REVENUE = 0.
                     FE_Competitive_Unit_Sales = 0.
                     FE_Intra_Company_Utility_Sales = 0.
                     UTILITY_SALES_REVENUE = 0.
                     BULK_POWER_REVENUES = 0.
                     OTHER_REVENUE(2,0) = 0.
                     CLASS_BTL_REVENUES = 0.
                     CLASS_BTL_EXPENSES = 0.
                     ATL_LEASE_PAYMENTS = 0.
                     BTL_LEASE_PAYMENTS = 0.
                     EMISSION_CREDIT_EXPENSE = 0.
                     BASE_RATES_REVENUES = 0.
                     CATAWBA_REVENUES = 0.
                     CATAWBA_EXPENSES = 0.
                     CATAWBA_CAPACITY_PAYMENTS = 0.
                     CATAWBA_LEVEL_CAP_PAYMENTS = 0.
                     CATAWBA_OTHER_NET_REVENUES = 0.
                     CATAWBA_DEFERRED_DEBITS = 0.
                     CATAWBA_DEFER_TAXES_BAL_CR = 0.
                     CATAWBA_DEFERRED_TAXES_CR = 0.
                     CATAWBA_TOTAL_CAP_PAYMENTS = 0.
                     OWNED_NF_BURN_EXP_FILE = 0.
                     LEASED_NF_BURN_EXP_FILE = 0.
                     OWNED_NF_BURN_SALES_FILE = 0.
                     LEASED_NF_BURN_SALES_FILE = 0.
                     NUC_FUEL_LEASED_BURN = 0.
                     NUC_DECOMMISSIONING_COST = 0.
                     FASB143_ARO_CASH_PAYMENTS = 0.
                     FASB143_ARO_TRUST_CASH_PAYMENTS = 0.
                     NET_OF_TAX_NUCL_FUND_RETURN = 0.
                     TAX_PREFERENCE_DEPRECIATION = 0.
                     INVESTMENT_INCOME = 0.
                     CASH_OTH_ASSET = 0.
                     CAPTURED_OPT_METHOD_REVENUES = 0.
                     RETIREMENT_MEDICAL_PAYMENTS = 0.
                     TOTAL_DERIVATIVE_EXPENSE = 0.
                     TOTAL_FUEL_DERIV_EXPENSES =0.
                     WVPA_MEMBER_ACCRUED_REVENUES = 0.
                     WVPA_PURCHASE_POWER_EXPENSE_ADJ = 0.
                     CASH_TO_ACCRD_MBR_REVENUES_BAL = 0.
                     CASH_TO_POST_RETIRE_MEDICAL_BAL = 0.
                     ST_INVESTMENT_EARNINGS = 0.
                     LT_INVESTMENTS_EARNINGS = 0.
                     RETIREMENT_MEDICAL_FUND_RETURN = 0.
                     NUCL_FUND_RETURN = 0.
                     INTEREST_INCOME_AFILLIATES = 0.
                     DEBT_FILE_INVESTMENT_INCOME = 0.
                     BTL_CASH_EARNINGS = 0.
                     NEW_FINANCING_ACCRUALS = 0.
                     COMMON_STOCK_DIV_ACCRUALS = 0.
                     REGULATED_REVENUES_12 = 0.
                     BTL_DEFERRED_TAXES_DR = 0.
                     DEFERRED_TAXES_DR = 0.
C
                     CALL EXPENSE_REVENUE_INFO(ASSET_YR,
     +                                ELIMINAITON_CLASS_ID_NUM,
     +                                EX_CLASS_EXISTS,
     +                                VARIABLE,
     +                                FUEL_EXPENSE,
     +                                OTHER_PURCHASE_POWER_EXPENSE, !PURCHASE_POWER_EXPENSE,
     +                                VARIABLE_EXPENSE,
     +                                FIXED_EXPENSE,
     +                                OTHER_EXPENSE_1,
     +                                OTHER_EXPENSE_2,
     +                                OTHER_EXPENSE_3,
     +                                OWNED_NF_BURN_EXP_FILE,
     +                                LEASED_NF_BURN_EXP_FILE,
     +                                DSM_EXPENSE,
     +                                DSM_REBATE,
C REVENUES
     +                                ADJUSTMENT_CLAUSE_REVENUES,
     +                                BASE_RATES_REVENUES,
     +                                SECONDARY_SALES_REVENUES,
     +                                SECONDARY_SALES_NOT_IN_RATES,
     +                                OTHER_REVENUE(2,0),
     +                                CLASS_BTL_REVENUES,
     +                                CLASS_BTL_EXPENSES,
     +                                ATL_LEASE_PAYMENTS,
     +                                BTL_LEASE_PAYMENTS,
     +                                EXP_SERVICE_TRANSACTIONS,
     +                                CLASS_EXP_EMIS_EXPENSE,
     +                                DOE_NUC_FUEL_FEE,
     +                                NUC_DECOMMISSIONING_COST,
     +                                CATAWBA_REVENUES,
     +                                CATAWBA_EXPENSES,
     +                                GAS_REVENUES,
     +                                TRANSMISSION_OPERATION,
     +                                TRANSMISSION_MAINTENANCE,
     +                                DISTRIBUTION_OPERATION,
     +                                DISTRIBUTION_MAINTENANCE,
     +                                CUSTOMER_ACCOUNTS,
     +                                CUSTOMER_SERVICES,
     +                                SALES_EXPENSE,
     +                                AG_OPERATIONS,
     +                                AG_MAINTENANCE,
     +                                UNBILLED_REVENUES,
     +                                ATL_DEFERRED_REVENUES,
     +                                RELATIONSHIP_REVENUES,
     +                                RESIDENTIAL_REVENUES,
     +                                COMMERCIAL_REVENUES,
     +                                INDUSTRIAL_REVENUES,
     +                                LIGHTING_REVENUES,
     +                                BULK_POWER_REVENUES,
     +                                PARM_AMORTIZATION_ADJUSTMENT,
     +                                AMORT_DEF_REVENUES,
     +                                ATL_LEASE_AMORTIZATION,
     +                                BTL_LEASE_AMORTIZATION,
     +                                BOOK_DEPRECIATION,   ! EXP_BOOK_DEPRECIATION,
     +                                OTHER_INCOME_NET_OF_TAX,
     +                                CAPACITY_SALES_REVENUE,
     +                                GOVERNMENT_SALES_REVENUE,
     +                                BTL_AMORTIZATION_EXP,
     +                                CHANGE_IN_ACCOUNTS_RECEIVABLE,
     +                                CHANGE_IN_ACCOUNTS_PAYABLE,
     +                                ATL_LEASE_INTEREST,
     +                                BTL_LEASE_INTEREST,
     +                                BTL_NUC_FUEL_DECOM_LIABILITY,
     +                                DEFERRED_FUEL_EXPENSE,
     +                                VACATION_PAY_NON_CASH,
     +                                PENSION_EXPENSE_NON_CASH,
     +                                STORM_EXPENSE_NON_CASH,
     +                                CLASS_GAS_ADJ_CLAUSE_REVENUE,
     +                                STD_INTEREST_ADDEN,
     +                                LTD_INTEREST_ADDEN,
     +                                WVPA_MEMBER_ACCRUED_REVENUES,
     +                                WVPA_NON_MEMBER_COST_OF_POWER,
     +                                WVPA_MEMBER_COST_OF_POWER,
     +                                WVPA_MEMBER_COST_OF_SERVICES,
     +                                WVPA_NONMBR_COST_OF_SERVICES,
     +                                REGULATED_REVENUES_13,
     +                                NON_REG_REVENUES_10,
     +                                PENSION_EXPENSE_CASH,
     +                                Exp_PreferredDividends,
     +                                Exp_AFDCBorrowed,
     +                                Exp_AFDCEquity,
     +                                Exp_InterestIncome,
     +                                Exp_Dividends)
                     Mark_To_Market = VARIABLE(786) 
                     Payroll_Taxes = VARIABLE(787)
                     FE_NonCashPension = VARIABLE(791)  ! to pension liability on BS
                     FE_NonCashEarningsNonCorp = VARIABLE(790) ! to investment on BS
                     DEFERRED_REVENUES = DEFERRED_REVENUES +
     +                                             ATL_DEFERRED_REVENUES
C
                     CALL RETURN_TAX_INFO_ELIM(ASSET_YR,
     +                                         ELIMINAITON_CLASS_ID_NUM,
     +                                         CLASS_PROPERTY_TAXES,
     +                                         OTHER_TAXES,
     +                                         OPERATING_REVENUE_TAX)
C
                     BTL_EMISSION_CREDIT_EXPENSE = 0.
                     CLASS_INC_EMIS_EXPENSE = CLASS_EXP_EMIS_EXPENSE
                     ATL_EMISSION_CREDIT_EXPENSE=CLASS_INC_EMIS_EXPENSE
                     ADJ_CLAUSE_EXPENSE_ALLOCATION = 
     +                              ATL_EMISSION_CREDIT_EXPENSE *
     +                                ADJ_CLAUSE_EXPENSE_ALLOCATION/100.
                     BTL_EMISSION_CREDIT_REVENUE = 0.
                     ATL_EMISSION_CREDIT_REVENUE = 0.
                     ADJ_CLAUSE_REVENUE_ALLOCATION = 0.
                     EMISSION_CREDIT_EXPENSE=ATL_EMISSION_CREDIT_EXPENSE
                     NET_ADJ_CLAUS_EMIS_AMT =
     +                                     ADJ_CLAUSE_EXPENSE_ALLOCATION 
C
                     OWNED_NF_BURN = OWNED_NF_BURN_SALES_FILE
                     LEASED_NF_BURN = LEASED_NF_BURN_SALES_FILE
C
                     CALL EXPENSE_REVENUE_ADJUSTMENTS(ASSET_YR,
     +                                     SEPARATE_ELIMINATIONS,
     +                                     FUEL_EXPENSE,
     +                                     OTHER_PURCHASE_POWER_EXPENSE, ! PURCHASE_POWER_EXPENSE,
     +                                     VARIABLE_EXPENSE,
     +                                     FIXED_EXPENSE,
     +                                     OTHER_EXPENSE_1,
     +                                     OTHER_EXPENSE_2,
     +                                     OTHER_EXPENSE_3,
     +                                     OWNED_NF_BURN,
     +                                     LEASED_NF_BURN,
     +                                     DSM_EXPENSE,
     +                                     DSM_REBATE,
C REVENUES
     +                                     ADJUSTMENT_CLAUSE_REVENUES,
     +                                     BASE_RATES_REVENUES,
     +                                     SECONDARY_SALES_REVENUES,
     +                                     SECONDARY_SALES_NOT_IN_RATES,
     +                                     OTHER_REVENUE(2,0),
     +                                     CLASS_BTL_REVENUES,
     +                                     CLASS_BTL_EXPENSES,
     +                                     ATL_LEASE_PAYMENTS,
     +                                     BTL_LEASE_PAYMENTS,
     +                                     SERVICE_TRANSACTION_EXPENSE,
     +                                     EMISSION_CREDIT_EXPENSE,
     +                                     DOE_NUC_FUEL_FEE,
     +                                     NUC_DECOMMISSIONING_COST,
     +                                     CATAWBA_REVENUES,
     +                                     CATAWBA_EXPENSES,
     +                                     GAS_REVENUES,
     +                                     TRANSMISSION_OPERATION,
     +                                     TRANSMISSION_MAINTENANCE,
     +                                     DISTRIBUTION_OPERATION,
     +                                     DISTRIBUTION_MAINTENANCE,
     +                                     CUSTOMER_ACCOUNTS,
     +                                     CUSTOMER_SERVICES,
     +                                     SALES_EXPENSE,
     +                                     AG_OPERATIONS,
     +                                     AG_MAINTENANCE,
     +                                     UNBILLED_REVENUES,
     +                                     ATL_DEFERRED_REVENUES,
     +                                     RELATIONSHIP_REVENUES,
     +                                     RESIDENTIAL_REVENUES,
     +                                     COMMERCIAL_REVENUES,
     +                                     INDUSTRIAL_REVENUES,
     +                                     LIGHTING_REVENUES,
     +                                     BULK_POWER_REVENUES,
     +                                     PARM_AMORTIZATION_ADJUSTMENT,
     +                                     AMORT_DEF_REVENUES,
     +                                     ATL_LEASE_AMORTIZATION,
     +                                     BTL_LEASE_AMORTIZATION,
     +                                     BOOK_DEPRECIATION,       ! EXP_BOOK_DEPRECIATION,
     +                                     OTHER_INCOME_NET_OF_TAX,
     +                                     CAPACITY_SALES_REVENUE,
     +                                     GOVERNMENT_SALES_REVENUE,
     +                                     BTL_AMORTIZATION_EXP,
     +                                     ATL_LEASE_INTEREST,
     +                                     BTL_LEASE_INTEREST,
     +                                     BTL_NUC_FUEL_DECOM_LIABILITY,
     +                                    CHANGE_IN_ACCOUNTS_RECEIVABLE,
     +                                    CHANGE_IN_ACCOUNTS_PAYABLE,
     +                                    VACATION_PAY_NON_CASH,
     +                                    PENSION_EXPENSE_NON_CASH,
     +                                    STORM_EXPENSE_NON_CASH,
     +                                    WVPA_MEMBER_ACCRUED_REVENUES)
C
C VACATION, PENSION, STORM
C
                  IF(UI()) THEN
                     PENSION_TAX_DEDUCTION = PENSION_EXPENSE_CASH     ! 689
                     STORM_TAX_DEDUCTION = STORM_EXPENSE_CASH         ! 690
                     VACATION_TAX_DEDUCTION = VACATION_PAY_CASH      ! 691
                  ELSE
                     PENSION_TAX_DEDUCTION = PENSION_EXPENSE_NON_CASH      ! 689
                     STORM_TAX_DEDUCTION = STORM_EXPENSE_NON_CASH         ! 690
                     VACATION_TAX_DEDUCTION = VACATION_PAY_NON_CASH      ! 691
                  ENDIF
C
C INTRA COMPANY RECEIVABLES AND PAYABLES ADJUSTMENTS
C
                     DEFERRED_REVENUES = DEFERRED_REVENUES +
     +                                             ATL_DEFERRED_REVENUES
                     IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
                        CALL CHANGE_IN_RECD_PAYS_4_REV_FORC(INT2(-1),
     +                                    CHANGE_IN_ACCOUNTS_RECEIVABLE,
     +                                    CHANGE_IN_ACCOUNTS_PAYABLE)
                        CASH_TIMING_ADJUSTMENTS =
     +                                   CHANGE_IN_ACCOUNTS_PAYABLE
     +                                   - CHANGE_IN_ACCOUNTS_RECEIVABLE
                     ELSE
                        CHANGE_IN_ACCOUNTS_PAYABLE = 0.
                        CHANGE_IN_ACCOUNTS_RECEIVABLE = 0.
                        CASH_TIMING_ADJUSTMENTS = 0.
                     ENDIF
C
                     CALL SERVICE_TRANS_INFO(INT2(-1),FUEL_EXPENSE,
     +                                   OTHER_PURCHASE_POWER_EXPENSE, ! PURCHASE_POWER_EXPENSE,
     +                                   VARIABLE_EXPENSE,
     +                                   FIXED_EXPENSE,
     +                                   OTHER_EXPENSE_1,
     +                                   OTHER_EXPENSE_2,
     +                                   OTHER_EXPENSE_3,
     +                                   OWNED_NF_BURN_EXP_FILE,
     +                                   LEASED_NF_BURN_EXP_FILE,
     +                                   EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +                                   NF_BURN_IN_RATEBASE,
     +                                   DSM_EXPENSE,
     +                                   DSM_REBATE,
C REVENUES
     +                                   ADJUSTMENT_CLAUSE_REVENUES,
     +                                   BASE_RATES_REVENUES,
     +                                   SECONDARY_SALES_REVENUES,
     +                                   OTHER_REVENUE(2,0) ,
     +                                   CLASS_BTL_REVENUES,
     +                                   CLASS_BTL_EXPENSES,
     +                                   ATL_LEASE_PAYMENTS,
     +                                   BTL_LEASE_PAYMENTS,
     +                                   EXP_SERVICE_TRANSACTIONS,
     +                                   CLASS_EXP_EMIS_EXPENSE,
     +                                   DOE_NUC_FUEL_FEE,
     +                                   NUC_DECOMMISSIONING_COST,
     +                                   CATAWBA_REVENUES,
     +                                   CATAWBA_EXPENSES,
     +                                   CAPACITY_SALES_REVENUE)
                     IF(.NOT. ASSET_ANALYST_ONLY()) THEN
                        CALL RETURN_EL_INTRA_ADJUSTMENTS(
     +                                     SECONDARY_SALES_REVENUES,
     +                                     OTHER_PURCHASE_POWER_EXPENSE, ! PURCHASE_POWER_EXPENSE,
     +                                     VARIABLE_EXPENSE,
     +                                     FIXED_EXPENSE)
                        VOID_LOGICAL =
     +                           RETURN_CL_INTRA_CLASS_REVENUES(INT2(0),
     +                                       BASE_RATES_REVENUES,
     +                                       ADJUSTMENT_CLAUSE_REVENUES,
     +                                       SECONDARY_SALES_REVENUES,
     +                                       OTHER_REVENUE(2,0),
     +                                       INTRA_COMPANY_NF_BURN)
                     ENDIF
C
C                     IF(WVPA()) THEN
C                     ELSE
                        CALL RC_EXPENSE_REVENUE_INFO(INT2(-1),
     +                                   FUEL_EXPENSE,
     +                                  AFILIATE_PURCHASE_POWER_EXPENSE, ! OTHER_PURCHASE_POWER_EXPENSE, ! PURCHASE_POWER_EXPENSE,
     +                                   VARIABLE_EXPENSE,
     +                                   FIXED_EXPENSE,
     +                                   OTHER_EXPENSE_1,
     +                                   OTHER_EXPENSE_2,
     +                                   OTHER_EXPENSE_3,
     +                                   OWNED_NF_BURN_SALES_FILE,
     +                                   LEASED_NF_BURN_SALES_FILE,
     +                                   EXPENSE_COLLECT_VIA_ADJ_CLAUSE,
     +                                   DSM_EXPENSE,
     +                                   DSM_REBATE,
C REVENUES
     +                                   ADJUSTMENT_CLAUSE_REVENUES,
     +                                   BASE_RATES_REVENUES,
     +                                   SECONDARY_SALES_REVENUES,
     +                                   OTHER_REVENUE(2,0),
     +                                   CLASS_BTL_REVENUES,
     +                                   CLASS_BTL_EXPENSES,
     +                                   ATL_LEASE_PAYMENTS,
     +                                   BTL_LEASE_PAYMENTS,
     +                                   EXP_SERVICE_TRANSACTIONS,
     +                                   GAS_REVENUES,
     +                                   CATAWBA_REVENUES,
     +                                   RESIDENTIAL_REVENUES,
     +                                   COMMERCIAL_REVENUES,
     +                                   INDUSTRIAL_REVENUES,
     +                                   LIGHTING_REVENUES,
     +                                   BULK_POWER_REVENUES,
     +                                   CAPACITY_SALES_REVENUE,
     +                                   GOVERNMENT_SALES_REVENUE,
     +                                   CLASS_GAS_ADJ_CLAUSE_REVENUE,
     +                                   COMPETITIVE_SALES_REVENUE,
     +                                   FE_Competitive_Unit_Sales,
     +                                   FE_Intra_Company_Utility_Sales)
C                     ENDIF
                     OWNED_NF_BURN = OWNED_NF_BURN +
     +                               OWNED_NF_BURN_SALES_FILE
                     LEASED_NF_BURN = LEASED_NF_BURN +
     +                                LEASED_NF_BURN_SALES_FILE
                     SERVICE_TRANSACTION_EXPENSE =
     +                                       SERVICE_TRANSACTION_EXPENSE
     +                                       + EXP_SERVICE_TRANSACTIONS
                     VOID_INT2 = RETURN_ANNUL_CUSTOMER_VARIABLES(
     +                                   INT2(-1),
     +                                  AFILIATE_PURCHASE_POWER_EXPENSE,
     +                                   SECONDARY_SALES_REVENUES,
     +                                   CAPACITY_SALES_REVENUE,
     +                                   RELATIONSHIP_REVENUES,
     +                                   RESIDENTIAL_REVENUES,
     +                                   COMPETITIVE_SALES_REVENUE,
     +                                   UTILITY_SALES_REVENUE,
     +                                   COMMERCIAL_REVENUES,
     +                                   INDUSTRIAL_REVENUES,
     +                                   LIGHTING_REVENUES,
     +                                   BULK_POWER_REVENUES,
     +                                   GOVERNMENT_SALES_REVENUE,
     +                                   FE_Competitive_Unit_Sales,
     +                                   CAPACITY_PURCHASES_TO_LEVEL_RM)  ! 725
c     +                                   FE_Intra_Company_Utility_Sales)
                  ENDIF
                  TEST_ELIMINATIONS = .FALSE.
                  CALL EXISTING_ASSET_INFO(ASSET_YR,
     +                               ELIMINAITON_CLASS_ID_NUM,
     +                               EA_CLASS_EXISTS,
     +                               INCOME_TAX_DEPRECIATION,
     +                               BOOK_DEPRECIATION,
     +                               CLASS_GPV(2,0),
     +                               CLASS_CUMULATIVE_DEPRECIATION(2,0),
     +                                     EA_TAX_BOOK_DEP,
     +                               DEFERRED_TAX_BASIS,
     +                                     EA_PROPERTY_TAX_GPV,
     +                                     EA_PROPERTY_TAX_NPV,
     +                                     EA_DEFERRED_TAXES)
C
                  CALL DEBT_ELIM_INFO(ASSET_YR,
     +                              ELIMINAITON_CLASS_ID_NUM,
     +                              DB_CLASS_EXISTS,
     +                              PSDIV(YR,0), ! DEBT_FILE_PREFERRED_DIVIDENDS,
     +                              PREFERRED_STOCK_RETIREMENTS, !DEBT_FILE_PREFERRED_RETIREMENTS,
     +                              PREFERRED_STOCK_ISSUED,
     +                              LONG_TERM_DEBT_ISSUED,
     +                              LTDINT(YR,0), !INTEREST_ON_EXISTING_LTD,
     +                              LONG_TERM_DEBT_RETIREMENTS, !DEBT_FILE_LTD_RETIREMENTS,
     +                              ANNINT(YR,0), !LONG_TERM_DEBT_ANNUALIZED_INT +
     +                              ANN_PS_DIV(YR,0), !PREFERRED_STOCK_ANNUALIZED_DIVS
     +                              ANN_LTD_INT(YR,0), !LONG_TERM_DEBT_ANNUALIZED_INT
C                                                PREFERRED_STOCK_ANNUALIZED_DIVS
     +                              OTHER_INCOME_AFILLIATES,
     +                              INVESTMENT_IN_AFILLIATES,
     +                              INTEREST_INCOME_AFILLIATES,
     +                              LOANS_TO_AFILLIATES,
     +                              PS_PREM_BAL,
     +                              PS_PREM_AMORT,
     +                              LTD_PREM_BAL,
     +                              LTD_PREM_AMORT,
     +                              PS_ISSUING_BAL,
     +                              PS_ISSUING_AMORT,
     +                              LTD_ISSUING_BAL,
     +                              LTD_ISSUING_AMORT,
     +                              LTD_PS_ISSUE_TAX_EXPENSE,
     +                              CS_ISSUE_EXP_THIS_PERIOD,
     +                              MIPS_INCOME_TAX_DEDUCTION,
     +                              STD_INTEREST,
     +                              DEBT_FILE_INVESTMENTS(0),
     +                              NOTES_RECEIVABLE(0),
     +                              NOTES_PAYABLE(0),
     +                              DIVIDEND_70_NONTAXABLE,
     +                              DEBT_FILE_INVESTMENT_INCOME,
     +                              STD_INTEREST_CASH_PAYMENT,
     +                              LTD_INTEREST_CASH_PAYMENTS,
     +                              PS_DIVIDEND_CASH_PAYMENTS,
     +                              BTL_CASH_EARNINGS,
     +                              CURRENT_LTD_RETIREMENTS)
C
                  IF(SALT_RIVER_PROJECT()) THEN ! PASS DECOM RETURN THROUGH INCOME
                     INVESTMENT_INCOME = ST_INVESTMENT_EARNINGS
     +                                  + RETIREMENT_MEDICAL_FUND_RETURN
     +                                  + LT_INVESTMENTS_EARNINGS
     +                                  + NUCL_FUND_RETURN
     +                                  + DEBT_FILE_INVESTMENT_INCOME
     +                                  + Exp_InterestIncome
     +                                  + Exp_Dividends
                     INVESTMENT_INCOME_RECEIVABLE =
     +                                     ST_INVESTMENT_EARNINGS
     +                                     + LT_INVESTMENTS_EARNINGS
     +                                     + DEBT_FILE_INVESTMENT_INCOME
     +                                     + Exp_InterestIncome
     +                                     + Exp_Dividends
                  ELSE
                     INVESTMENT_INCOME = ST_INVESTMENT_EARNINGS
     +                                  + RETIREMENT_MEDICAL_FUND_RETURN
     +                                  + LT_INVESTMENTS_EARNINGS
C    +                                  + NUCL_FUND_RETURN
     +                                  + DEBT_FILE_INVESTMENT_INCOME
     +                                  + Exp_InterestIncome
     +                                  + Exp_Dividends
                     IF(RETAIN_POST_RETIREMENT_EARNINGS()) THEN
                        INVESTMENT_INCOME_RECEIVABLE =
     +                                     ST_INVESTMENT_EARNINGS
     +                                     + LT_INVESTMENTS_EARNINGS
     +                                     + DEBT_FILE_INVESTMENT_INCOME
     +                                     + Exp_InterestIncome
     +                                     + Exp_Dividends
                     ELSE
                        INVESTMENT_INCOME_RECEIVABLE =
     +                                  ST_INVESTMENT_EARNINGS
     +                                  + RETIREMENT_MEDICAL_FUND_RETURN
     +                                  + LT_INVESTMENTS_EARNINGS
     +                                  + DEBT_FILE_INVESTMENT_INCOME
     +                                  + Exp_InterestIncome
     +                                  + Exp_Dividends
                     ENDIF
                  ENDIF
                  IF(ACCURAL_ACCOUNTING_ACTIVE) THEN
                     INTEREST_DIVIDENDS_ACCRUDED = LTDINT(YR,0)        !INTEREST_ON_EXISTING_LTD,
     +                                      - LTD_INTEREST_CASH_PAYMENTS !CASH INTEREST PAYMENTS
     +                                      + PSDIV(YR,0)        ! DEBT_FILE_PREFERRED_DIVIDENDS,
     +                                      - PS_DIVIDEND_CASH_PAYMENTS  ! PS DIVIDEND PAYMENTS
                     CHANGE_INVEST_INCOME_RECIVABLE =
     +                                      INVESTMENT_INCOME_RECEIVABLE ! INVESTMENT_INCOME6/16/04
     +                                      - BTL_CASH_EARNINGS
                     NEW_FINANCING_ACCRUALS = STD_INTEREST
     +                                     - STD_INTEREST_CASH_PAYMENT
                  ELSE   
                     INTEREST_DIVIDENDS_ACCRUDED = 0.
                     CHANGE_INVEST_INCOME_RECIVABLE = 0.
                     NEW_FINANCING_ACCRUALS = 0.
                     LTD_INTEREST_CASH_PAYMENTS = LTDINT(YR,0) !INTEREST_ON_EXISTING_LTD,
                     PS_DIVIDEND_CASH_PAYMENTS = PSDIV(YR,0) ! DEBT_FILE_PREFERRED_DIVIDENDS,
                     BTL_CASH_EARNINGS = INVESTMENT_INCOME_RECEIVABLE ! INVESTMENT_INCOME 6/29/04
                  ENDIF
C
C INTRA COMPANY NOTES 1/19/05 MSG
C
                  CHANGE_INTEREST_DIVS_ACCRUED =
     +                                       INTEREST_DIVIDENDS_ACCRUDED
     +                                       + NEW_FINANCING_ACCRUALS
     +                                       + COMMON_STOCK_DIV_ACCRUALS
C
c                  STD_INTEREST_CASH_PAYMENT = STD_INTEREST
                  TAXABLE_INVESTMENT_INCOME=DEBT_FILE_INVESTMENT_INCOME
     +                                      -.7*DIVIDEND_70_NONTAXABLE !ONLY 30% TAXABLE
                  NOTES_RECEIVABLE_BALANCE = NOTES_RECEIVABLE(0)
                  NOTES_PAYABLE_BALANCE = NOTES_PAYABLE(0)
                  DEBT_FILE_ISSUE_EXPENSE = LTD_PS_ISSUE_TAX_EXPENSE
     +                                      + CS_ISSUE_EXP_THIS_PERIOD
                  LTD_PS_ISSUE_EXPENSES = DEBT_FILE_ISSUE_EXPENSE
                  LTD_PS_RETIREMENTS = LONG_TERM_DEBT_RETIREMENTS
     +                                 + PREFERRED_STOCK_RETIREMENTS
                  FED_INCOME_TAX_DEDUCTIONS = FED_INCOME_TAX_DEDUCTIONS
     +                                        +MIPS_INCOME_TAX_DEDUCTION
     +                                        + LTD_PS_ISSUE_TAX_EXPENSE
     +                                        + CS_ISSUE_EXP_THIS_PERIOD
c                 PS_PREM_AMORT = PS_PREM_AMORT - PS_ISSUING_AMORT
c                 LTD_PREM_AMORT = LTD_PREM_AMORT - LTD_ISSUING_AMORT
                  LTD_PS_DEFERRED_TAX_BASIS = LTD_PS_ISSUE_TAX_EXPENSE
     +                                        + CS_ISSUE_EXP_THIS_PERIOD
     +                                        - LTD_ISSUING_AMORT
     +                                        - PS_ISSUING_AMORT
     +                                        - CS_ISSUE_EXP_AMORT
c                  CLASS_BTL_REVENUES = CLASS_BTL_REVENUES +
c     +                                           OTHER_INCOME_AFILLIATES
                  CLASS_BTL_REVENUES = CLASS_BTL_REVENUES +
     +                                BTL_EMISSION_CREDIT_REVENUE  +
C ADD THEN SUBSTRACTED FOR TAXES AND AT THE END OF THE FINANCING LOOP
     +                                CATAWBA_OTHER_NET_REVENUES +
     +                                OTHER_INCOME_AFILLIATES +
     +                                OTHER_INCOME_NET_OF_TAX
                  CASH_OTH_ASSET = CASH_OTH_ASSET +
     +                             INVESTMENT_IN_AFILLIATES +
     +                             LOANS_TO_AFILLIATES
                  OTHER_ASSETS(2,0) = OTHER_ASSETS(1,0) + CASH_OTH_ASSET
C
                  CALL DEBIT_INFO(ASSET_YR,
     +                            ELIMINAITON_CLASS_ID_NUM,
     +                                DD_CLASS_EXISTS,
     +                                DD_BALANCE,
     +                            DEFERRED_DEBITS_RATE_BASE(2,0),
     +                            AMORTIZATION_EXPENSE,
     +                            NET_DD_BALANCE(2,0),
     +                                DD_CUM_AMORTIZATION,
     +                                DD_CUM_RB_AMORTIZATION,
     +                            INTEREST_AMORTIZATION,
     +                            ATL_AMORTIZATION,
     +                            BTL_AMORTIZATION,
     +                            ATL_DEF_TAXES,
     +                            BTL_DEF_TAXES_CR,
     +                            UNAMORTIZED_INTEREST_BALANCE(2,0),
     +                            DEFERRED_EXPENSE_CASH,
     +                            VARIABLE_OM_AMORT,
     +                            DD_ATL_CURRENT_TAX_EXPENSE,
     +                            DD_BTL_CURRENT_TAX_EXPENSE,
     +                            OTHER_OM_AMORT,
     +                            PURCHASE_POWER_AMORT,
     +                            OTHER_DD_BALANCE(2,0),
     +                            GOODWILL(2,0),
     +                            CLASS_REGULATORY_ASSETS,
     +                            FASB_109,
     +                            FASB_133,
     +                            OTHER_DD_AMORT,
     +                            GOODWILL_AMORT,
     +                            CLASS_REGULATORY_ASSETS_AMORT,
     +                            FASB_109_AMORT,
     +                            FASB_133_AMORT,
     +                            UNAMORTIZED_ISSUE_EXP_BALANCE(2,0),
     +                            DEFERRED_CREDITS_IN_RATE_BASE(2,0),
     +                            OTHER_DEFERRED_CREDITS_BAL(2,0),
     +                            REGULATORY_DEFERRED_CREDITS_BAL(2,0),
     +                            GAIN_ON_REAQUIRED_DEBT_BAL(2,0),
     +                            DEFERRED_GAIN_FROM_SALES(2,0))
                  INTEREST_AMORTIZATION = INTEREST_AMORTIZATION  -
     +                                    LTD_PREM_AMORT + ! CHANGED FORM - 1/23/98
     +                                    LTD_ISSUING_AMORT
                  BTL_AMORTIZATION_IN_EXPENSES =
     +                                   BTL_AMORTIZATION_IN_EXPENSES +
     +                                   BTL_AMORTIZATION
                  AMORTIZATION_EXPENSE = ATL_AMORTIZATION
c    +                                 + BTL_AMORTIZATION
     +                                 + INTEREST_AMORTIZATION
     +                                 + ATL_LEASE_AMORTIZATION
     +                                 + BTL_AMORTIZATION_IN_EXPENSES
     +                                 + PS_PREM_ISSUE_EXP_AMORT
     +                                 + VARIABLE_OM_AMORT
     +                                 + OTHER_OM_AMORT
     +                                 + PURCHASE_POWER_AMORT
     +                                 + FASB143_ARO_INTEREST_ACCREATION
C
                  CALL NUCLEAR_FUEL_INFO(ASSET_YR,
     +                        ELIMINAITON_CLASS_ID_NUM,
     +                          NF_CLASS_EXISTS,
     +                          NF_CASH,
     +                        NF_IN_PROCESS(2,0),
     +                          NF_ENTERING_SERVICE,
     +                        NFIS(2,0),
     +                        CLASS_NET_NF_VALUE(2,0),
     +                        NUC_FUEL_RATE_BASE(2,0),
     +                          NF_AFUDC_ON_CASH,
     +                          NF_AFUDC_CAPITIALIZED,
     +                          NF_CURRENT_TAX_EXPENSE,
     +                          NF_DEFERRED_DEBIT_BALANCE,
     +                        DEFERRED_DEBITS_RATE_BASE(2,0),
     +                        NF_ATL_AMORTIZATION,
     +                          NF_EXTRAORDINARY_EXPENSE,
     +                          NAFEXP,
     +                          NF_CLASS_ADJAFC,
     +                          NWODFT,
     +                          NAFDCB,
     +                          NAFDCD,
     +                          CLASS_LEASED_NFCE,
     +                        NF_CAPITIALIZED_INTEREST,
     +                        NF_TAX_DEPRECIATION,
     +                        NF_SL_TAX_DEPRECIATION,
     +                        LEASOR_DEFERRED_TAX_BASIS,
     +                        LEASOR_NF_AMORTIZATION,
     +                        LEASOR_NF_SL_TAX_DEP,
     +                        LEASOR_NF_TAX_DEP)
                  ATL_AMORTIZATION = ATL_AMORTIZATION +
     +                                               NF_ATL_AMORTIZATION
                  CAPITIALIZED_INTEREST = CAPITIALIZED_INTEREST +
     +                                          NF_CAPITIALIZED_INTEREST
                  NF_ENTERING_SERVICE = NF_ENTERING_SERVICE +
     +                                             NF_AFUDC_CAPITIALIZED
C
                  CALL FUTURE_ASSET_INFO(ASSET_YR,
     +                        ELIMINAITON_CLASS_ID_NUM,
     +                        FA_CLASS_EXISTS,
     +                        CLASS_GPV(2,0),
     +                          FA_CUMULATIVE_BOOK_DEP,
     +                          FA_CASH,
     +                          FA_CAPITIALIZED,
     +                        INCOME_TAX_DEPRECIATION,
     +                        BOOK_DEPRECIATION,
     +                          FA_AFDC_CASH,
     +                          FA_AFDC_CAPITIALIZED,
     +                        CLASS_CWIP(2,0),
     +                        CWIP_IN_RATE_BASE(2,0),
     +                          FA_CURRENT_TAX_EXPENSES,
     +                        CAPITIALIZED_INTEREST,
     +                          FA_PROPERTY_TAX_GPV,
     +                          FA_PROPERTY_TAX_NPV,
     +                        ATL_AMORTIZATION,
     +                          FA_EXTRAORDINARY_EXPENSE,
     +                          FA_NET_DEFERRED_DEBIT_BAL,
     +                        DEFERRED_DEBITS_RATE_BASE(2,0),
     +                        DEFERRED_TAX_BASIS, ! TTXDEF
     +                          FA_SL_TAX_DEP, ! TBKDPT(I)
     +                        TAX_PREFERENCE_DEPRECIATION, ! TTXPREFDEP(I)
     +                        ACE_TAX_DEPRECIATION, ! TOTAL_ACE_BOOK_DEP(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_BOOK_DEP, ! TBKDPA(I) write-off adjustment to cumulative book depreciaton
     +                          FA_WO_ADJUSTMENT_2_CUM_AFDC_DEP, ! TAFDPA(I) write_off adj to cumulative afdc dep.
     +                          FA_AFDC_BORROWED, ! TAFDCB(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_AFDC, ! TAFCAJ(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_AFEXP,  ! TAFEXP(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_DEF_TAX, ! TWODFT(I)
     +                          FA_WO_ADJUSTMENT_2_CUM_AFDCF,  ! TAFDCF(I)
     +                          FA_ITC_CREDIT)  
C
                  VOID_LOGICAL = RETURN_CL_INTRA_EXPENSES(FUEL_EXPENSE,
     +                                     LEASED_NF_BURN,
     +                                     OWNED_NF_BURN,
     +                                     CL_MARKET_PURCHASES, ! PURCHASE_POWER_EXPENSE,
     +                                     NUC_FUEL_OWNED_BURN,
     +                                     NUC_FUEL_LEASED_BURN)
C
C DSM INFORMATION
C
            CALL DSM_EXPENSE_INFO(ELIMINAITON_CLASS_ID_NUM,
     +                                     DSM_EXPENSE_CLASS_EXISTS,
     +                                     DSM_EXPENSE,
     +                                     DSM_REBATE,
     +                                     OTHER_PURCHASE_POWER_EXPENSE, ! PURCHASE_POWER_EXPENSE,
     +                                     SECONDARY_SALES_REVENUES,
     +                                     CLASS_BTL_EXPENSES,
     +                                     CLASS_BTL_REVENUES,
     +                                     DSM_ADJ_CLAUSE_COLLECTIONS,
     +                                     DSM_CAPITIAL,
     +                                     DSM_CAPACITY,
     +                                     DSM_ENERGY,
     +                                     DSM_PARTICIPANT_COSTS,
     +                                     DSM_UTIL_NON_ELEC_COSTS,
     +                                     DSM_THIRD_PARTY_COSTS,
     +                                     DSM_OTH_PARTICIPANT_COSTS)
C
            CALL DSM_ASSET_INFO(YR,
     +                     ELIMINAITON_CLASS_ID_NUM,
     +                       DSM_ASSET_CLASS_EXISTS,
     +                     BOOK_DEPRECIATION,
     +                       DSM_CUM_BOOK_DEP,
     +                       CLASS_GPV(2,0),
     +                       DSM_AFUDC,
     +                       INCOME_TAX_DEPRECIATION,
     +                       DSM_TAX_EXPENSE,
     +                     ATL_AMORTIZATION,
     +                       DSM_DEFERRED_DEBIT,
     +                       DEFERRED_TAX_BASIS,
     +                       DSM_TAX_PREF_DEP,
     +                       RB_DSM_AMORT,
     +                       RB_DSM_DEFERRED_TAX_BASIS,
     +                       RB_DSM_AFUDC,
     +                       RB_DSM_TAX_EXPENSE,
     +                       DSM_REGULATED_BOOK_DEP,
     +                       DSM_REGULATED_TAX_DEP,
     +                       DSM_REGULATED_DEFERRED_DEBIT,
     +                       DSM_REGULATED_NPV,
     +                       DSM_GPV_PROPERTY_TAX,
     +                       DSM_NPV_PROPERTY_TAX,
     +                       DSM_SL_TAX_DEP)
C
C ELIMINATION CLASS ADJUSTMENTS FOR CONSOLIDATING 11/21/02
C
            GROSS_VALUE_OF_SOLD_ASSETS = 0.
            CUMULATIVE_DEP_ON_SOLD_ASSETS = 0.
            ATL_AMORT_OF_BOOK = 0.
            BTL_AMORT_OF_BOOK = 0.
            DEFERRED_TAX_ADJUSTMENT = 0.
            RETAINED_EARNINGS_ADJ = 0.
            EXTRA_ORDINARY_EXPENSE = 0.
            LT_LIAB_BAL_ADJ = 0.
            CWIP_BALANCE_ADJ = 0.
            ADJ_DEFERRED_TAX_DR_BALANCE = 0.
            CALL RETURN_TRANSFER_ADDENDUMS(YR,ELIMINAITON_CLASS_ID_NUM,
     +                                GROSS_VALUE_OF_SOLD_ASSETS,
     +                                CUMULATIVE_DEP_ON_SOLD_ASSETS,
     +                                ADJUSTMENT_2_DEFERRED_TAXES_BAL,
     +                                DEFERRED_DEBIT_ADJUSTMENT,
     +                                NET_DEFERRED_DEBIT_ADJUSTMENT,
     +                                ATL_AMORT_OF_BOOK,
     +                                BTL_AMORT_OF_BOOK,
     +                                DEFERRED_TAX_ADJUSTMENT,
     +                                ADJUSTMENT_2_DEFERRED_ITCS_BAL,
     +                                NET_NUCLEAR_FUEL_ADJ(0),
     +                                RETAINED_EARNINGS_ADJ,
     +                                EXTRA_ORDINARY_EXPENSE,
     +                                LT_LIAB_BAL_ADJ,
     +                                CWIP_BALANCE_ADJ,
     +                                ADJ_DEFERRED_TAX_DR_BALANCE,
     +                                PAID_IN_CAPITAL,
     +                                SUBSIDIARY_INVESTMENT_ADJ,
     +                                GOODWILL_ADJUSTMENT,
     +                                REG_ASSESTS_ADJUSTMENT,
     +                                FASB109_ADJUSTMENT,
     +                                FASB133_ADJUSTMENT,
     +                                UNAMORT_INTEREST_ADJUSTMENT,
     +                                NUCLEAR_DECOM_FUND_BAL_ADJ,
     +                                CAP_LEASES_BAL_ADJ,
     +                                ASSETS_NEC_BAL_ADJ,
     +                                PREFERRED_STOCK_BAL_ADJ,
     +                                LTD_BAL_ADJ,
     +                                STD_BAL_ADJ,
     +                                NUC_DECOM_LIAB_BAL_ADJ,
     +                                LIABS_NEC_BAL_ADJ,
     +                                OTHER_INVESTMENT_BAL_ADJ,
     +                                NOTES_RECEIVABLE_BAL_ADJ,
     +                                POST_RETIRE_MEDICAL_BAL_ADJ,
     +                                DEFERRED_REVENUES_BAL_ADJ,
     +                                DEFERRED_FUEL_BAL_ADJ,
     +                                DEFERRED_PURCH_GAS_BAL_ADJ,
     +                                LT_INVEST_BAL_ADJ,
     +                                ST_INVEST_BAL_ADJ,
     +                                FUEL_INVENTORY_BAL_ADJ,
     +                                GAS_IN_STORAGE_BAL_ADJ,
     +                                MATRIAL_SUPPLY_BAL_ADJ,
     +                                ACCOUNTS_RECV_BAL_ADJ,
     +                                UNBILLED_REV_BAL_ADJ,
     +                                TAXES_RECEIVABLE_BAL_ADJ,
     +                                CURRENT_LT_DEBT_BAL_ADJ,
     +                                NOTES_PAYABLE_BAL_ADJ,
     +                                CUSTOMER_DEPOSIT_BAL_ADJ,
     +                                CICA_BAL_ADJ,
     +                                POST_RETIRE_PAYABLE_BAL_ADJ,
     +                                ACCRUED_PENSION_BAL_ADJ,
     +                                DEFERRED_GAINS_BAL_ADJ,
     +                                storm_RESERVE_BAL_ADJ,
     +                                ACCOUNTS_PAYABLE_BAL_ADJ,
     +                                ARO_NET_ASSETS_BAL_ADJ,
     +                                ARO_LIABILITY_BAL_ADJ,
     +                                DEFERRED_PURCHASE_POWER_ADJ,
     +                                COI_EARNINGS_ADJ)

C
C FASB 87 ACCOUNTING FOR IPL
C
                  CALL MONTHLY_FASB87_CALCULATIONS(
     +                            ELIMINAITON_CLASS_ID_NUM,
     +                            YR,
     +                            OTHER_COMPREHENSIVE_INCOME_BALANCE(0),  ! 730
     +                            FASB_87_INTANGIBLE_ASSETS(0),
     +                            PENSION_LIABILITY(2,0),
     +                            FASB_87_DEFERRED_TAX_ADJ_DR,
     +                            NORMALIZATION_TAX_RATE)
C
C END ROUTINE CALLS
C
C
                  PURCHASE_POWER_EXPENSE = OTHER_PURCHASE_POWER_EXPENSE
     +                                + CL_MARKET_PURCHASES
     +                                + AFILIATE_PURCHASE_POWER_EXPENSE
     +                                + WVPA_NON_MEMBER_COST_OF_POWER
     +                                + WVPA_MEMBER_COST_OF_POWER
     +                                + ODEC_NA3_PURCHASE_EXPENSE
                  FE_EXP_PURCHASE_POWER_EXPENSE =
     +                                      OTHER_PURCHASE_POWER_EXPENSE
                  OTHER_PURCHASE_POWER_EXPENSE =
     +                                 OTHER_PURCHASE_POWER_EXPENSE
     +                                 + AFILIATE_PURCHASE_POWER_EXPENSE
     +                                 + ODEC_NA3_PURCHASE_EXPENSE
                  AFUDC = FA_AFDC_CASH + NF_AFUDC_ON_CASH +
     +                                      AI_AFUDC_ON_CASH + DSM_AFUDC
                  AFUDC_EQUITY = (1.-CLASS_BORROWED_AFUDC_RATE) *
     +                           (AFUDC - FA_AFDC_CASH) +
     +                                   FA_AFDC_CASH - FA_AFDC_BORROWED
                  AFUDC_BORROWED = AFUDC - AFUDC_EQUITY
                  SL_TAX_DEPRECIATION = EA_TAX_BOOK_DEP + FA_SL_TAX_DEP+
     +                             LEASOR_NF_SL_TAX_DEP + DSM_SL_TAX_DEP
C                 BASE_RATES_REVENUES = BASE_RATES_REVENUES  
C    +                                           + INTRA_COMPANY_REVENUE
                  REFERENCE_BASE_REVENUES = BASE_RATES_REVENUES
                  IF(ODEC()) THEN
                     ODEC_TIER_RETURN_ON_INTRAINTEREST =
     +                    (MIN_COV_RATIO -1.) * (LTDINT(YR,0)
     +                                           + INTEREST_AMORTIZATION
     +                                           + STD_INTEREST)
     +                    - ODEC_NA3_TIER_RETURN
                     REGULATED_REVENUES_12 = REGULATED_REVENUES_12
     +                               + ODEC_TIER_RETURN_ON_INTRAINTEREST
                     ST_INVEST_BAL_ADJ = ST_INVEST_BAL_ADJ 
     +                               + ODEC_TIER_RETURN_ON_INTRAINTEREST
                     IF(ODEC_NA3_ACTIVE) THEN
                        BULK_POWER_REVENUES = BULK_POWER_REVENUES
     +                                       + ODEC_NA3_PURCHASE_EXPENSE
                     ENDIF
                  ENDIF
                  TOTAL_BASE_RATES_REVENUES = BASE_RATES_REVENUES
     +                                    + UNBILLED_REVENUES
     +                                    + RESIDENTIAL_REVENUES
     +                                    + COMMERCIAL_REVENUES
     +                                    + INDUSTRIAL_REVENUES
     +                                    + LIGHTING_REVENUES
     +                                    + GOVERNMENT_SALES_REVENUE
     +                                    + CAPTURED_OPT_METHOD_REVENUES
     +                                    + WVPA_MEMBER_ACCRUED_REVENUES
     +                                    + REGULATED_REVENUES_11
     +                                    + REGULATED_REVENUES_12
     +                                    + REGULATED_REVENUES_13
     +                                    + REGULATED_REVENUES_14
     +                                    + REGULATED_REVENUES_15
C
C 10/9/96 OPERATING METHOD MAY NEED TO BE ADJUSTED HERE
C
                  NON_BASE_REVENUES = ADJUSTMENT_CLAUSE_REVENUES
     +                                + CLASS_GAS_ADJ_CLAUSE_REVENUE
     +                                + SECONDARY_SALES_REVENUES
     +                                + CATAWBA_REVENUES
     +                                + OTHER_REVENUE(2,0)
     +                                + GAS_REVENUES
     +                                + RELATIONSHIP_REVENUES
     +                                + BULK_POWER_REVENUES
     +                                + CAPACITY_SALES_REVENUE
     +                                + INC_CAPACITY_SALES_TO_LEVEL_RM ! 726
     +                                + TOTAL_DERIVATIVE_REVENUE
     +                                + TOTAL_FUEL_DERIV_REVENUES
     +                                + COMPETITIVE_SALES_REVENUE
     +                                + UTILITY_SALES_REVENUE
     +                                + ICAP_REVENUES
     +                                + FE_Competitive_Unit_Sales
     +                                + NON_REG_REVENUES_10
     +                                + NON_REG_REVENUES_11
     +                                + NON_REG_REVENUES_12
     +                                + NON_REG_REVENUES_13
     +                                + NON_REG_REVENUES_14
     +                                + NON_REG_REVENUES_15
c     +                                + FE_Intra_Company_Utility_Sales
                  OPERATING_REVENUES(2,0) = TOTAL_BASE_RATES_REVENUES
     +                                      + NON_BASE_REVENUES
C                  NON_BASE_REVENUES = OPERATING_REVENUES(2,0)
C     +                                - TOTAL_BASE_RATES_REVENUES
                  GAV_OTHER_OPT_REVENUES = OPERATING_REVENUES(2,0) -
     +                                     CAPACITY_SALES_REVENUE -
     +                                     SECONDARY_SALES_REVENUES
C
                  CLASS_NUCLEAR_FUEL_EXPENSE = OWNED_NF_BURN +
     +                                         LEASED_NF_BURN +
     +                                         LEASOR_NF_AMORTIZATION +
     +                                         DOE_NUC_FUEL_FEE +
     +                                         NUC_DECOMMISSIONING_COST
                  NUC_FUEL_TOTAL_BURN = NUC_FUEL_OWNED_BURN +
     +                                  NUC_FUEL_LEASED_BURN +
     +                                  LEASOR_NF_AMORTIZATION
                  NF_NON_CASH_EXPENSE = NUC_FUEL_OWNED_BURN +
     +                                  LEASOR_NF_AMORTIZATION +
     +                                  BTL_NUC_FUEL_DECOM_LIABILITY +
     +                                  NUC_DECOMMISSIONING_COST
                  NF_CASH_EXPENSE = LEASED_NF_BURN + DOE_NUC_FUEL_FEE +           
     +                              OWNED_NF_BURN - NUC_FUEL_OWNED_BURN
                  OWNED_NF_BURN = LEASOR_NF_AMORTIZATION + OWNED_NF_BURN
C
                  CUMULATIVE_NUCLEAR_BURN(0) =
     +                                      CUMULATIVE_NUCLEAR_BURN(0) +
     +                                      NUC_FUEL_TOTAL_BURN  ! CLASS_NUCLEAR_FUEL_EXPENSE
                  CLASS_NET_NF_VALUE(2,0) = CLASS_NET_NF_VALUE(2,0) -
     +                                      CUMULATIVE_NUCLEAR_BURN(0)
                  TRANS_NUKE_FUEL_BAL = 0. ! NET_NUCLEAR_FUEL_ADJ(CLASS_POS)
                  NUC_FUEL_RATE_BASE(2,0) = NUC_FUEL_RATE_BASE(2,0) -
     +                                      CUMULATIVE_NUCLEAR_BURN(0)
C
C CONSOLIDATION CALCULATION ADJUSTMENTS
C
C                  CUMULATIVE_BOOK_DEP_ADJUSTMENTS(0) = +
C     +                      CUMULATIVE_BOOK_DEP_ADJUSTMENTS(0) +
C     +                      SALVAGE_TRANSACTIONS -
C     +                      CUMULATIVE_DEP_ON_SOLD_ASSETS -
C     +                      FA_WO_ADJUSTMENT_2_CUM_BOOK_DEP
                  CLASS_CUMULATIVE_DEPRECIATION(2,0) =
     +                              CLASS_CUMULATIVE_DEPRECIATION(2,0) +
C    +                        FA_CUMULATIVE_BOOK_DEP +DSM_CUM_BOOK_DEP +
     +                              CUMULATIVE_BOOK_DEP_ADJUSTMENTS(0)
C
C END CONSOLIDATION CALCULATION ADJUSTMENTS
C
                  EXCLUDE_STATE_TAXES = 0.
                  CALL SUM_CASH_EXPENSES(TOTAL_CASH_EXPENSES)
C
                  IF(USE_BURN_4_NUC_FUEL_TAX_EXP) THEN
                     NF_TAX_EXPENSE = LEASED_NF_BURN 
     +                                + OWNED_NF_BURN
     +                                + DOE_NUC_FUEL_FEE
                     NF_TAX_DEPRECIATION = LEASOR_NF_TAX_DEP
                     NF_DEFERRED_TAX_BASIS = LEASOR_DEFERRED_TAX_BASIS
                  ELSE   
                     NF_TAX_EXPENSE = LEASED_NF_BURN
     +                                + OWNED_NF_BURN
     +                                - NUC_FUEL_OWNED_BURN
     +                                + DOE_NUC_FUEL_FEE
                     NF_DEFERRED_TAX_BASIS = NF_TAX_DEPRECIATION
     +                                       - OWNED_NF_BURN
     +                                       + LEASOR_DEFERRED_TAX_BASIS
                     NF_TAX_DEPRECIATION = NF_TAX_DEPRECIATION 
     +                                     + LEASOR_NF_TAX_DEP
                  ENDIF
                  INCOME_TAX_DEPRECIATION = INCOME_TAX_DEPRECIATION
     +                                      + NF_TAX_DEPRECIATION
C NON-CASH EXPENSES
                  ATL_AMORTIZATION = ATL_AMORTIZATION
     +                                + PARM_AMORTIZATION_ADJUSTMENT
     +                                + DEFERRED_EXPENSE_AMORT
     +                                + AMORT_DEF_REVENUES
     +                                - CIAC_AMORTIZATION
     +                                - ATL_AMORT_OF_BOOK
     +                                + FASB143_ARO_INTEREST_ACCREATION
                  TOTAL_NON_CASH_EXPENSES = BOOK_DEPRECIATION
     +                                 + ATL_AMORTIZATION
     +                                 + NF_NON_CASH_EXPENSE
     +                                 - BTL_NUC_FUEL_DECOM_LIABILITY
     +                                 - CATAWBA_LEVEL_CAP_PAYMENTS
     +                                 + ATL_LEASE_AMORTIZATION
     +                                 + VARIABLE_OM_AMORT
     +                                 + OTHER_OM_AMORT
     +                                 + PURCHASE_POWER_AMORT
     +                                 + DEFERRED_FUEL_EXPENSE
     +                                 + EXPENSING_MATRIALS_INVENTORY
     +                                 + EXPENSING_GAS_INVENTORY
     +                                 + EXPENSING_FUEL_INVENTORY
     +                                 + VACATION_PAY_NON_CASH
     +                                 + PENSION_EXPENSE_NON_CASH
     +                                 + STORM_EXPENSE_NON_CASH
     +                                 + ExecBenefitsNonCash
     +                                 + IncentiveCompensationNonCash
                  TOTAL_EXPENSES_B4_TAXES = TOTAL_CASH_EXPENSES
     +                                      + TOTAL_NON_CASH_EXPENSES
                  AMORTIZATION_B4_CAP_SERVICE = ATL_AMORTIZATION
     +                                 + ATL_LEASE_AMORTIZATION
     +                                 + BTL_AMORTIZATION_IN_EXPENSES
     +                                 + VARIABLE_OM_AMORT
     +                                 + OTHER_OM_AMORT
     +                                 + PURCHASE_POWER_AMORT
     +                                 + EXPENSING_MATRIALS_INVENTORY
     +                                 + EXPENSING_GAS_INVENTORY
     +                                 + EXPENSING_FUEL_INVENTORY
                  FEDERAL_NOL_GENERATED = CONSOLIDATED_FED_NOL_GEN
                  FEDERAL_NOLS_USED = CONSOLIDATED_FED_NOL_USED                                    
                  FED_CREDITS_USED = SUBSIDARY_VARIABLES(341)
     +                               - CONSOLIDATED_FED_CREDITS_USED
                  ATL_CONSOLIDATED_FEDERAL_TAXES =
     +                                   CONSOLIDATED_FEDERAL_TAXES
     +                                   - SUB_TOTAL_BTL_FEDERAL_TAXES
     +                                   - PARENT_BTL_FEDERAL_TAX
     +                                   + SUB_TOTAL_BTL_INTRA_FED_TAXES
     +                                   + PARENT_BTL_INTRA_FED_TAXES

                  BTL_CONSOLIDATED_FEDERAL_TAXES =
     +                                    CONSOLIDATED_FEDERAL_TAXES -
     +                                    ATL_CONSOLIDATED_FEDERAL_TAXES
                  BTL_FEDERAL_TAXES = BTL_FEDERAL_TAXES
     +                                + SUB_TOTAL_BTL_INTRA_FED_TAXES
     +                                + PARENT_BTL_INTRA_FED_TAXES
                  BTL_FEDERAL_TAXES = SUB_TOTAL_BTL_FEDERAL_TAXES
     +                                + PARENT_BTL_FEDERAL_TAX
     +                                - BTL_CONSOLIDATED_FEDERAL_TAXES
                  ATL_FEDERAL_TAXES = PARENT_ATL_FEDERAL_TAX
     +                                + SUB_TOTAL_ATL_FEDERAL_TAXES
     +                                - ATL_CONSOLIDATED_FEDERAL_TAXES
                  ATL_STATE_TAXES = EXCLUDE_STATE_TAXES
     +                              - CONSOLIDATED_STATE_TAX_ADJ !-SUBSIDARY_VARIABLES(134) + ! ADJ_2_STATE_TAXES
     +                              - SUB_TOTAL_BTL_INTRA_STATE_TAXES
     +                              - PARENT_BTL_INTRA_STATE_TAXES
                  BTL_STATE_TAXES = SUB_TOTAL_BTL_INTRA_STATE_TAXES
     +                              + PARENT_BTL_INTRA_STATE_TAXES
                  BTL_INCOME_TAXES = BTL_STATE_TAXES + BTL_FEDERAL_TAXES
                  DEFERRED_TAXES_DR = CON_FED_DEFERRED_TAX_DR_ADJ
                  FED_DEFERRED_TAXES_FROM_NOL =
     +                                       CON_FED_DEFERRED_TAX_DR_ADJ
                  TOTAL_EXPENSE_AND_TAXES = TOTAL_EXPENSES_B4_TAXES
     +                                      + ATL_STATE_TAXES
     +                                      + ATL_FEDERAL_TAXES
     +                                      + DEFERRED_TAXES_DR ! EXCLUDE_TAX_DEFERRALS_DR +
     +                                      + EXCLUDE_TAX_DEFERRALS_CR
     +                                      + EXCLUDE_ITC
     +                                      + CLASS_PROPERTY_TAXES
     +                                      + OTHER_TAXES
     +                                      + OPERATING_REVENUE_TAX
     +                                      + Payroll_Taxes
                  OPERATING_INCOME = OPERATING_REVENUES(2,0) -
     +                               TOTAL_EXPENSE_AND_TAXES
                  BTL_INCOME_TAXES=BTL_INCOME_TAXES + EXCLUDE_BTL_TAXES
                  INCOME_B4_INTEREST = OPERATING_INCOME
     +                                 + DEFERRED_REVENUES
     +                                 + CLASS_BTL_REVENUES
     +                                 + INVESTMENT_INCOME
     +                                 + Mark_to_Market
     +                                 + FE_NonCashEarningsNonCorp
     +                                 - CLASS_BTL_EXPENSES
c    +                                 - BTL_NUC_FUEL_DECOM_LIABILITY
     +                                 - BTL_DEF_TAXES_CR
     +                                 - BTL_DEFERRED_TAXES_DR
     +                                 - BTL_INCOME_TAXES
     +                                 + AFUDC_EQUITY
     +                                 - BTL_AMORTIZATION_IN_EXPENSES
C    +                                 + CATAWBA_OTHER_NET_REVENUES
                  INTEREST_ON_SHORT_TERM_DEBT(2,0) = STD_INTEREST
                  INTEREST_ON_LONG_TERM_DEBT = LTDINT(YR,0)
                  LTD_INTEREST_AND_AMORTIZATION =
     +                                      INTEREST_ON_LONG_TERM_DEBT +
     +                                      INTEREST_AMORTIZATION
                  INCOME_AFTER_INTEREST = INCOME_B4_INTEREST -
     +                                    INTEREST_ON_LONG_TERM_DEBT -
     +                                    INTEREST_AMORTIZATION -
     +                                    STD_INTEREST +
     +                                    AFUDC_BORROWED
                  SUBSIDIARY_INCOME = SUBSIDIARY_INCOME
     +                                + EXCLUDE_SUB_INCOME
                  NET_OF_TAX_EXEXP = FA_EXTRAORDINARY_EXPENSE +
     +                               NF_EXTRAORDINARY_EXPENSE -
     +                               BTL_AMORT_OF_BOOK  
c    +                             + BTL_AMORTIZATION
                  NET_PROFIT_OR_LOSS = INCOME_AFTER_INTEREST +
     +                                 SUBSIDIARY_INCOME -
     +                                 NET_OF_TAX_EXEXP
                  PREFERRED_DIVIDENDS = PSDIV(YR,0)
                  PS_DIVIDEND_PLUS_AMORT = PSDIV(YR,0) +
     +                                   PS_PREM_ISSUE_EXP_AMORT
                  EARNINGS_AVAILABLE_TO_COMMON = NET_PROFIT_OR_LOSS -
     +                                           PREFERRED_DIVIDENDS -
     +                                           PS_PREM_ISSUE_EXP_AMORT
                  RETAINED_EARNINGS = EARNINGS_AVAILABLE_TO_COMMON -
     +                                          EXCLUDE_COMMON_DIVIDENDS
                  VARIABLE_EXPENSE_PLUS_AMORT = VARIABLE_EXPENSE
     +                                          + VARIABLE_OM_AMORT
                  OTHER_OM_EXPENSE_PLUS_AMORT = OTHER_EXPENSE_1
     +                                          + OTHER_OM_AMORT
                  PUR_POWER_EXPENSE_PLUS_AMORT = PURCHASE_POWER_EXPENSE
     +                                           + PURCHASE_POWER_AMORT
                  FUEL_EXPENSE_PLUS_AMORT = FUEL_EXPENSE
     +                                + EXPENSING_FUEL_INVENTORY
                  PURCHASE_GAS_EXPENSE_PLUS_AMORT = PURCHASED_GAS
     +                                        + EXPENSING_GAS_INVENTORY
C
                  IF(CREDITS_ARE_IN_INCOME_STATEMENT) THEN
                     UNUSED_FEDERAL_TAX_CREDITS =
     +                                    CONSOLD_AVAIL_FED_TAX_CREDIT -
     +                                    CONSOLIDATED_FED_CREDITS_USED
                     NET_PROFIT_OR_LOSS = NET_PROFIT_OR_LOSS -
     +                                    UNUSED_FEDERAL_TAX_CREDITS
                     EARNINGS_AVAILABLE_TO_COMMON =
     +                                   EARNINGS_AVAILABLE_TO_COMMON -
     +                                   UNUSED_FEDERAL_TAX_CREDITS
                     RETAINED_EARNINGS = RETAINED_EARNINGS -
     +                                   UNUSED_FEDERAL_TAX_CREDITS
                     UNUSED_CONSOLD_TAX_CREDITS =
     +                                       -UNUSED_FEDERAL_TAX_CREDITS
                     YEAR_END_UNUSED_CREDIT_BAL = 
     +                                      YEAR_END_UNUSED_CREDIT_BAL
     +                                      + UNUSED_CONSOLD_TAX_CREDITS
                  ELSE
                     UNUSED_FEDERAL_TAX_CREDITS = 0.
                  ENDIF
C
C
                  DEFERRED_PURCHASE_POWER(2,0) =
     +                                     DEFERRED_PURCHASE_POWER(2,0)
     +                                     + DEFERRED_PURCHASE_POWER_ADJ
                  CLASS_DEFERRED_PURCHASE_GAS(0) =
     +                                    CLASS_DEFERRED_PURCHASE_GAS(0)
     +                                    + DEFERRED_PURCH_GAS_BAL_ADJ

                  CUM_DEF_REVENUES(2,0) = CUM_DEF_REVENUES(2,0)
     +                                    + DEFERRED_REVENUES_BAL_ADJ
                  DEFERRED_FUEL_BALANCE(0) = DEFERRED_FUEL_BALANCE(0) ! VARIABLE(392)
     +                                       + DEFERRED_FUEL_BAL_ADJ

                  FASB143_NET_ASSET_VALUE(2,0) =
     +                                      FASB143_NET_ASSET_VALUE(2,0)
     +                                      + ARO_NET_ASSETS_BAL_ADJ
                  FASB143_LT_LIABILITY_VALUE(2,0) =
     +                                   FASB143_LT_LIABILITY_VALUE(2,0)
     +                                   + ARO_LIABILITY_BAL_ADJ
                  CLASS_GPV(2,0) = CLASS_GPV(2,0)
     +                             + GROSS_VALUE_OF_SOLD_ASSETS ! REUSED VARIABLE
                  CLASS_CWIP(2,0) = CLASS_CWIP(2,0)
     +                              + CWIP_BALANCE_ADJ
                  CLASS_CUMULATIVE_DEPRECIATION(2,0) =
     +                                CLASS_CUMULATIVE_DEPRECIATION(2,0)
     +                                + CUMULATIVE_DEP_ON_SOLD_ASSETS
                  NUC_DECOM_FUND_BAL(2,0) = NUC_DECOM_FUND_BAL(2,0)
     +                                   + NET_NUCLEAR_FUEL_ADJ(0)
     +                                   + NUCLEAR_DECOM_FUND_BAL_ADJ
                  OTHER_ASSETS(2,0) = OTHER_ASSETS(2,0)
     +                                + OTHER_INVESTMENT_BAL_ADJ
                  CAPITIALZIED_LEASES(2,0) = CAPITIALZIED_LEASES(2,0)
     +                                       + CAP_LEASES_BAL_ADJ
                  CUMTXNORM(2,0) = CUMTXNORM(2,0)
     +                             + ADJ_DEFERRED_TAX_DR_BALANCE
                  CUM_DEF_REVENUES(2,0) = CUM_DEF_REVENUES(2,0)
     +                                    + DEFERRED_REVENUES_BAL_ADJ
                  LIQUID_INVESTMENTS(2,0) = LIQUID_INVESTMENTS(2,0)
     +                                      + ST_INVEST_BAL_ADJ
                  LONG_TERM_INVESTMENTS(0) = LONG_TERM_INVESTMENTS(0)
     +                                       + LT_INVEST_BAL_ADJ
                  ACCOUNTS_RECEIVABLE(0) = ACCOUNTS_RECEIVABLE(0)
     +                                     + ACCOUNTS_RECV_BAL_ADJ
                  FUEL_INVENTORY(0) = FUEL_INVENTORY(0)
     +                                + FUEL_INVENTORY_BAL_ADJ
                  POST_RETIREMENT_MEDICAL_FUND(0) =
     +                                   POST_RETIREMENT_MEDICAL_FUND(0)
     +                                   + POST_RETIRE_MEDICAL_BAL_ADJ
                  NOTES_RECEIVABLE(0) = NOTES_RECEIVABLE(0)
     +                                  + NOTES_RECEIVABLE_BAL_ADJ
                  CLASS_MATERIALS_N_SUPPLIES(0) =
     +                                     CLASS_MATERIALS_N_SUPPLIES(0)
     +                                     + MATRIAL_SUPPLY_BAL_ADJ
                  CLASS_GAS_STORAGE(0) = CLASS_GAS_STORAGE(0)
     +                                   + GAS_IN_STORAGE_BAL_ADJ
                  GOODWILL(2,0) = GOODWILL(2,0) + GOODWILL_ADJUSTMENT
                  FASB_133 = FASB_133 + FASB133_ADJUSTMENT
                  FASB_109 = FASB_109 + FASB109_ADJUSTMENT
                  CUM_REG_ASSET_ADJ_AT(0) = REG_ASSESTS_ADJUSTMENT
     +                                      + CUM_REG_ASSET_ADJ_AT(0)
                  CLASS_REGULATORY_ASSETS = CLASS_REGULATORY_ASSETS
     +                                      + CUM_REG_ASSET_ADJ_AT(0)
c                  CLASS_REGULATORY_ASSETS = REG_ASSESTS_ADJUSTMENT
                  OTHER_DD_BALANCE(2,0) = OTHER_DD_BALANCE(2,0)
     +                                    + DEFERRED_DEBIT_ADJUSTMENT
                  NET_DD_BALANCE(2,0) = NET_DD_BALANCE(2,0)
     +                                  + CLASS_REGULATORY_ASSETS
     +                                  + FASB_133 ! FASB133_ADJUSTMENT
     +                                  + FASB_109 ! FASB109_ADJUSTMENT
     +                                  + GOODWILL(2,0) ! GOODWILL_ADJUSTMENT
     +                                  + OTHER_DD_BALANCE(2,0) ! DEFERRED_DEBIT_ADJUSTMENT
                  INVESTMENT_IN_SUBSIDIARIES(2,0) =
     +                           INVESTMENT_IN_SUBSIDIARIES(2,0)
     +                           + SUBSIDIARY_INVESTMENT_ADJ
                  TOTAL_CAPITAL_SERVICE = STD_INTEREST_CASH_PAYMENT
     +                                    + INTEREST_ON_LONG_TERM_DEBT
     +                                    + PREFERRED_DIVIDENDS
     +                                    + EXCLUDE_COMMON_DIVIDENDS
                  PREFERRED_STOCK(2,0) = PREFERRED_STOCK(1,0)
     +                                   + PREFERRED_STOCK_ISSUED
     +                                   - PREFERRED_STOCK_RETIREMENTS
     +                                   + SBU_PS_ELIM
     +                                   - PS_PREM_AMORT
     +                                   + PREFERRED_STOCK_BAL_ADJ
                  LONG_TERM_DEBT(2,0) = LONG_TERM_DEBT(1,0)
     +                                  + LONG_TERM_DEBT_ISSUED
     +                                  - LONG_TERM_DEBT_RETIREMENTS
     +                                  + SBU_LTD_ELIM
     +                                  - LTD_PREM_AMORT
     +                                  + LTD_BAL_ADJ
                  NET_UTILITY_PLANT(2,0) = CLASS_GPV(2,0)
     +                              + CLASS_CWIP(2,0)
     +                              - CLASS_CUMULATIVE_DEPRECIATION(2,0)
     +                              + CLASS_NET_NF_VALUE(2,0)
                  LINEC(2,0) = LINEC(1,0)
     +                         + LIABS_NEC_BAL_ADJ
                  WCCUM(2,0) = WCCUM(1,0)
C     +                         + LIABS_NEC_BAL_ADJ
C     +                         - ASSETS_NEC_BAL_ADJ
C 11/21/02                  WCCUM(2,0) = WCCUM(1,0)
C 11/21/02                  LINEC(2,0) = LINEC(1,0)
                  CHANGE_IN_WORKING_CAPITIAL = WCCUM(2,0) - WCCUM(1,0)
C
                  COMMON_STOCK_2_ELIMINATE = SUBSIDARY_VARIABLES(101) -
     +                                        PARENT_COMMON_STOCK_ISSUED
                  COMMON_STOCK(2,0) = COMMON_STOCK(1,0)
     +                                + COMMON_STOCK_2_ELIMINATE    ! SUB_EQUITY_NEEDS_FROM_PARENT(0)
     +                                + PARENT_LEVEL_CS_ACQUISIONS
     +                                - SUB_COMMON_BUYBACK_CS_ADJ
     +                                + PAID_IN_CAPITAL
c                 COMMON_STOCK_ISSUED = SUB_EQUITY_NEEDS_FROM_PARENT(0)
                  COMMON_STOCK_ISSUED = COMMON_STOCK_2_ELIMINATE
                  COMMON_STOCK_BOUGHT = SUB_COMMON_BUYBACK_CS_ADJ
                  LONG_TERM_DEBT_ISSUED = LONG_TERM_DEBT_ISSUED
     +                                    + SBU_LTD_ELIM
                  SHORT_TERM_DEBT_ISSUED = SBU_STD_ELIM
                  PREFERRED_STOCK_ISSUED = PREFERRED_STOCK_ISSUED +
     +                                                       SBU_PS_ELIM
                  REARNC(2,0) = REARNC(1,0) + RETAINED_EARNINGS  ! YEAR_END_UNUSED_CREDIT_BAL 3/13/98
     +                                      + PARENT_LEVEL_RE_ACQUISIONS
     +                                      - SUB_COMMON_BUYBACK_RE_ADJ
     +                                      + RETAINED_EARNINGS_ADJ
C    +                                      - BAL_SHEET_RE_SUB_ADJ
                  OTHER_COMPREHENSIVE_INCOME_BALANCE(0) =
     +                             OTHER_COMPREHENSIVE_INCOME_BALANCE(0)
     +                             + EXCLUDE_SUB_OCI_EARNINGS
                  CLASS_OCI_BALANCE =
     +                             OTHER_COMPREHENSIVE_INCOME_BALANCE(0)  ! 730
                  COMMON_EQUITY(2,0) = REARNC(2,0) + COMMON_STOCK(2,0)
                  SHORT_TERM_DEBT(2,0) = SHORT_TERM_DEBT(1,0)
     +                                   + SBU_STD_ELIM
     +                                   + STD_BAL_ADJ
                  NUCLEAR_FUEL_LEASE_PAYMENTS = LEASED_NF_BURN_EXP_FILE
     +                                       + LEASED_NF_BURN_SALES_FILE
     +                                       + NUC_FUEL_LEASED_BURN
                  ELIMINATION_CASH_ADJUSTMENT = 0.
C    +                                       CONSOLIDATED_TAX_ADJUSTMENT 
C MOVED CALCULATION TO READ PARAMETERS 3/15/98
C                 CLASS_OTH_LIAB_SALE_ASSETS = CASH_FROM_SALE_OF_ASSETS-
C    +                                    GROSS_VALUE_OF_SOLD_ASSETS +
C    +                                    CUMULATIVE_DEP_ON_SOLD_ASSETS-
C    +                                    ATL_AMORT_OF_BOOK -
C    +                                    BTL_AMORT_OF_BOOK +
C    +                                    ADDEDUM_TO_BOOK_GAIN_LOSS
                  CLASS_OTH_LIAB_SALE_ASSETS = 0 ! 3/15/98 THERE ISN'T AN ELIM FOR THIS.
                  OTHER_LT_LIABILITY(2,0) = OTHER_LT_LIABILITY(1,0)
c 9/29/02     +                                + CONSOLIDATED_TAX_LIB_ADJUSTMENT ! CONSOLIDATED_TAX_ADJUSTMENT+
     +                                + CLASS_LEASED_NFCE
     +                                - NUCLEAR_FUEL_LEASE_PAYMENTS
     +                                + CAPITIALIZED_LEASE_ADDITIONS
     +                                - (ATL_LEASE_PAYMENTS +
     +                                               BTL_LEASE_PAYMENTS)
C SALE OF ASSETS
c     +                                + CLASS_OTH_LIAB_SALE_ASSETS
     +                                + LT_LIAB_BAL_ADJ
C
C OUT FOR TESTING 10/25
c                 OTHER_LT_LIABILITY(2,0) = CONSOLIDATED_TAX_ADJUSTMENT+
c    +                                           OTHER_LT_LIABILITY(2,0)
                  NUC_DECOM_FUND_LIABILITY(0) =
     +                                     NUC_DECOM_FUND_LIABILITY(0)
     +                                     + NUC_DECOM_LIAB_BAL_ADJ
C    +                                  + NUC_DECOMMISSIONING_COST +
C    +                                    BTL_NUC_FUEL_DECOM_LIABILITY +
C    +                                     NET_OF_TAX_NUCL_FUND_RETURN ! keeps the balance sheet balanced
C
C REPORTING SECTION
C
C
                  ITC_USED = EXCLUDE_ITC ! removed for testing 1/19/09
                  ITC_AMORTIZATION = 0.
                  DEFERRED_TAXES_DR = CON_FED_DEFERRED_TAX_DR_ADJ
                  DEFERRED_TAXES_CR = EXCLUDE_TAX_DEFERRALS_CR 
     +                                + EA_DEFERRED_TAXES
                  DEF_TAX_CR_BALANCE(2,0) = DEF_TAX_CR_BALANCE(1,0)
     +                                 + ADJUSTMENT_2_DEFERRED_TAXES_BAL 
     +                                 + TOTAL_DEF_TAXES_CR 
                  TOTAL_DEF_TAXES_CR = DEFERRED_TAXES_CR
     +                                 + BTL_DEF_TAXES_CR
                  AVERAGE_EQUITY =(COMMON_EQUITY(1,0) +
     +                                            COMMON_EQUITY(2,0))/2.
C                 CUMTXNORM(2,0) = EXCLUDE_SUB_TAX_DEFERRALS_DR  ! CHANGED TO BELOW 3/13/98
C    +                           + YEAR_END_UNUSED_CREDIT_BAL
                  CUMTXNORM(2,0) = CUMTXNORM(1,0) - DEFERRED_TAXES_DR ! 3/13/98
     +                             - BTL_DEFERRED_TAXES_DR
C    +                           + YEAR_END_UNUSED_CREDIT_BAL
     +                                    + UNUSED_CONSOLD_TAX_CREDITS
C                 CUMTXNORM(2,0) = CUMTXNORM(1,0) +
C    +                                           SUBSIDARY_VARIABLES(28) ! 3/13/98
C                 SUBSIDARY_VARIABLES(73) = CUMTXNORM(2,0)
                  FED_TAXABLE_INCOME_AFTER_NOLS =
     +                                   SUBSIDARY_VARIABLES(136) 
     +                                   - CONSOLD_FED_INCOME_AFTER_NOLS ! 5/18/99 TESTING
                  FEDERAL_TAXES = CONSOLIDATED_TAX_LIB_ADJUSTMENT       ! CONSOLIDATED_TAX_ADJUSTMENT
                  ATL_INCOME_TAXES = CONSOLIDATED_TAX_LIB_ADJUSTMENT    ! CONSOLIDATED_TAX_ADJUSTMENT
     +                               - CONSOLIDATED_STATE_TAX_ADJ
                  COMMON_DIVIDENDS = EXCLUDE_COMMON_DIVIDENDS
                  COMMON_STOCK_CASH_DIVIDENDS = EXCLUDE_COMMON_DIVIDENDS
                  SUBSIDIARY_DIVIDEND=SUB_DIVIDEND_PAYMENTS_2_PARENT(0)
                  NEW_SUBSIDIARY_INVESTMENT =
     +                                   SUB_EQUITY_NEEDS_FROM_PARENT(0)
                  NEW_SUBSIDIARY_INVESTMENT = SUBSIDARY_VARIABLES(126)
                  NEW_SUB_INVESTMENT = 0.
                  GOODWILL_OF_NEW_SUB_INVESTMENT = 0.
C
                  INCOME_TAX_TIMING_ADJS = ATL_FEDERAL_TAXES
     +                                  + ATL_STATE_TAXES
     +                                  + BTL_FEDERAL_TAXES
     +                                  + BTL_STATE_TAXES
     +                                  - FUNDS_CONSOLIDATING_ADJUSTMENT
     +                                  + INTRA_TAXES_PAYABLE
                  INCOME_TAX_TIMING_ADJS =
     +                                 PARENT_STATE_TAXES_ACCRUAL_ADJ
     +                                 + PARENT_FEDERAL_TAX_ACCRUAL_ADJ
     +                                 + PARENT_NON_INCOME_TAX_ACCRL_ADJ
     +                                 + SUB_TAXES_ACCRUAL
     +                                 - CONSOLID_FED_INCOME_TAX_ACCRUAL
     +                                 - CONSOLID_STATE_INC_TAX_ACCRUAL
     +                                 - CONSOLID_NON_INCOME_TAX_ACCRUAL
                  IF(SALT_RIVER_PROJECT() .OR. 
     +                           RETAIN_POST_RETIREMENT_EARNINGS()) THEN
                     ACCOUNTS_RECEIVABLE(0) = ACCOUNTS_RECEIVABLE(0)
     +                                  + INTRA_TAXES_PAYABLE
     +                                  + CHANGE_IN_ACCOUNTS_RECEIVABLE
     +                                  + CHANGE_INVEST_INCOME_RECIVABLE
c     +                                   + INVESTMENT_INCOME_RECEIVABLE
c     +                                   - BTL_CASH_EARNINGS
                  ELSE
                      ACCOUNTS_RECEIVABLE(0) = ACCOUNTS_RECEIVABLE(0)
     +                                  + INTRA_TAXES_PAYABLE
     +                                  + CHANGE_INVEST_INCOME_RECIVABLE
c     +                                   + CHANGE_IN_ACCOUNTS_RECEIVABLE
c     +                                   - BTL_CASH_EARNINGS
                  ENDIF

                  FEDERAL_TAXES_ACCRUAL_ADJ = SUBSIDARY_VARIABLES(444)
     +                                 - INTRA_TAXES_PAYABLE
c 9/29/02     +                                 - CONSOLID_FED_INCOME_TAX_ACCRUAL
                  FEDERAL_TAXES_ACCRUAL_ADJ = INTRA_TAXES_PAYABLE
                  INCOME_TAX_PAYABLE_4_AFFILIATES =
     +                                   CONSOLIDATED_TAX_LIB_ADJUSTMENT
c 2/2/05 the following lines adjust the annual cash flow statement to accout
c for intra-company notes receivable income.  
c         CASH_TIMING_ADJUSTMENTS = CASH_TIMING_ADJUSTMENTS
c     +                             - UNBILLED_REVENUES
c     +                             - INVESTMENT_INCOME_RECEIVABLE ! INVESTMENT_INCOME 6/16/04
c     +                             + BTL_CASH_EARNINGS
         IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR) THEN
            ANNUAL_CASH_FLOW_TIMING_ADJUSTMENTS =
     +                                   -CHANGE_INVEST_INCOME_RECIVABLE
         ELSE
            ANNUAL_CASH_FLOW_TIMING_ADJUSTMENTS =
     +                                   -CHANGE_INVEST_INCOME_RECIVABLE
c     +                                     + INTEREST_DIVIDENDS_ACCRUDED ! added 8/25/04
         ENDIF
                  ACCOUNTS_PAYABLE(0) = ACCOUNTS_PAYABLE(0)
     +                                 + FEDERAL_TAXES_ACCRUAL_ADJ
     +                                 + CHANGE_IN_ACCOUNTS_PAYABLE
     +                                 + INCOME_TAX_PAYABLE_4_AFFILIATES
c     +                                 + INTEREST_DIVIDENDS_ACCRUDED
     +                                 + CHANGE_INTEREST_DIVS_ACCRUED
                  INTRA_TAXES_PAYABLE_OUTPUT = INTRA_TAXES_PAYABLE
                  FEDERAL_TAXABLE_INCOME =CON_FEDERAL_TAXABLE_INCOME_ADJ
                  CALL SUMMARIZE_VARIABLES(INT2(0),YR)
                  CALL SET_NON_EQUIVALENCED_VARIABLES
C
                  VARIABLE(300) = 0. ! State BTL taxes are pass through
                  VARIABLE(302) = 0. ! Federal BTL Taxes passes Sub BTL and Parent
                  VARIABLE(300) = BTL_STATE_TAXES
                  VARIABLE(302) = BTL_FEDERAL_TAXES
                  VARIABLE(138) = SUBSIDARY_VARIABLES(138) ! ADJ_2_FEDERAL_TAXES
     +                            - CONSOLIDATED_FED_TAX_ADJ
                  VARIABLE(134) = VARIABLE(134)
     +                            - CONSOLIDATED_STATE_TAX_ADJ !-SUBSIDARY_VARIABLES(134) + ! ADJ_2_STATE_TAXES
                  VARIABLE(212) = VARIABLE(134) ! CONSOLIDATED_STATE_TAX_ADJ
                  VARIABLE(24) = ATL_STATE_TAXES ! VARIABLE(134) ! CONSOLIDATED_STATE_TAX_ADJ
                  CALL RETURN_ALL_ELIMINATIONS_FOR(YR,VARIABLE)
                  VARIABLE(225) = STD_INTEREST_RATE * VARIABLE(84)
                  VARIABLE(226) = ROEQU * VARIABLE(79)
                  CALL CAL_ANNUALIZED_CAPTIAL_COSTS(VARIABLE)
                  IF(STATE_TAXABLE_INCOME_AFTER_NOLS /= 0.) THEN
                     CONSOLIDATED_STATE_TAX_RATE =
c    +                             100.*(VARIABLE(134) + VARIABLE(212))/
     +                             100.*VARIABLE(345)/
     +                                   STATE_TAXABLE_INCOME_AFTER_NOLS
                  ELSE
                     CONSOLIDATED_STATE_TAX_RATE = STATE_TAX_RATE
                  ENDIF
C
C
C ADD SBU AND SUB TOGETHER
C
                  FED_TAXABLE_INCOME_AFTER_NOLS = VARIABLE(136)
                  VARIABLE(340) = FEDERAL_TAX_RATE *
     +                                     FED_TAXABLE_INCOME_AFTER_NOLS
                  CALL INTRA_COMPANY_ADJUSTMENT(VARS_2_PASS,
     +                                     VARIABLE,SUBSIDARY_VARIABLES)
                  CALL SET_NOT_AVAILABLE_VALUES(VARIABLE)
                  IF(FED_TAXABLE_INCOME_AFTER_NOLS > 0.) THEN
                     VARIABLE(213) = 100. * VARIABLE(340)/
     +                                     FED_TAXABLE_INCOME_AFTER_NOLS
                  ELSE
                     VARIABLE(213) = 100. * FEDERAL_TAX_RATE
                  ENDIF
                  VARIABLE(141) = CONSOLIDATED_STATE_TAX_RATE
                  VARIABLE(29) = VARIABLE(681)
     +                           + VARIABLE(682)
     +                           + VARIABLE(733)
                  TOTAL_EQUITY_WITH_OCI = CLASS_OCI_BALANCE ! 730
     +                                    + VARIABLE(79) ! COMMON_EQUITY(2,CLASS_POS)
                  TOTAL_CAPITIAL_BAL_WO_CURRENT_LTD = TOTAL_CAPITIAL_BAL
                  LTD_BALANCE_WO_CURRENT_LTD = VARIABLE(81)  ! LONG_TERM_DEBT(2,0)
     +                                         - CURRENT_LTD_RETIREMENTS
                  TOTAL_CAPITIAL_BAL_WO_CURRENT_LTD = TOTAL_CAPITIAL_BAL
     +                                         - CURRENT_LTD_RETIREMENTS
                  ASSET_CLASS_NAME = 'Consolidating Adjustments (-)'
                  IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                             MONTHLY_MIDAS_ACTIVE)
     +                           CALL MONTHLY_EOY_ELIMINATIONS(VARIABLE)
                  IF(ASSET_REPORTS_ACTIVE) THEN
C
C BASE YEAR SHAREHOLDER VALUE
C
                    EQRATO = PARENT_EQUITY_RATIO
                    ROEQU = PARENT_EQUITY_RATE
                    COST_OF_CAPITAL_RISK_ADJUSTMENT =
     +                                            PARENT_EQUITY_RISK_ADJ
                    PSRATE = PARENT_PS_RATE
                    PSRATO = PARENT_PS_RATIO
                    LTDRTE = PARENT_LTD_RATE
                    STD_INTEREST_RATE = PARENT_STD_RATE
                    STATE_TAX_RATE = PARENT_STATE_TAX_RATE
C
                     CALL CLASS_SHAREHOLDER_VALUE(VARIABLE,
     +                                        ZERO,
     +                                        EMBEDDED_PARENT_LTD_COST,
     +                                        EMBEDDED_PARENT_PS_COST)
                     CALL GRE_DSC_REPORT(VARIABLE)
                     CALL EBITDA_REPORT(VARIABLE)
                     CALL SUB_SEC_RATIOS(VARIABLE)
                     IF(FirstEnergy_Is_Active) THEN
                        CALL FIRST_ENERGY_PandL_REPORT(INT2(-2),
     +                                              VARIABLE,
     +                                              CL_ANN_CLASS_ENERGY,
     +                                              ZERO, ! EXP_FUEL_EXPENSE,
     +                                              ZERO, ! EXP_PURCHASE_POWER_EXPENSE
     +                                              ZERO, ! EXP_FILE_VARIABLE_EXPENSE
     +                                              ZERO) !EXP_FILE_FIXED_EXPENSE
                     ENDIF
                     CALL CLASS_SHAREHOLDER_VALUE_NA(VARIABLE)
C
                     CALL CONSOLIDATING_ADJS_NA(VARIABLE)
                     VARIABLE(641) = VARIABLE(76)
     +                               - VARIABLE(90) ! ASSET_MINUS_LIABS
                     VARIABLE(642) = VARIABLE(641)
     +                               - CONSOLIDATING_PRIOR_INBALANCE
                     CONSOLIDATING_PRIOR_INBALANCE = VARIABLE(641)
C                     IF(SALT_RIVER_PROJECT()) THEN
C                        VARIABLE(117) = VARIABLE(117)   ! NUCL_DECOM_FUND
C     +                                  + VARIABLE(235) ! NET_OF_TAX_NUCL_FUND_RETURN
C                     ENDIF
                     OUTPUT_CLASS_ID = -2
                     CALL MG_LOCATE_WRITE(8,15,ASSET_CLASS_NAME,3,4)
                     WRITE(INCOME_UNIT,REC=OUTPUT_RECORD)
     +                                            PRT_ENDPOINT(),
     +                                            FLOAT(BASE_YEAR+YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            VARIABLE
                     IF(FirstEnergy_Is_Active)
     +                  CALL FE_PCA_LEGAL_REPORTS(FLOAT(BASE_YEAR+YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            OUTPUT_RECORD,
     +                                            VARIABLE)
                  IF(base_year+year >= 2011 .and. .false.) THEN
                     write(37673,1021) output_record,
     +                                 ASSET_CLASS_NAME,
     +                                 VARIABLE
                  ENDIF
                     OUTPUT_RECORD = OUTPUT_RECORD - 1
                  ENDIF
C
C CONSOLIDATED ADJUSTMENTS TO PARENT
C
C                  SUBSIDARY_VARIABLES(51) = SUBSIDARY_VARIABLES(79)/ !COMMON EQUITY
C     +                                        COMMON_SHARES(2,CLASS_POS)
C
C                  SUBSIDARY_VARIABLES(52) = SUBSIDARY_VARIABLES(51) *
C     +                                             PARENT_MARKET_TO_BOOK
                  SUBSIDARY_VARIABLES(226)=ROEQU*SUBSIDARY_VARIABLES(79) ! 1\20\98 temp fix
                  SUBSIDARY_VARIABLES(51) = PARENT_STOCK_BOOK_VALUE
                  SUBSIDARY_VARIABLES(52) = PARENT_STOCK_MARKET_PRICE
                  SUBSIDARY_VARIABLES(53) = PARENT_AVERAGE_SHARES
                  SUBSIDARY_VARIABLES(54) = PARENT_MARKET_TO_BOOK
C                 SUBSIDARY_VARIABLES(59) = PARENT_AVERAGE_EQUITY
                  SUBSIDARY_VARIABLES(56) = PARENT_DIVIDEND_PER_SHARE
                  SUBSIDARY_VARIABLES(299) = PARENT_YEAR_END_SHARES
                  SUBSIDARY_VARIABLES(303) = PARENT_AVERAGE_STOCK_PRICE
                  SUBSIDARY_VARIABLES(43) = PARENT_SUBSIDIARY_INCOME
     +                                     + SUB_COLUMN_TOTAL_SUB_INCOME
     +                                     - SUBSIDIARY_INCOME
                  COMMON_DIVIDENDS = SUBSIDARY_VARIABLES(48)
                  EARNINGS_AVAILABLE_TO_COMMON = SUBSIDARY_VARIABLES(47)
                  SUBSIDARY_VARIABLES(59) = (CONSOLD_COMMON_EQUITY_BAL +
     +                                       SUBSIDARY_VARIABLES(79))/2.
                  CONSOLD_COMMON_EQUITY_BAL = SUBSIDARY_VARIABLES(79)
                  AVERAGE_EQUITY = SUBSIDARY_VARIABLES(59)
                  IF(ABS(AVERAGE_EQUITY) >= 0.0001) THEN
                     RETURN_ON_EQUITY=100.*EARNINGS_AVAILABLE_TO_COMMON/
     +                                         AVERAGE_EQUITY
                  ELSE
                     RETURN_ON_EQUITY = NOT_AVAIL   
                  ENDIF
                  IF(ABS(EARNINGS_AVAILABLE_TO_COMMON) >= 0.0001) THEN
                     DIVIDEND_PAYOUT = 100.* COMMON_DIVIDENDS/
     +                                      EARNINGS_AVAILABLE_TO_COMMON
                  ELSE
                     DIVIDEND_PAYOUT = NOT_AVAIL   
                  ENDIF
                  IF(ABS(PARENT_AVERAGE_SHARES) >= 0.0001) THEN
                     EARNINGS_PER_SHARE = EARNINGS_AVAILABLE_TO_COMMON/
     +                                           PARENT_AVERAGE_SHARES
                  ELSE
                     EARNINGS_PER_SHARE = NOT_AVAIL
                  ENDIF
                  RETURN_ON_RATEBASE = SUBSIDARY_VARIABLES(62) ! RATEBASE
                  OPERATING_INCOME = SUBSIDARY_VARIABLES(31)
                  IF(ABS(RETURN_ON_RATEBASE) >= 0.0001) THEN
                     RETURN_ON_RATEBASE = 100. * OPERATING_INCOME/
     +                                                RETURN_ON_RATEBASE
                  ELSE
                     RETURN_ON_RATEBASE = NOT_AVAIL
                  ENDIF
                  SUBSIDARY_VARIABLES(61) = RETURN_ON_RATEBASE
                  SUBSIDARY_VARIABLES(55) = EARNINGS_PER_SHARE
                  SUBSIDARY_VARIABLES(58) = RETURN_ON_EQUITY
                  SUBSIDARY_VARIABLES(57) = DIVIDEND_PAYOUT 
C                 SUBSIDARY_VARIABLES(101) = PARENT_COMMON_STOCK_ISSUED
                  SUBSIDARY_VARIABLES(341)=CONSOLIDATED_FED_CREDITS_USED
                  SUBSIDARY_VARIABLES(139) = CONSOLIDATED_AMT_INCOME
                  SUBSIDARY_VARIABLES(355) = .20*CONSOLIDATED_AMT_INCOME
                  SUBSIDARY_VARIABLES(375) = SUBSIDARY_VARIABLES(342) -
     +                                       SUBSIDARY_VARIABLES(341)
                  CONSOLID_RETAINED_EARNINGS_BAL =
     +                                    SUBSIDARY_VARIABLES(49)  
     +                                  + CONSOLID_RETAINED_EARNINGS_BAL
     +                                  + BAL_SHEET_RE_SUB_ADJ
     +                                  + CS_BUYBACK_ADJ_RETAINED_ERNING
                  SUBSIDARY_VARIABLES(78) =
     +                                    CONSOLID_RETAINED_EARNINGS_BAL
c                  SUBSIDARY_VARIABLES(730) = CONSOLID_OCI_EARNINGS_BAL ! 7/7/04
C
                  FED_TAXABLE_INCOME_AFTER_NOLS=SUBSIDARY_VARIABLES(136)
                  IF(ABS(FED_TAXABLE_INCOME_AFTER_NOLS) >= 0.0001) THEN
                     SUBSIDARY_VARIABLES(213) =
     +                                   100.* SUBSIDARY_VARIABLES(340)/
     +                                     FED_TAXABLE_INCOME_AFTER_NOLS
                  ELSE
                     SUBSIDARY_VARIABLES(213) = FEDERAL_TAX_RATE*100.
                  ENDIF
                  STATE_TAXABLE_INCOME_AFTER_NOLS =
     +                                          SUBSIDARY_VARIABLES(132)
                  IF(ABS(STATE_TAXABLE_INCOME_AFTER_NOLS) >= 0.0001)THEN
                     SUBSIDARY_VARIABLES(141) =
c    +                                  100.*(SUBSIDARY_VARIABLES(134) +
c    +                                        SUBSIDARY_VARIABLES(212))/ 
     +                             100.*SUBSIDARY_VARIABLES(345)/
     +                                   STATE_TAXABLE_INCOME_AFTER_NOLS
                  ELSE
                     SUBSIDARY_VARIABLES(141) = STATE_TAX_RATE
                  ENDIF
                  CALL CAL_SUMMED_VALUES(SUBSIDARY_VARIABLES)
                  
                  ASSET_CLASS_NAME =
     +                        trim(PARENT_CLASS_NAME)//' Consolidated'
                  ADJUSTMENT_2_ECONOMIC_ASSETS=SUBSIDARY_VARIABLES(262)
                  CALL CLASS_SHAREHOLDER_VALUE(SUBSIDARY_VARIABLES,
     +                                        CONSLD_YEAR_END_OP_ASSETS,
     +                                        EMBEDDED_PARENT_LTD_COST,
     +                                        EMBEDDED_PARENT_PS_COST)
                  SUBSIDARY_VARIABLES(342) =
     +                                      CONSOLIDATED_FED_TAX_CREDITS
                  SUBSIDARY_VARIABLES(371) =
     +                                   CONSOLID_FED_SEC_29_TAX_CREDITS
                  SUBSIDARY_VARIABLES(372) =
     +                                   CONSOLID_FED_SEC_42_TAX_CREDITS
                  SUBSIDARY_VARIABLES(347) =
     +                                    CONSOLIDATED_STATE_TAX_CREDITS

                  VARIABLE = SUBSIDARY_VARIABLES

                  IF(USE_ACTUAL_CON_DEFERRED_TAX_DR) THEN
                     DEFERRED_TAXES_DR = ACTUAL_CON_DEFERRED_TAXES_DR
                     TOTAL_EXPENSE_AND_TAXES = TOTAL_EXPENSE_AND_TAXES
     +                                         - DEFERRED_TAXES_DR
                     VARIABLE(28) = ACTUAL_CON_DEFERRED_TAXES_DR
                  ELSE
                     DEFERRED_TAXES_DR = VARIABLE(28)

                  ENDIF
                  AMT_CREDITS_USED = CONSOLID_AMT_CREDITS_USED
                  AMT_CREDITS_CREATED = CONSOLID_AMT_CREDITS_CREATED
                  FED_TAX_CREDIT_PASSED_UP =CONSOLD_AVAIL_FED_TAX_CREDIT
                  ITC_USED = FED_TAX_CREDIT_PASSED_UP
                  SEC_29_CREDITS_PASSED_UP =
     +                                   CONSOLID_FED_SEC_29_TAX_CREDITS
                  SEC_42_CREDITS_PASSED_UP =
     +                                   CONSOLID_FED_SEC_42_TAX_CREDITS
                  UNUSED_FEDERAL_TAX_CREDITS = FED_TAX_CREDIT_PASSED_UP-
     +                                         FED_CREDITS_USED
                  LOST_SEC_29_CREDITS = CONSOLID_LOST_SEC_29_CREDITS
                  SEC_29_CREDITS_USED = CONSOLID_SEC_29_CREDITS_USED
C
                  TOTAL_EQUITY_WITH_OCI = VARIABLE(730) ! CLASS_OCI_BALANCE ! 731
     +                                    + VARIABLE(77) ! COMMON_EQUITY(2,CLASS_POS)
     +                                    + VARIABLE(78) ! RETAINED EARNINGS
                  CALL CONSOLIDATED_RATIOS()
C
                  IF(YEAR <= LAST_AVAILABLE_MONTHLY_YEAR .AND.
     +                                        MONTHLY_MIDAS_ACTIVE) THEN
                     WRITE_MONTHLY_INFOR = ASSET_REPORTS_ACTIVE 
c    +                  .AND.(PARENT_CLASS .OR. REPORT_CLASS(CLASS_POS))
                     CALL CONSOLIDATED_MONTHLY_ANALYSIS(YEAR,CLASS,
     +                                  ASSET_CLASS_NAME,
     +                                  CLASS_POS,
     +                                  'C',
     +                                  INT2(-1), ! CLASS_LEVEL,
     +                                  WRITE_MONTHLY_INFOR,
     +                                  DONT_TALLY_THIS_CLASS,
     +                                  ELIMINAITON_CLASS_ID_NUM,
     +                                  THIS_IS_REPORTING_CLASS,
     +                                  VARIABLE,
     +                                  CONSOLD_BOY_DEFERRED_TAXES_DR,
     +                                  CONSOLD_BOY_OTHER_LT_LIABS,
     +                                  CONSOLD_BOY_ACCOUNTS_PAYABLE,
     +                                  CONSOLD_BOY_DEFERRED_TAXES_CR,
     +                                  CONSOLD_BOY_SUB_INVESTMENT,
     +                                  CONSOLIDATED_FED_TAX_ADJ,
     +                                  CONSOLIDATED_STATE_TAX_ADJ,
     +                                  CONSOLD_BOY_RETAINED_EARNINGS,
     +                                  CONSOLD_BOY_ACCOUNTS_RECIABLE,
     +                                  CONSOLD_BOY_CWIP,
     +                                  CONSOLD_BOY_OTHER_ASSETS,
     +                                  CONSOLD_BOY_NET_DEFERRED_DEBITS,
     +                                  CONSOLD_BOY_CURRENT_ASSETS,
     +                                  CONSOLIDATED_LTD_BALANCE,
     +                                  CONSOLIDATED_BOY_FUNDS_BALANCE,
     +                        CONSOLIDATED_INVESTMENT_INCOME_RECEIVABLE,
     +                          CONSOLIDATED_LTD_BALANCE_WO_CURRENT_LTD)
                     SUBSIDARY_VARIABLES(390) = SUBSIDARY_VARIABLES(390)
     +                      - CONSOLIDATED_INVESTMENT_INCOME_RECEIVABLE
                  ENDIF
C
                  IF(REPORTING_CLASS_ID == -2) THEN
                     CALL STORE_REPORTING_VALUES(VARIABLE)
                     THIS_IS_REPORTING_CLASS = .FALSE.
                  ENDIF
                  VARIABLE(641) = VARIABLE(76)
     +                            - VARIABLE(90)
                  VARIABLE(29) = VARIABLE(681)
     +                           + VARIABLE(682)
     +                           + VARIABLE(733)
                  IF(ASSET_REPORTS_ACTIVE) THEN
                     CALL GRE_DSC_REPORT(VARIABLE)
                     CALL EBITDA_REPORT(VARIABLE)
                     CALL SUB_SEC_RATIOS(VARIABLE)
                     IF(FirstEnergy_Is_Active) THEN
                        CALL FIRST_ENERGY_PandL_REPORT(INT2(-1),
     +                                              VARIABLE,
     +                                              CL_ANN_CLASS_ENERGY,
     +                                              ZERO, ! EXP_FUEL_EXPENSE,
     +                                              ZERO, ! EXP_PURCHASE_POWER_EXPENSE
     +                                              ZERO, ! EXP_FILE_VARIABLE_EXPENSE
     +                                              ZERO) !EXP_FILE_FIXED_EXPENSE
                     ENDIF
                     VARIABLE(641) = VARIABLE(76)
     +                               - VARIABLE(90) ! ASSET_MINUS_LIABS
                     VARIABLE(642) = VARIABLE(641)
     +                               - CONSOLIDATED_PRIOR_INBALANCE
                     CONSOLIDATED_PRIOR_INBALANCE = VARIABLE(641)
C                     IF(SALT_RIVER_PROJECT()) THEN
C                        VARIABLE(117) = VARIABLE(117)   ! NUCL_DECOM_FUND
C     +                                  + VARIABLE(235) ! NET_OF_TAX_NUCL_FUND_RETURN
C                     ENDIF
                     IF(WVPA()) THEN
                        CALL WVPA_ANNUAL_RISK_VALUES(
     +                                    WVPA_MEMBER_RATES_WITH_SDI,    !744
     +                                    WVPA_MEMBER_RATES_WITHOUT_SDI, ! 745
     +                                    WVPA_MEMBER_ENERGY_SALES, ! 751
     +                                    WVPA_SDI_ENERGY_SALES) ! 752
                        CALL WVPA_ANNUAL_MARGINS(VARIABLE)
                     ENDIF
                     IF(IMPA()) CALL IMPA_ANNUAL_RATIOS(PARENT_CLASS,
     +                                                 CLASS,VARIABLE,
     +                                                 OPERATING_METHOD)
                     VARIABLE(742) = VARIABLE(731)
     +                               + VARIABLE(80)
     +                               + VARIABLE(741) ! LONG_TERM_DEBT(2,0) WO CURRENT LTD
                     OUTPUT_CLASS_ID = -1
                     CALL MG_LOCATE_WRITE(8,15,ASSET_CLASS_NAME,3,4)
                     WRITE(INCOME_UNIT,REC=OUTPUT_RECORD)
     +                                            PRT_ENDPOINT(),
     +                                            FLOAT(BASE_YEAR+YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            VARIABLE
                     IF(FirstEnergy_Is_Active)
     +                  CALL FE_PCA_LEGAL_REPORTS(FLOAT(BASE_YEAR+YEAR),
     +                                            ASSET_CLASS_NAME,
     +                                            OUTPUT_RECORD,
     +                                            VARIABLE)
                     IF(base_year+year >= 2011 .and. .false.) THEN
                        write(37673,1021) output_record,
     +                                    ASSET_CLASS_NAME,
     +                                    VARIABLE
                     ENDIF
                     OUTPUT_RECORD = OUTPUT_RECORD - 1
                  ENDIF
                  CONSOLID_OCI_EARNINGS_BAL = VARIABLE(730)
                  CONSOLD_BOY_DEFERRED_TAXES_DR = VARIABLE(73)
                  CONSOLD_BOY_NET_DEFERRED_DEBITS = VARIABLE(71)
                  CONSOLD_BOY_CWIP = VARIABLE(64)
                  CONSOLD_BOY_OTHER_ASSETS = VARIABLE(69)
                  CONSOLD_BOY_CURRENT_ASSETS = VARIABLE(75)
                  CONSOLD_BOY_DEFERRED_TAXES_CR = VARIABLE(87)
                  CONSOLD_BOY_OTHER_LT_LIABS =  VARIABLE(83)
                  CONSOLD_BOY_ACCOUNTS_PAYABLE = VARIABLE(389)
                  CONSOLD_BOY_ACCOUNTS_RECIABLE= VARIABLE(390)
                  CONSOLD_BOY_RETAINED_EARNINGS = VARIABLE(78)
                  CONSOLD_BOY_OTHER_DEFERRED_CREDITS = VARIABLE(712)
                  CONSOLD_BOY_REGULATORY_DEFERRED_CREDITS =VARIABLE(711)
                  CONSOLD_BOY_GAIN_ON_REAQUIRED_DEBT = VARIABLE(710)
                  CONSOLIDATED_BOY_FUNDS_BALANCE = VARIABLE(74)
                  CONSOLIDATED_LTD_BALANCE_WO_CURRENT_LTD =VARIABLE(741)
                  CONSOLIDATED_LTD_BALANCE = VARIABLE(81)
                  CONSOLD_BOY_SUB_INVESTMENT = 0. ! VARIABLE(7) DON'T KNOW WHAT THIS IS ABOUT
                  R_TEMP = CLOSE_CONSOLIDATED_TAX_INFO()
                  EXIT
               ENDIF
            ENDIF
            LAST_CLASS_LEVEL = CLASS_LEVEL
         ENDDO
         IF(WVPA()) THEN
            CALL WVPA_ZERO_ACTUAL_DATA_BASE()
            VOID_LOGICAL = WVPA_SET_FUEL_TRACKER()
         ENDIF
         
         CALL MG_CLEAR_LINE(12,26,31,ALL_VERSIONS,0)
         CALL MG_LOCATE_WRITE(18,70,' ',3,2)
         CALL MG_LOCATE_WRITE(15,70," ",3,0)
         IF(ASSET_REPORTS_ACTIVE) READ(INCOME_UNIT,REC=START_RECORD-1)
         DEALLOCATE(SUB_EQUITY_NEEDS_FROM_PARENT,
     +              SUB_EARNINGS_2_COMMON,
     +              SUB_EARNINGS_2_EXCLUDE,
     +              SUB_DIVIDEND_PAYMENTS_2_PARENT,
     +              SUB_TOTAL_SUB_INCOME,
     +              SUB_SBU_ACE_TAX_DEPRECIATION,
     +              SUB_SBU_TAX_PRE_DEPRECIATION,
     +              SBU_RETIREE_MEDICAL_PAYMENTS,
     +              SBU_CASH_OTH_ASSET,
     +              SBU_DSM_CAPITIAL,
     +              SBU_BTL_LEASE_PAYMENTS,
     +              SBU_ATL_LEASE_PAYMENTS,
     +              SBU_CHANGE_DECOMMISSIONING_LIAB,
     +              PARENT_ACQUISITION_OF_SUB_COST,
     +              PARENT_ACQUISITION_GOODWILL,STAT=IOS)
         DEALLOCATE(PROPERTY_VALUE_GPV_WITH_CWIP,
     +              PROPERTY_VALUE_GPV_NO_CWIP,
     +              PROPERTY_VALUE_NPV_WITH_CWIP,
     +              PROPERTY_VALUE_NPV_NO_CWIP,
     +              EXCLUDED_SBU_PROPERTY_TAX,
     +              NUC_FUEL_RATE_BASE_AT,
     +              CWIP_IN_RATE_BASE_AT,
     +              SBU_ATL_TAX_EXPENSE,
     +              SBU_BTL_TAX_EXPENSE,
     +              SBU_CLASS_OTH_LIAB_SALE_ASSETS,
     +              SBU_DEFERRED_CREDIT_RATEBASE,
     +              SBU_DEFERRED_DEBIT_RATEBASE,STAT=IOS)
         DEALLOCATE(EXCLUDED_REVENUE_TAX_BASIS,
     +              EXCLUDED_REVENUE_TAX_BASIS_A,
     +              EXCLUDED_REVENUE_TAX_BASIS_B,
     +              EXCLUDED_REVENUE_TAX,
     +              EXCLUDED_OTHER_TAXES_REV,
     +              EXCLUDED_OTHER_TAXES_EXP,  
     +              EXCLUDED_OTHER_TAXES,
     +              EXCLUDE_CAPITAL_TAXES_STATE,
     +              EXCLUDE_CAPITAL_TAXES_FED,
     +              EXCLUDE_CAPITAL_TAX_FED_BASIS,
     +              EXCLUDE_CAPITAL_TAX_STATE_BASIS,STAT=IOS)
C        CALL STORE_REPORTING_VALUES(SUBSIDARY_VARIABLES) ! forces consolidated into output
C        IF(YR == 1) DEALLOCATE(BY_ADJUSTMENT_2_ECONOMIC_ASSETS)
C        DEALLOCATE(VARIABLE,SUBSIDARY_VARIABLES)
      RETURN
C **********************************************************************
      ENTRY NUC_FUEL_VALUES(R_NUC_FUEL_TAX_EXPENSE,
     +                      R_NF_DEFERRED_TAX_BASIS,
     +                      R_INC_NUCLEAR_FUEL_EXPENSE,
     +                      R_NF_OWNED,
     +                      R_NF_CASH_EXPENSE,
     +                      R_NF_NON_CASH_EXPENSE,
     +                      R_NF_SL_DEF_TAX_DEP)
C **********************************************************************
         R_NUC_FUEL_TAX_EXPENSE = SUBSIDARY_VARIABLES(227)
         R_NF_DEFERRED_TAX_BASIS = SUBSIDARY_VARIABLES(238)
         R_INC_NUCLEAR_FUEL_EXPENSE = SUBSIDARY_VARIABLES(16)
         R_NF_OWNED = SUBSIDARY_VARIABLES(219)
         R_NF_CASH_EXPENSE = SUBSIDARY_VARIABLES(237)
         R_NF_NON_CASH_EXPENSE = SUBSIDARY_VARIABLES(231)
         R_NF_SL_DEF_TAX_DEP = SUBSIDARY_VARIABLES(236)
      RETURN
C **********************************************************************
      ENTRY RETURN_AI_CLASS_VALUES(R_AI_LAGGED_GPV,
     +                             R_AI_CLASS_CASH,
     +                             R_AI_ANNUAL_CLASS_DEP,
     +                             R_AI_AFUDC_ON_CASH,
     +                             R_AI_CLASS_EXPENSE)
C **********************************************************************
         R_AI_LAGGED_GPV = AI_LAGGED_GPV
         R_AI_CLASS_CASH = AI_CLASS_CASH
         R_AI_ANNUAL_CLASS_DEP = AI_ANNUAL_CLASS_DEP
         R_AI_AFUDC_ON_CASH = AI_AFUDC_ON_CASH
         R_AI_CLASS_EXPENSE = AI_CLASS_EXPENSE
      RETURN
C **********************************************************************
      ENTRY TRANSFER_ZERO_ASSETS(R_CLASS_POS)
C **********************************************************************
C     INCLUDE 'CL_ASSETS.FOR'
C **********************************************************************
C     ENTRY TRANSFER_ZERO_ASSETS(R_CLASS_POS)
C **********************************************************************
C
C TRANSFER
C
         CLASS_GPV(1,R_CLASS_POS) = CLASS_GPV(2,R_CLASS_POS)
         CLASS_CWIP(1,R_CLASS_POS) = CLASS_CWIP(2,R_CLASS_POS) 
         CWIP_IN_RATE_BASE(1,R_CLASS_POS) =
     +                                  CWIP_IN_RATE_BASE(2,R_CLASS_POS)
         CLASS_CUMULATIVE_DEPRECIATION(1,R_CLASS_POS) = 
     +                      CLASS_CUMULATIVE_DEPRECIATION(2,R_CLASS_POS)
C
         CLASS_NET_NF_VALUE(1,R_CLASS_POS) =
     +                                 CLASS_NET_NF_VALUE(2,R_CLASS_POS)
         RATE_BASE(1,R_CLASS_POS) = RATE_BASE(2,R_CLASS_POS)
         CAPITIALIZED_LEASES_RATE_BASE(1,R_CLASS_POS) =
     +                      CAPITIALIZED_LEASES_RATE_BASE(2,R_CLASS_POS)
         DEFERRED_DEBITS_RATE_BASE(1,R_CLASS_POS) =
     +                          DEFERRED_DEBITS_RATE_BASE(2,R_CLASS_POS)
         NUC_FUEL_RATE_BASE(1,R_CLASS_POS) =
     +                                 NUC_FUEL_RATE_BASE(2,R_CLASS_POS)
         CUM_ITC_DEF_RATEBASE(1,R_CLASS_POS) =
     +                               CUM_ITC_DEF_RATEBASE(2,R_CLASS_POS)
         CUM_DEF_TAX_RATEBASE(1,R_CLASS_POS) =
     +                               CUM_DEF_TAX_RATEBASE(2,R_CLASS_POS)
         NUC_DECOM_RATE_BASE(1,R_CLASS_POS) =
     +                                NUC_DECOM_RATE_BASE(2,R_CLASS_POS)
         CIAC_RATE_BASE(1,R_CLASS_POS) = CIAC_RATE_BASE(2,R_CLASS_POS)
         PLANT_IN_SERVICE_RATE_BASE(1,R_CLASS_POS) =
     +                         PLANT_IN_SERVICE_RATE_BASE(2,R_CLASS_POS)
         ASSET_NEC_IN_RATE_BASE(1,R_CLASS_POS) = 
     +                             ASSET_NEC_IN_RATE_BASE(2,R_CLASS_POS)
         NET_UTILITY_PLANT(1,R_CLASS_POS) = 
     +                                  NET_UTILITY_PLANT(2,R_CLASS_POS)
         OTHER_ASSETS(1,R_CLASS_POS) = OTHER_ASSETS(2,R_CLASS_POS)
         CAPITIALZIED_LEASES(1,R_CLASS_POS) =
     +                                CAPITIALZIED_LEASES(2,R_CLASS_POS)
         OTHER_LT_LIABILITY(1,R_CLASS_POS) =
     +                                 OTHER_LT_LIABILITY(2,R_CLASS_POS)
         FASB143_NET_ASSET_VALUE(1,R_CLASS_POS) =
     +                            FASB143_NET_ASSET_VALUE(2,R_CLASS_POS)
         FASB143_LT_LIABILITY_VALUE(1,R_CLASS_POS) =
     +                         FASB143_LT_LIABILITY_VALUE(2,R_CLASS_POS)
         INVESTMENT_IN_SUBSIDIARIES(1,R_CLASS_POS) =
     +                         INVESTMENT_IN_SUBSIDIARIES(2,R_CLASS_POS)
         LIQUID_INVESTMENTS(1,R_CLASS_POS) =
     +                                 LIQUID_INVESTMENTS(2,R_CLASS_POS)
         DEF_TAX_CR_BALANCE(1,R_CLASS_POS) =
     +                                 DEF_TAX_CR_BALANCE(2,R_CLASS_POS)
         DEF_ITC_BALANCE(1,R_CLASS_POS) = DEF_ITC_BALANCE(2,R_CLASS_POS)
         REARNC(1,R_CLASS_POS) = REARNC(2,R_CLASS_POS)
         COMMON_STOCK(1,R_CLASS_POS) = COMMON_STOCK(2,R_CLASS_POS)
         COMMON_EQUITY(1,R_CLASS_POS) = COMMON_EQUITY(2,R_CLASS_POS)
         PREFERRED_STOCK(1,R_CLASS_POS) = PREFERRED_STOCK(2,R_CLASS_POS)
         LONG_TERM_DEBT(1,R_CLASS_POS) = LONG_TERM_DEBT(2,R_CLASS_POS)
         COMMON_SHARES(1,R_CLASS_POS) = COMMON_SHARES(2,R_CLASS_POS)
         SHORT_TERM_DEBT(1,R_CLASS_POS)=SHORT_TERM_DEBT(2,R_CLASS_POS)
         OTHER_DEFERRED_CREDITS_BAL(1,R_CLASS_POS) =
     +                         OTHER_DEFERRED_CREDITS_BAL(2,R_CLASS_POS)
         REGULATORY_DEFERRED_CREDITS_BAL(1,R_CLASS_POS) =
     +                    REGULATORY_DEFERRED_CREDITS_BAL(2,R_CLASS_POS)
         GAIN_ON_REAQUIRED_DEBT_BAL(1,R_CLASS_POS) =
     +                         GAIN_ON_REAQUIRED_DEBT_BAL(2,R_CLASS_POS)
         INTEREST_ON_SHORT_TERM_DEBT(1,R_CLASS_POS) =
     +                        INTEREST_ON_SHORT_TERM_DEBT(2,R_CLASS_POS)
         BOOK_VALUE_STOCK(1,R_CLASS_POS)=BOOK_VALUE_STOCK(2,R_CLASS_POS)
         STOCK_PRICE_YEAR_END(1,R_CLASS_POS) =
     +                               STOCK_PRICE_YEAR_END(2,R_CLASS_POS)
         LINEC(1,R_CLASS_POS) = LINEC(2,R_CLASS_POS)
         OPERATING_REVENUES(1,R_CLASS_POS) =
     +                                 OPERATING_REVENUES(2,R_CLASS_POS)
         WCCUM(1,R_CLASS_POS) = WCCUM(2,R_CLASS_POS)
         CUMTXNORM(1,R_CLASS_POS) = CUMTXNORM(2,R_CLASS_POS)
         CUSTOMER_DEPOSITS_BAL(1,R_CLASS_POS) = 
     +                              CUSTOMER_DEPOSITS_BAL(2,R_CLASS_POS)
         STD_RATE(1,R_CLASS_POS) = STD_RATE(2,R_CLASS_POS)
         CUM_DEF_REVENUES(1,R_CLASS_POS)=CUM_DEF_REVENUES(2,R_CLASS_POS)
         NFIS(1,R_CLASS_POS) = NFIS(2,R_CLASS_POS)
         NUC_DECOM_FUND_BAL(1,R_CLASS_POS) =
     +                                 NUC_DECOM_FUND_BAL(2,R_CLASS_POS)
         CIAC_BALANCE(1,R_CLASS_POS) = CIAC_BALANCE(2,R_CLASS_POS)
         NET_DD_BALANCE(1,R_CLASS_POS) = NET_DD_BALANCE(2,R_CLASS_POS)
         OTHER_DD_BALANCE(1,R_CLASS_POS)=OTHER_DD_BALANCE(2,R_CLASS_POS)
         GOODWILL(1,R_CLASS_POS) = GOODWILL(2,R_CLASS_POS)
         UNAMORTIZED_INTEREST_BALANCE(1,R_CLASS_POS) =
     +                       UNAMORTIZED_INTEREST_BALANCE(2,R_CLASS_POS)
         UNAMORTIZED_ISSUE_EXP_BALANCE(1,R_CLASS_POS) =
     +                      UNAMORTIZED_ISSUE_EXP_BALANCE(2,R_CLASS_POS)
         PENSION_LIABILITY(1,R_CLASS_POS) =
     +                                  PENSION_LIABILITY(2,R_CLASS_POS)
         DEFERRED_GAIN_FROM_SALES(1,R_CLASS_POS) =
     +                           DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS)
         STORM_RESERVE_BALANCE(1,R_CLASS_POS) =
     +                              STORM_RESERVE_BALANCE(2,R_CLASS_POS)
         ExecBenefitsBalance(1,R_CLASS_POS) = 
     +                                ExecBenefitsBalance(2,R_CLASS_POS)
         IncentiveCompBalance(1,R_CLASS_POS) =
     +                               IncentiveCompBalance(2,R_CLASS_POS)
         ACCRUED_VACATION_PAY_BALANCE(1,R_CLASS_POS) =
     +                       ACCRUED_VACATION_PAY_BALANCE(2,R_CLASS_POS)
         RB_INCLUDE_DEFERRED_TAX_DR(1,R_CLASS_POS) =
     +                         RB_INCLUDE_DEFERRED_TAX_DR(2,R_CLASS_POS)
         RB_INCLUDE_DEFERRED_REVENUES(1,R_CLASS_POS) =
     +                       RB_INCLUDE_DEFERRED_REVENUES(2,R_CLASS_POS)
         RB_EXCLUDED_PENSION_LIABILITY(1,R_CLASS_POS) =
     +                      RB_EXCLUDED_PENSION_LIABILITY(2,R_CLASS_POS)
         RB_EXCLUDED_DEFERRED_ASSET_GAIN(1,R_CLASS_POS) =
     +                    RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,R_CLASS_POS)
         RB_EXCLUDED_STORM_RESERVE(1,R_CLASS_POS) =
     +                          RB_EXCLUDED_STORM_RESERVE(2,R_CLASS_POS)
         RB_EXCLUDE_ACCRUED_VACATION_PAY(1,R_CLASS_POS) =
     +                    RB_EXCLUDE_ACCRUED_VACATION_PAY(2,R_CLASS_POS)
C
C ZERO
C
         SHORT_TERM_DEBT(2,R_CLASS_POS) = 0.
         LINEC(2,R_CLASS_POS) = 0.
         WCCUM(2,R_CLASS_POS) = 0.
         CLASS_GPV(2,R_CLASS_POS) = 0.
         CWIP_IN_RATE_BASE(2,R_CLASS_POS) = 0.
         CLASS_CWIP(2,R_CLASS_POS) = 0.
         CLASS_CUMULATIVE_DEPRECIATION(2,R_CLASS_POS) = 0. 
         CLASS_NET_NF_VALUE(2,R_CLASS_POS) = 0.
         NET_DD_BALANCE(2,R_CLASS_POS) = 0.
         OTHER_DD_BALANCE(2,R_CLASS_POS) = 0.
         GOODWILL(2,R_CLASS_POS) = 0.
         UNAMORTIZED_INTEREST_BALANCE(2,R_CLASS_POS) = 0.
         UNAMORTIZED_ISSUE_EXP_BALANCE(2,R_CLASS_POS) = 0.
         DEFERRED_DEBITS_RATE_BASE(2,R_CLASS_POS) = 0.
         DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS) = 0.
      RETURN
C **********************************************************************
      ENTRY SUMMARIZE_4_MONTHLY_NEEDS(R_CLASS_POS)
C **********************************************************************
C
         TOTAL_INCOME_TAXES = ATL_INCOME_TAXES + BTL_INCOME_TAXES
         REVENUES_OTHER = OTHER_REVENUE(2,R_CLASS_POS)
         REVENUES_OPERATING = OPERATING_REVENUES(2,R_CLASS_POS)
         STD_INTEREST = INTEREST_ON_SHORT_TERM_DEBT(2,R_CLASS_POS)
         GROSS_PLANT_VALUE = CLASS_GPV(2,R_CLASS_POS)
C    +                           + NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)
         CWIP = CLASS_CWIP(2,R_CLASS_POS)
         GROSS_PLANT_VALUE_PLUS_CWIP = CLASS_GPV(2,R_CLASS_POS) +
     +                             CLASS_CWIP(2,R_CLASS_POS)
C    +                           + NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)  !PLANT
         CUMULATIVE_DEPRECIATION =
     +                      CLASS_CUMULATIVE_DEPRECIATION(2,R_CLASS_POS)
         ENDING_NF_RATE_BASE = NUC_FUEL_RATE_BASE(2,R_CLASS_POS)
         ENDING_CWIP_RATE_BASE = CWIP_IN_RATE_BASE(2,R_CLASS_POS)
         NET_NF_VALUE = CLASS_NET_NF_VALUE(2,R_CLASS_POS)
         UTILITY_PLANT_NET = NET_UTILITY_PLANT(2,R_CLASS_POS)  
C    +                           + NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)
         TAX_CREDITS = ITC_USED - ITC_AMORTIZATION
         ASSETS_OTHER = OTHER_ASSETS(2,R_CLASS_POS)
         RETIREMENT_MEDICAL_FUND =
     +                         POST_RETIREMENT_MEDICAL_FUND(R_CLASS_POS)
         CLASS_ACCOUNTS_PAYABLE = ACCOUNTS_PAYABLE(R_CLASS_POS)
         CLASS_ACCOUNTS_RECEIVABLE = ACCOUNTS_RECEIVABLE(R_CLASS_POS)
         CLASS_FUEL_INVENTORY = FUEL_INVENTORY(R_CLASS_POS)
         MATERIALS_N_SUPPLIES = CLASS_MATERIALS_N_SUPPLIES(R_CLASS_POS)
         GAS_IN_STORAGE = CLASS_GAS_STORAGE(R_CLASS_POS)
         DEFERRED_PURCHASED_GAS=CLASS_DEFERRED_PURCHASE_GAS(R_CLASS_POS)
C        CLASS_DEFERRED_FUEL_BALANCE=DEFERRED_FUEL_BALANCE(R_CLASS_POS)
         RETIREMENT_MED_PAYABLE=POST_RETIREMENT_MED_PAYABLE(R_CLASS_POS)
         DECOM_FUND_LIABILITY = NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)
         SUBSIDIARY_INVESTMENT =
     +                         INVESTMENT_IN_SUBSIDIARIES(2,R_CLASS_POS)
         LEASES_CAPITIALZIED = CAPITIALZIED_LEASES(2,R_CLASS_POS)
               
         DECOMMISIONING_FUND_BAL = NUC_DECOM_FUND_BAL(2,R_CLASS_POS)
         DD_BALANCE_NET = NET_DD_BALANCE(2,R_CLASS_POS)
         OTHER_NET_DEFERRALS = OTHER_DD_BALANCE(2,R_CLASS_POS)
         CLASS_UNAMORTIZED_INTEREST_BAL =
     +                       UNAMORTIZED_INTEREST_BALANCE(2,R_CLASS_POS)
     +                       + DEBT_FILE_UNAMORT_INTR_BAL(R_CLASS_POS)
         CLASS_UNAMORTIZED_ISSUE_EXP_BALANCE =
     +                      UNAMORTIZED_ISSUE_EXP_BALANCE(2,R_CLASS_POS)
     +                      + DEBT_FILE_UNAMORT_ISS_EXP_BAL(R_CLASS_POS)
         NET_GOODWILL = GOODWILL(2,R_CLASS_POS)
         DEFERRED_REVENUES_CUM = CUM_DEF_REVENUES(2,R_CLASS_POS)
         DEFERRED_TAXES_DR_BAL = CUMTXNORM(2,R_CLASS_POS)
         ASSET_NEC = WCCUM(2,R_CLASS_POS) + LINEC(2,R_CLASS_POS)
     +               + ASSETS_NEC_BAL_ADJ
         COMMON_STOCK_BAL = COMMON_STOCK(2,R_CLASS_POS)
         YEAR_END_SHARES = COMMON_SHARES(2,R_CLASS_POS)
         BOY_SHARES = COMMON_SHARES(1,R_CLASS_POS)
         RETAINED_EARNINGS_BAL = REARNC(2,R_CLASS_POS)
         COMMON_EQUITY_BAL = COMMON_EQUITY(2,R_CLASS_POS)
         PREFERRED_STOCK_BAL = PREFERRED_STOCK(2,R_CLASS_POS)
         LONG_TERM_DEBT_BAL = LONG_TERM_DEBT(2,R_CLASS_POS)
         CLASS_OCI_BALANCE =
     +                   OTHER_COMPREHENSIVE_INCOME_BALANCE(R_CLASS_POS)  ! 730
         TOTAL_EQUITY_WITH_OCI = CLASS_OCI_BALANCE
     +                           + COMMON_EQUITY_BAL
         TOTAL_CAPITIAL_WITH_OCI = TOTAL_EQUITY_WITH_OCI
     +                             + PREFERRED_STOCK(2,R_CLASS_POS)
     +                             + LONG_TERM_DEBT(2,R_CLASS_POS)
         TOTAL_CAPITIAL_BAL = COMMON_EQUITY(2,R_CLASS_POS)
     +                        + PREFERRED_STOCK(2,R_CLASS_POS)
     +                        + LONG_TERM_DEBT(2,R_CLASS_POS)
         CLASS_DEFERRED_PURCHASE_POWER =
     +                            DEFERRED_PURCHASE_POWER(2,R_CLASS_POS)
         CLASS_PENSION_LIABILITY = PENSION_LIABILITY(2,R_CLASS_POS)
         CLASS_DEFERRED_GAIN_FROM_SALES =
     +                           DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS)
         CLASS_STORM_RESERVE_BALANCE =
     +                              STORM_RESERVE_BALANCE(2,R_CLASS_POS)
         Class_ExecBenefits_Balance = ExecBenefitsBalance(2,R_CLASS_POS)
         Class_IncentiveComp_Balance=IncentiveCompBalance(2,R_CLASS_POS)
         CLASS_VACATION_PAY_BALANCE =
     +                       ACCRUED_VACATION_PAY_BALANCE(2,R_CLASS_POS)
         OTHER_LT_LIABILITY_BAL = OTHER_LT_LIABILITY(2,R_CLASS_POS)
         FASB143_ARO_NET_ASSET_BAL =
     +           FASB143_NET_ASSET_VALUE(2,R_CLASS_POS)
     +           + BALANCE_SHEET_ROLLUPS(2,ARO Net Assets,CLASS_LEVEL)
         FASB143_ARO_LIABLILITY_BAL =
     +          FASB143_LT_LIABILITY_VALUE(2,R_CLASS_POS)
     +          + BALANCE_SHEET_ROLLUPS(2,ARO Liabilities,CLASS_LEVEL)
         CLASS_FASB87_BALANCE = FASB_87_INTANGIBLE_ASSETS(R_CLASS_POS)
         CLASS_OCI_BALANCE =
     +                   OTHER_COMPREHENSIVE_INCOME_BALANCE(R_CLASS_POS)   ! 103
         SHORT_TERM_DEBT_BAL = SHORT_TERM_DEBT(2,R_CLASS_POS)
         CUSTOMER_DEPOSITS_BALANCE =
     +                              CUSTOMER_DEPOSITS_BAL(2,R_CLASS_POS)
         CIAC_BAL = CIAC_BALANCE(2,R_CLASS_POS)
         DEF_TAX_CR_BAL = DEF_TAX_CR_BALANCE(2,R_CLASS_POS)
         DEF_ITC_BAL = DEF_ITC_BALANCE(2,R_CLASS_POS)
         LIABILITIES_NEC = LINEC(2,R_CLASS_POS)
         FASB143_TOTAL_ARO_CASH_PAYMENTS =  ! 748
     +                                 FASB143_ARO_CASH_PAYMENTS          ! 746
     +                                 + FASB143_ARO_TRUST_CASH_PAYMENTS  ! 747
         OTHER_DEFERRED_CREDITS_BAL_BOY =
     +                 OTHER_DEFERRED_CREDITS_BAL(1,R_CLASS_POS)
     +                 + BALANCE_SHEET_ROLLUPS(1,Other Deferred Credits,
     +                                                      CLASS_LEVEL)
         REGULATORY_DEFERRED_CREDITS_BAL_BOY =
     +            REGULATORY_DEFERRED_CREDITS_BAL(1,R_CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(1,Regulatory Deferred Credits,
     +                                                      CLASS_LEVEL)
         GAIN_ON_REAQUIRED_DEBT_BAL_BOY =
     +                    GAIN_ON_REAQUIRED_DEBT_BAL(1,R_CLASS_POS)
     +                   + BALANCE_SHEET_ROLLUPS(1,Reaquired Debt Gain ,
     +                                                      CLASS_LEVEL)
      RETURN
C **********************************************************************
      ENTRY SUMMARIZE_VARIABLES(R_CLASS_POS,R_YR)
C **********************************************************************
C
         IF(WE_ARE_CONSOLIDATING) THEN
            DIVIDEND_FROM_SUBSIDIARY = SUBSIDIARY_DIVIDEND +
     +                                     SUB_COLUMN_TOTAL_SUB_DIVIDEND
            TAX_PAYMENTS_2_PARENT_FROM_SUB =
     +                                   SUB_FED_TAX_PAYMENTS_2_PARENT
c     +                                   + SUB_STATE_TAX_PAYMENTS_2_PARENT
            INCOME_TAXES_CONSOLIDATED = CONSOLIDATED_INCOME_TAXES_PAID ! CONSOLIDATED_INCOME_TAXES
            TAXES_PAID_BY_PARENT = PARENT_TAXES_PAID
         ELSE
            COMMON_STOCK_ISSUED = COMMON_STOCK_ISSUED
     +                            + COMMON_STOCK_BOUGHT
            IF(PARENT_CLASS) THEN
               DIVIDEND_FROM_SUBSIDIARY = SUBSIDIARY_DIVIDEND
               TAX_PAYMENTS_2_PARENT_FROM_SUB =
     +                                   SUB_FED_TAX_PAYMENTS_2_PARENT
c     +                                   + SUB_STATE_TAX_PAYMENTS_2_PARENT
               INCOME_TAXES_CONSOLIDATED=CONSOLIDATED_INCOME_TAXES_PAID ! CONSOLIDATED_INCOME_TAXES
               TAXES_PAID_BY_PARENT = PARENT_TAXES_PAID
            ELSEIF(SUBSIDIARY_CLASS) THEN
               DIVIDEND_FROM_SUBSIDIARY = SUBSIDIARY_DIVIDEND
            ELSE
               DIVIDEND_FROM_SUBSIDIARY = 0.
               TAX_PAYMENTS_2_PARENT_FROM_SUB = 0.
               INCOME_TAXES_CONSOLIDATED = 0.
               TAXES_PAID_BY_PARENT = 0.
            ENDIF
         ENDIF
C
c         OTHER_PURCHASE_POWER_EXPENSE = PUR_POWER_EXPENSE_PLUS_AMORT
c     +                                  - TRANSACT_MARKET_PURCHASES
         FASB143_TOTAL_ARO_CASH_PAYMENTS =  ! 748
     +                                 FASB143_ARO_CASH_PAYMENTS          ! 746
     +                                 + FASB143_ARO_TRUST_CASH_PAYMENTS  ! 747
         NET_DERIVATIVES_INCOME = TOTAL_DERIVATIVE_REVENUE
     +                            - TOTAL_DERIVATIVE_EXPENSE
         NET_FUEL_DERIV_MARGIN = TOTAL_FUEL_DERIV_REVENUES
     +                           - TOTAL_FUEL_DERIV_EXPENSES
         OTHER_DD_AMORT =  ATL_AMORTIZATION
     +                     - GOODWILL_AMORT
     +                     - CLASS_REGULATORY_ASSETS_AMORT
     +                     - FASB_109_AMORT
     +                     - FASB_133_AMORT
     +                     - FASB143_ARO_INTEREST_ACCREATION
     +                     + CIAC_AMORTIZATION
C
         NF_EXPENSE_WO_DECOM_DISPOSAL = CLASS_NUCLEAR_FUEL_EXPENSE
     +                                  - DOE_NUC_FUEL_FEE
     +                                  - NUC_DECOMMISSIONING_COST
         NF_NON_CASH_WO_DECOMMISSIONING = NF_NON_CASH_EXPENSE
     +                                    - NUC_DECOMMISSIONING_COST
C      
         TOTAL_INCOME_TAXES = ATL_INCOME_TAXES + BTL_INCOME_TAXES
         REVENUES_OTHER = OTHER_REVENUE(2,R_CLASS_POS)
         REVENUES_OPERATING = OPERATING_REVENUES(2,R_CLASS_POS)
         STD_INTEREST = INTEREST_ON_SHORT_TERM_DEBT(2,R_CLASS_POS)
         GROSS_PLANT_VALUE = CLASS_GPV(2,R_CLASS_POS)
C    +                           + NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)
         CWIP = CLASS_CWIP(2,R_CLASS_POS)
         GROSS_PLANT_VALUE_PLUS_CWIP = CLASS_GPV(2,R_CLASS_POS) +
     +                             CLASS_CWIP(2,R_CLASS_POS)
C    +                           + NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)  !PLANT
         CUMULATIVE_DEPRECIATION =
     +                      CLASS_CUMULATIVE_DEPRECIATION(2,R_CLASS_POS)
         ENDING_NF_RATE_BASE = NUC_FUEL_RATE_BASE(2,R_CLASS_POS)
         ENDING_CWIP_RATE_BASE = CWIP_IN_RATE_BASE(2,R_CLASS_POS)
         NET_NF_VALUE = CLASS_NET_NF_VALUE(2,R_CLASS_POS)
         UTILITY_PLANT_NET = NET_UTILITY_PLANT(2,R_CLASS_POS)  
C    +                           + NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)
         ASSETS_OTHER = OTHER_ASSETS(2,R_CLASS_POS)
         RETIREMENT_MEDICAL_FUND =
     +                         POST_RETIREMENT_MEDICAL_FUND(R_CLASS_POS)
         CLASS_ACCOUNTS_PAYABLE = ACCOUNTS_PAYABLE(R_CLASS_POS)
         CLASS_ACCOUNTS_RECEIVABLE = ACCOUNTS_RECEIVABLE(R_CLASS_POS)
         CLASS_FUEL_INVENTORY = FUEL_INVENTORY(R_CLASS_POS)
         MATERIALS_N_SUPPLIES = CLASS_MATERIALS_N_SUPPLIES(R_CLASS_POS)
         GAS_IN_STORAGE = CLASS_GAS_STORAGE(R_CLASS_POS)
         DEFERRED_PURCHASED_GAS=CLASS_DEFERRED_PURCHASE_GAS(R_CLASS_POS)
C        CLASS_DEFERRED_FUEL_BALANCE=DEFERRED_FUEL_BALANCE(R_CLASS_POS)
         RETIREMENT_MED_PAYABLE=POST_RETIREMENT_MED_PAYABLE(R_CLASS_POS)
         DECOM_FUND_LIABILITY = NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)
     +                          + NUC_DECOM_LIAB_BAL_ADJ
         SUBSIDIARY_INVESTMENT =
     +                         INVESTMENT_IN_SUBSIDIARIES(2,R_CLASS_POS)
c     +                         + SUBSIDIARY_INVESTMENT_ADJ removed 6/5/11 MSG
         LEASES_CAPITIALZIED = CAPITIALZIED_LEASES(2,R_CLASS_POS)
               
         DECOMMISIONING_FUND_BAL = NUC_DECOM_FUND_BAL(2,R_CLASS_POS)
         DD_BALANCE_NET = NET_DD_BALANCE(2,R_CLASS_POS)
         OTHER_NET_DEFERRALS = OTHER_DD_BALANCE(2,R_CLASS_POS)
         NET_GOODWILL = GOODWILL(2,R_CLASS_POS)
c         CLASS_UNAMORTIZED_INTEREST_BAL =
c     +                       UNAMORTIZED_INTEREST_BALANCE(2,R_CLASS_POS)
         UNAMORT_DEBIT_INTEREST_BAL =
     +                       UNAMORTIZED_INTEREST_BALANCE(2,R_CLASS_POS)
         CLASS_UNAMORTIZED_INTEREST_BAL = UNAMORT_DEBT_INTEREST_BAL
     +                                    + UNAMORT_DEBIT_INTEREST_BAL
         DEFERRED_REVENUES_CUM = CUM_DEF_REVENUES(2,R_CLASS_POS)
         DEFERRED_TAXES_DR_BAL = CUMTXNORM(2,R_CLASS_POS)
         ASSET_NEC = WCCUM(2,R_CLASS_POS) + LINEC(2,R_CLASS_POS)
     +               + ASSETS_NEC_BAL_ADJ
         COMMON_STOCK_BAL = COMMON_STOCK(2,R_CLASS_POS)
         YEAR_END_SHARES = COMMON_SHARES(2,R_CLASS_POS)
         BOY_SHARES = COMMON_SHARES(1,R_CLASS_POS)
         COMMON_SHARES_ISSUE_THIS_PERIOD = YEAR_END_SHARES - BOY_SHARES
         RETAINED_EARNINGS_BAL = REARNC(2,R_CLASS_POS)
         PREFERRED_STOCK_BAL = PREFERRED_STOCK(2,R_CLASS_POS)
     +                         + PREFERRED_STOCK_BAL_ADJ
         LONG_TERM_DEBT_BAL = LONG_TERM_DEBT(2,R_CLASS_POS)
     +                        + LTD_BAL_ADJ
         COMMON_EQUITY_BAL = COMMON_EQUITY(2,R_CLASS_POS)
         CLASS_OCI_BALANCE =
     +                   OTHER_COMPREHENSIVE_INCOME_BALANCE(R_CLASS_POS)  ! 730
         TOTAL_EQUITY_WITH_OCI = CLASS_OCI_BALANCE
     +                           + COMMON_EQUITY_BAL
         TOTAL_CAPITIAL_WITH_OCI = TOTAL_EQUITY_WITH_OCI
     +                             + PREFERRED_STOCK_BAL ! PREFERRED_STOCK(2,R_CLASS_POS)
     +                             + LONG_TERM_DEBT_BAL
         TOTAL_CAPITIAL_BAL = COMMON_EQUITY(2,R_CLASS_POS)
     +                        + PREFERRED_STOCK_BAL ! PREFERRED_STOCK(2,R_CLASS_POS)
     +                        + LONG_TERM_DEBT_BAL
         LTD_BALANCE_WO_CURRENT_LTD = LONG_TERM_DEBT_BAL
     +                                - CURRENT_LTD_RETIREMENTS
         TOTAL_CAPITIAL_BAL_WO_CURRENT_LTD = TOTAL_CAPITIAL_WITH_OCI
     +                                       - CURRENT_LTD_RETIREMENTS
         OTHER_LT_LIABILITY_BAL = OTHER_LT_LIABILITY(2,R_CLASS_POS)
         FASB143_ARO_NET_ASSET_BAL = ! SBU_VARIABLES(636)
     +             FASB143_NET_ASSET_VALUE(2,R_CLASS_POS)
     +             + BALANCE_SHEET_ROLLUPS(2,ARO Net Assets,CLASS_LEVEL)
         FASB143_ARO_LIABLILITY_BAL =  ! SBU_VARIABLES(637)
C     +                       + FASB143_LT_LIABILITY_VALUE(2,R_CLASS_POS)
     +            FASB143_LT_LIABILITY_VALUE(2,R_CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(2,ARO Liabilities,CLASS_LEVEL)
         CLASS_FASB87_BALANCE = FASB_87_INTANGIBLE_ASSETS(R_CLASS_POS)
         CLASS_OCI_BALANCE =
     +                   OTHER_COMPREHENSIVE_INCOME_BALANCE(R_CLASS_POS)   ! 103
         SHORT_TERM_DEBT_BAL = SHORT_TERM_DEBT(2,R_CLASS_POS)
         CUSTOMER_DEPOSITS_BALANCE =
     +                              CUSTOMER_DEPOSITS_BAL(2,R_CLASS_POS)
         CIAC_BAL = CIAC_BALANCE(2,R_CLASS_POS)
         DEF_TAX_CR_BAL = DEF_TAX_CR_BALANCE(2,R_CLASS_POS)
         DEF_ITC_BAL = DEF_ITC_BALANCE(2,R_CLASS_POS)
         PRIOR_CAUSE_OF_ITC_AMORT = DEF_ITC_BALANCE(1,R_CLASS_POS)
     +                              + ITC_USED
         LINEC(2,R_CLASS_POS) = LINEC(2,R_CLASS_POS) + LIABS_NEC_BAL_ADJ
         LIABILITIES_NEC = LINEC(2,R_CLASS_POS)
         ANNUALIZED_PS_DIVIDENDS = ANN_PS_DIV(R_YR,R_CLASS_POS) +
     +                             PS_PREM_ISSUE_EXP_AMORT
         ANNUALIZED_LTD_INTEREST = ANN_LTD_INT(R_YR,R_CLASS_POS) +
     +                             INTEREST_AMORTIZATION
         ANNUALIZED_STD_INTEREST = STD_INTEREST_RATE*SHORT_TERM_DEBT_BAL
         ANNUALIZED_EQUITY_COST = ROEQU * COMMON_EQUITY_BAL
         EMBED_COST_CAPITAL_W_STD = 0.
         EMBED_COST_CAPITAL_WO_STD = 0.
         NET_TAX_EMBED_COST_CAPTL_W_STD = 0.
         NET_TAX_EMBED_COST_CAPTL_WO_STD = 0.
         EFFECTIVE_TAX_RATE = FEDERAL_TAX_RATE *
     +                                (1.-STATE_TAX_RATE)+STATE_TAX_RATE
         IF(TOTAL_CAPITIAL_BAL+SHORT_TERM_DEBT_BAL /= 0.) THEN
            EMBED_COST_CAPITAL_W_STD = 100.*(ANNUALIZED_EQUITY_COST +
     +                                       ANNUALIZED_PS_DIVIDENDS +
     +                                       ANNUALIZED_LTD_INTEREST +
     +                                       ANNUALIZED_STD_INTEREST)/
     +                          (TOTAL_CAPITIAL_BAL+SHORT_TERM_DEBT_BAL)
            NET_TAX_EMBED_COST_CAPTL_W_STD=100.*(ANNUALIZED_EQUITY_COST+
     +                                         ANNUALIZED_PS_DIVIDENDS +
     +                (1.-EFFECTIVE_TAX_RATE)*(ANNUALIZED_LTD_INTEREST +
     +                                        ANNUALIZED_STD_INTEREST))/
     +                          (TOTAL_CAPITIAL_BAL+SHORT_TERM_DEBT_BAL)
         ENDIF
         IF(TOTAL_CAPITIAL_BAL /= 0.) THEN
            EMBED_COST_CAPITAL_WO_STD = 100.*(ANNUALIZED_EQUITY_COST +
     +                                        ANNUALIZED_PS_DIVIDENDS +
     +                                        ANNUALIZED_LTD_INTEREST)/
     +                                                TOTAL_CAPITIAL_BAL
            NET_TAX_EMBED_COST_CAPTL_WO_STD =
     +          100.*(ANNUALIZED_EQUITY_COST + ANNUALIZED_PS_DIVIDENDS +
     +                (1.-EFFECTIVE_TAX_RATE)*ANNUALIZED_LTD_INTEREST)/
     +                                                TOTAL_CAPITIAL_BAL
         ENDIF
         IF(UI()) THEN
            PENSION_TAX_DEDUCTION_NONBOOK = PENSION_EXPENSE_CASH        ! 689
            STORM_TAX_DEDUCTION_NONBOOK = STORM_EXPENSE_CASH            ! 690
            VACATION_TAX_DEDUCTION_NONBOOK = VACATION_PAY_CASH          ! 691
            PENSION_TAX_DEDUCTION_BOOK = 0.                             ! 714
            STORM_TAX_DEDUCTION_BOOK = 0.                               ! 715
            VACATION_TAX_DEDUCTION_BOOK = 0.                            ! 716
         ELSE
            PENSION_TAX_DEDUCTION_BOOK = PENSION_EXPENSE_NON_CASH       ! 689
            STORM_TAX_DEDUCTION_BOOK = STORM_EXPENSE_NON_CASH           ! 690
            VACATION_TAX_DEDUCTION_BOOK = VACATION_PAY_NON_CASH         ! 691
            PENSION_TAX_DEDUCTION_NONBOOK = 0.                          ! 714 
            STORM_TAX_DEDUCTION_NONBOOK = 0.                            ! 715
            VACATION_TAX_DEDUCTION_NONBOOK = 0.                         ! 716
         ENDIF
         PENSIN_VAC_STRM_TAX_EXP_NONBOOK = PENSION_TAX_DEDUCTION_NONBOOK
     +                                  + STORM_TAX_DEDUCTION_NONBOOK
     +                                  + VACATION_TAX_DEDUCTION_NONBOOK
     +                                  + ExecBenefitsCash
     +                                  + IncentiveCompensationCash
         PENSIN_VAC_STRM_TAX_EXP_BOOK = PENSION_TAX_DEDUCTION_BOOK
     +                                  + STORM_TAX_DEDUCTION_BOOK
     +                                  + VACATION_TAX_DEDUCTION_BOOK
         TAXABLE_INCOME_B4_DEDUCTIONS = CAPITIALIZED_INTEREST
C    +                                 + NF_CAPITIALIZED_INTEREST
     +                                 + REVENUES_OPERATING
     +                                 + OTHER_TAXABLE_INCOME
     +                                 + TAXABLE_INVESTMENT_INCOME
     +                                 - SALVAGE_TRANSACTIONS
     +                                 - PENSIN_VAC_STRM_TAX_EXP_NONBOOK
         TAX_DEDUCTIBLE_EXPENSES_BOOK = FUEL_EXPENSE
     +                                 + PURCHASE_POWER_EXPENSE
     +                              + INC_CAPACITY_PURCHASES_TO_LEVEL_RM
     +                                 + VARIABLE_EXPENSE
     +                                 + FIXED_EXPENSE
     +                                 + SERVICE_TRANSACTION_EXPENSE
     +                                 + OTHER_EXPENSE_1
     +                                 + OTHER_EXPENSE_2
     +                                 + KEPCO_WC_CURENT_MAINT_ENRG_COST
     +                                 + OTHER_EXPENSE_3
     +                                 + ATL_LEASE_INTEREST
     +                                 + DSM_EXPENSE
     +                                 + DSM_REBATE
     +                                 + EMISSION_CREDIT_EXPENSE
     +                                 + NF_TAX_EXPENSE
     +                                 + OPERATING_REVENUE_TAX
     +                                 + Payroll_Taxes
     +                                 + OTHER_TAXES
     +                                 + ENVIRONMENTAL_TAX
     +                                 + CLASS_PROPERTY_TAXES
     +                                 + STATE_TAX_ON_CAPITAL
     +                                 + CLASS_BTL_EXPENSES
     +                                 + INTEREST_ON_LONG_TERM_DEBT
     +                                 + STD_INTEREST
     +                                 + CATAWBA_CAPACITY_PAYMENTS
     +                                 + CATAWBA_EXPENSES
     +                                 + TRANSMISSION_OPERATION
     +                                 + TRANSMISSION_MAINTENANCE
     +                                 + DISTRIBUTION_OPERATION
     +                                 + DISTRIBUTION_MAINTENANCE
     +                                 + CUSTOMER_ACCOUNTS
     +                                 + CUSTOMER_SERVICES
     +                                 + SALES_EXPENSE
     +                                 + AG_OPERATIONS
     +                                 + AG_MAINTENANCE
     +                                 + RETIREMENT_MEDICAL_PAYMENTS
     +                                 + TOTAL_DERIVATIVE_EXPENSE
     +                                 + TOTAL_FUEL_DERIV_EXPENSES
     +                                 + PENSIN_VAC_STRM_TAX_EXP_BOOK

C
         TAXES_NON_INCOME = OPERATING_REVENUE_TAX
     +                      + OTHER_TAXES
     +                      + Payroll_Taxes
     +                      + ENVIRONMENTAL_TAX
     +                      + CLASS_PROPERTY_TAXES
     +                      + STATE_TAX_ON_CAPITAL
     +                      + FEDERAL_TAX_ON_CAPITAL
         CATAWBA_TAX_DEDUCTIBLE_EXPENSE = CATAWBA_CAPACITY_PAYMENTS 
     +                                    + CATAWBA_EXPENSES
         OTHER_AND_ENVIRONMENTAL_TAXES = OTHER_TAXES + ENVIRONMENTAL_TAX
         STATE_TAX_RATE = STATE_TAX_RATE*100. 
         INCOME_BEFORE_CAPITAL_SERVICE = INCOME_B4_INTEREST 
     +                                   + AFUDC_BORROWED
         TAX_CREDITS = ITC_USED - ITC_AMORTIZATION

         OTHER_PAYMENTS_TO_TRUST_FUNDS = CASH_TO_POST_RETIRE_MEDICAL_BAL  ! 755
     +                             + CASH_TO_ACCRD_MBR_REVENUES_BAL
         GROSS_CASH_FLOW = INCOME_BEFORE_CAPITAL_SERVICE
     +                     + VACATION_PAY_NON_CASH
     +                     + PENSION_EXPENSE_NON_CASH
     +                     + STORM_EXPENSE_NON_CASH
     +                     + ExecBenefitsNonCash
     +                     + IncentiveCompensationNonCash
     +                     + NF_NON_CASH_EXPENSE
     +                     + BOOK_DEPRECIATION
     +                     + DEFERRED_FUEL_EXPENSE
     +                     + AMORTIZATION_B4_CAP_SERVICE
     +                     + ELIMINATION_CASH_ADJUSTMENT
     +                     + CIAC_AMORTIZATION
     +                     - DEFERRED_REVENUES
     +                     - AFUDC_EQUITY
     +                     - AFUDC_BORROWED
     +                     - Mark_To_Market
     +                     - FE_NonCashEarningsNonCorp
     +                     + DEFERRED_TAXES_DR
     +                     + BTL_DEFERRED_TAXES_DR
     +                     + TOTAL_DEF_TAXES_CR
     +                     + TAX_CREDITS
     +                     - STD_INTEREST_CASH_PAYMENT
     +                     - LTD_INTEREST_CASH_PAYMENTS ! CASH INTEREST PAYMENTS
     +                     + DIVIDEND_FROM_SUBSIDIARY
     +                     + TAXES_PAID_BY_PARENT
     +                     + TAX_PAYMENTS_2_PARENT_FROM_SUB
     +                     - INCOME_TAXES_CONSOLIDATED
     +                     - CATAWBA_LEVEL_CAP_PAYMENTS
     +                     - NON_CASH_ATL_REVENUES
C     +                     + CASH_TIMING_ADJUSTMENTS ! 8/26/04
     +                     + ANNUAL_CASH_FLOW_TIMING_ADJUSTMENTS ! 8/26/04
     +                     + INCOME_TAX_TIMING_ADJS

         FUNDS_FROM_OPERATIONS = GROSS_CASH_FLOW
     +                           - PS_DIVIDEND_CASH_PAYMENTS  ! PS DIVIDEND PAYMENTS
     +                           - COMMON_STOCK_CASH_DIVIDENDS ! COMMON_DIVIDENDS + 
     +                           + CASH_FROM_SALE_OF_ASSETS
     +                           + CIAC_CASH
     +                           + CUSTOMER_DEPOSITS
     +                           - VACATION_PAY_CASH
     +                           - PENSION_EXPENSE_CASH
     +                           - STORM_EXPENSE_CASH
     +                           - ExecBenefitsCash
     +                           - IncentiveCompensationCash
     +                           - LEASE_PRINCIPAL_PAYMENTS
     +                           - OTHER_PAYMENTS_TO_TRUST_FUNDS


         INVESTMENT_SALVAGE_OTHER = CASH_OTH_ASSET
     +                              + DSM_CAPITIAL
         CASH_2_LT_INVESTMENTS = CASH_2_LT_INVESTMENTS
     +                           + INVESTMENTS_MADE
     +                           - INVESTMENTS_SOLD
         CONSTRUCTION_AND_NET_INVESTMENT = FA_CASH
     +                                + NF_CASH
     +                                - CAPX_PENSION_ADJUSTMENT
     +                                + INVESTMENT_SALVAGE_OTHER
     +                                + NEW_SUBSIDIARY_INVESTMENT
     +                                + CAPITIALIZED_LEASE_ADDITIONS
     +                                + SALVAGE_TRANSACTIONS
     +                                + NEW_SUB_INVESTMENT 
     +                                + GOODWILL_OF_NEW_SUB_INVESTMENT
         CHANGE_IN_FUNDS_B4_FINANCING = FUNDS_FROM_OPERATIONS
     +                               - CONSTRUCTION_AND_NET_INVESTMENT
C    +                               - NUC_FUEL_LEASED_BURN   
     +                               - NUCL_DECOM_FUND
     +                               - CASH_2_LT_INVESTMENTS
     +                               - CHANGE_IN_WORKING_CAPITIAL
     +                               - LONG_TERM_DEBT_RETIREMENTS
     +                               - PREFERRED_STOCK_RETIREMENTS
     +                               - LTD_PS_ISSUE_EXPENSES
     +                               - COMMON_STOCK_BOUGHT
     +                               - DEFERRED_EXPENSE_CASH
     +                               - RATE_BASE_CASH_ADJ
     +                               - CATAWBA_OTHER_NET_REVENUES
     +                               - CASH_CHANGE_IN_NOTES_PAY_REC
     +                               - CASH_ADDS_2_INVENTORIES
     +                               - FASB143_ARO_CASH_PAYMENTS
     +                               - FASB143_ARO_TRUST_CASH_PAYMENTS
C         IF(SALT_RIVER_PROJECT()) THEN
C             CHANGE_IN_FUNDS_B4_FINANCING = CHANGE_IN_FUNDS_B4_FINANCING
C     +                                     - NET_OF_TAX_NUCL_FUND_RETURN
C         ENDIF
         LEASE_RECEIPTS = CAPITIALIZED_LEASE_ADDITIONS +
     +                    CLASS_LEASED_NFCE
c         COMMON_STOCK_ISSUED = COMMON_STOCK_ISSUED
c     +                         + COMMON_STOCK_BOUGHT
         EXTERNAL_FINANCING_PERFORMED = COMMON_STOCK_ISSUED
     +                                  + LONG_TERM_DEBT_ISSUED
     +                                  + PREFERRED_STOCK_ISSUED
     +                                  + SHORT_TERM_DEBT_ISSUED
     +                                  + LEASE_RECEIPTS   
         CHANGE_IN_CASH = EXTERNAL_FINANCING_PERFORMED
     +                    + CHANGE_IN_FUNDS_B4_FINANCING
C         GROSS_CASH_FLOW = FUNDS_FROM_OPERATIONS
C     +                     + PS_DIVIDEND_CASH_PAYMENTS  ! PS DIVIDEND PAYMENTS
C     +                     + COMMON_STOCK_CASH_DIVIDENDS ! COMMON_DIVIDENDS +
C     +                     - CASH_FROM_SALE_OF_ASSETS
C     +                     - CIAC_CASH
C     +                     - CUSTOMER_DEPOSITS
C     +                     + VACATION_PAY_CASH
C     +                     + PENSION_EXPENSE_CASH
C     +                     + STORM_EXPENSE_CASH
C     +                     + LEASE_PRINCIPAL_PAYMENTS
C     +                     + OTHER_PAYMENTS_TO_TRUST_FUNDS
         GROSS_CASH_FLOW_PER_AVE_SHARE =THE_RATIO_OF_A_TO_B(
     +                                   GROSS_CASH_FLOW,AVERAGE_SHARES)
         CBIDT = GROSS_CASH_FLOW
     +           + STD_INTEREST_CASH_PAYMENT
     +           + LTD_INTEREST_CASH_PAYMENTS ! CASH INTEREST PAYMENTS
         CBIDT_PER_AVE_SHARE = THE_RATIO_OF_A_TO_B(CBIDT,AVERAGE_SHARES)
         TOTAL_DEBT =  LONG_TERM_DEBT_BAL   ! LONG_TERM_DEBT(2,R_CLASS_POS)
     +                 + NOTES_PAYABLE_BALANCE
     +                 + SHORT_TERM_DEBT(2,R_CLASS_POS)
         GROSS_CASH_2_DEBT =
     +                 THE_PERCENT_OF_A_TO_B(GROSS_CASH_FLOW,TOTAL_DEBT) 
C        STI_CHANGE_IN_CASH = CHANGE_IN_CASH -
C    +                                   CHANGE_IN_LONG_TERM_INVESTMENTS
C        IF(LIQUID_INVESTMENTS(1,R_CLASS_POS)+STI_CHANGE_IN_CASH < 
C    +                                   MAX_SHORT_TERM_INVESTMENT) THEN
C           LIQUID_INVESTMENTS(2,R_CLASS_POS) =
C    +                               LIQUID_INVESTMENTS(1,R_CLASS_POS) +
C    +                               STI_CHANGE_IN_CASH
C        ELSE       
C           LIQUID_INVESTMENTS(2,R_CLASS_POS)=MAX_SHORT_TERM_INVESTMENT
C           CASH_2_LT_INVESTMENTS = STI_CHANGE_IN_CASH -
C    +                             (MAX_SHORT_TERM_INVESTMENT -
C    +                                LIQUID_INVESTMENTS(1,R_CLASS_POS))
C           CHANGE_IN_LONG_TERM_INVESTMENTS = CASH_2_LT_INVESTMENTS +
C    +                                   CHANGE_IN_LONG_TERM_INVESTMENTS
C        ENDIF
         CASH_BALANCE = LIQUID_INVESTMENTS(2,R_CLASS_POS)
         LT_INVESTMENTS = LONG_TERM_INVESTMENTS(R_CLASS_POS) +
     +                    DEBT_FILE_INVESTMENTS(R_CLASS_POS)
         CLASS_DEFERRED_PURCHASE_POWER =
     +                            DEFERRED_PURCHASE_POWER(2,R_CLASS_POS)
         CLASS_PENSION_LIABILITY = PENSION_LIABILITY(2,R_CLASS_POS)
         CLASS_DEFERRED_GAIN_FROM_SALES =
     +                           DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS)
         CLASS_STORM_RESERVE_BALANCE =
     +                              STORM_RESERVE_BALANCE(2,R_CLASS_POS)
         Class_ExecBenefits_Balance = ExecBenefitsBalance(2,R_CLASS_POS)
         Class_IncentiveComp_Balance=IncentiveCompBalance(2,R_CLASS_POS)
         CLASS_VACATION_PAY_BALANCE =
     +                       ACCRUED_VACATION_PAY_BALANCE(2,R_CLASS_POS)
         OTHER_DEFERRED_CREDITS_BAL_EOY =
     +                 OTHER_DEFERRED_CREDITS_BAL(2,R_CLASS_POS)
     +                 + BALANCE_SHEET_ROLLUPS(2,Other Deferred Credits,
     +                                                      CLASS_LEVEL)
         REGULATORY_DEFERRED_CREDITS_BAL_EOY =
     +            REGULATORY_DEFERRED_CREDITS_BAL(2,R_CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(2,Regulatory Deferred Credits,
     +                                                      CLASS_LEVEL)
         GAIN_ON_REAQUIRED_DEBT_BAL_EOY =
     +                   GAIN_ON_REAQUIRED_DEBT_BAL(2,R_CLASS_POS)
     +                   + BALANCE_SHEET_ROLLUPS(2,Reaquired Debt Gain ,
     +                                                      CLASS_LEVEL)
C
         TOTAL_DEFERRED_CREDITS_BAL = 
     +                           DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS)
     +                           + CIAC_BALANCE(2,R_CLASS_POS)
     +                           + DEF_TAX_CR_BALANCE(2,R_CLASS_POS)
     +                           + DEF_ITC_BALANCE(2,R_CLASS_POS)
     +                           + OTHER_DEFERRED_CREDITS_BAL_EOY      ! 712
     +                           + REGULATORY_DEFERRED_CREDITS_BAL_EOY ! 711
     +                           + GAIN_ON_REAQUIRED_DEBT_BAL_EOY      ! 710
         TOTAL_LIABILITIES = REARNC(2,R_CLASS_POS)
     +                     + COMMON_STOCK(2,R_CLASS_POS)
     +                     + CLASS_OCI_BALANCE
     +                     + PREFERRED_STOCK_BAL ! PREFERRED_STOCK(2,R_CLASS_POS)
     +                     + LONG_TERM_DEBT_BAL ! LONG_TERM_DEBT(2,R_CLASS_POS)
     +                     + OTHER_LT_LIABILITY(2,R_CLASS_POS)
     +                     + FASB143_ARO_LIABLILITY_BAL
     +                     + NOTES_PAYABLE_BALANCE
     +                     + SHORT_TERM_DEBT(2,R_CLASS_POS)
     +                     + CUSTOMER_DEPOSITS_BAL(2,R_CLASS_POS)
     +                     + PENSION_LIABILITY(2,R_CLASS_POS)
     +                     + STORM_RESERVE_BALANCE(2,R_CLASS_POS)
     +                     + ExecBenefitsBalance(2,R_CLASS_POS)
     +                     + IncentiveCompBalance(2,R_CLASS_POS)
     +                     + ACCRUED_VACATION_PAY_BALANCE(2,R_CLASS_POS)
     +                     + RETIREMENT_MED_PAYABLE
     +                     + DECOM_FUND_LIABILITY
     +                     + CLASS_ACCOUNTS_PAYABLE
     +                     + TOTAL_DEFERRED_CREDITS_BAL 
     +                     + LIABILITIES_NEC
         TOTAL_ASSETS = NET_UTILITY_PLANT(2,R_CLASS_POS)
C    +                  + NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)
     +                  + OTHER_ASSETS(2,R_CLASS_POS)
     +                  + SUBSIDIARY_INVESTMENT  ! INVESTMENT_IN_SUBSIDIARIES(2,R_CLASS_POS)
     +                  + CAPITIALZIED_LEASES(2,R_CLASS_POS)
     +                  + NUC_DECOM_FUND_BAL(2,R_CLASS_POS)
     +                  + NET_DD_BALANCE(2,R_CLASS_POS)
     +                  + CUM_DEF_REVENUES(2,R_CLASS_POS)
     +                  + CUMTXNORM(2,R_CLASS_POS)
     +                  + NOTES_RECEIVABLE_BALANCE
     +                  + LT_INVESTMENTS
     +                  + RETIREMENT_MEDICAL_FUND
     +                  + LIQUID_INVESTMENTS(2,R_CLASS_POS)
     +                  + CLASS_ACCOUNTS_RECEIVABLE
     +                  + CLASS_FUEL_INVENTORY
     +                  + CLASS_DEFERRED_FUEL_BALANCE
     +                  + CLASS_DEFERRED_PURCHASE_POWER
     +                  + ASSET_NEC 
     +                  + MATERIALS_N_SUPPLIES
     +                  + GAS_IN_STORAGE
     +                  + DEFERRED_PURCHASED_GAS
     +                  + FASB143_ARO_NET_ASSET_BAL
     +                  + CLASS_FASB87_BALANCE
C
C RATIOS
C
         TOTAL_CAPITIAL_BAL = TOTAL_CAPITIAL_BAL          
     +                                     + CLASS_OCI_BALANCE
         TOTAL_EQUITY_WITH_OCI = CLASS_OCI_BALANCE ! 730
     +                           + COMMON_EQUITY(2,R_CLASS_POS) 
      ENTRY CONSOLIDATED_RATIOS
         IF(IPALCO() .AND. ABS(TOTAL_CAPITIAL_BAL
     +         + SHORT_TERM_DEBT_BAL + CLASS_OCI_BALANCE) > .00001) THEN
  
            CAPITAL_MULTIPILER = 100./(TOTAL_CAPITIAL_BAL
     +                                 + SHORT_TERM_DEBT_BAL)
            COMMON_EQUITY_BAL_IN_CAP = CAPITAL_MULTIPILER  *
     +                           (COMMON_EQUITY_BAL + CLASS_OCI_BALANCE)                 
         ELSEIF(ABS(TOTAL_CAPITIAL_BAL+SHORT_TERM_DEBT_BAL)>.00001) THEN
            CAPITAL_MULTIPILER = 100./
     +                        (TOTAL_CAPITIAL_BAL + SHORT_TERM_DEBT_BAL)
            COMMON_EQUITY_BAL_IN_CAP = COMMON_EQUITY_BAL *
     +                                                CAPITAL_MULTIPILER
         ELSE
            CAPITAL_MULTIPILER = 0.
            COMMON_EQUITY_BAL_IN_CAP = 0.
         ENDIF
         PREFERRED_STOCK_IN_CAP = PREFERRED_STOCK_BAL*CAPITAL_MULTIPILER
         LONG_TERM_DEBT_IN_CAP = LONG_TERM_DEBT_BAL * CAPITAL_MULTIPILER
         SHORT_TERM_DEBT_IN_CAP = SHORT_TERM_DEBT_BAL*CAPITAL_MULTIPILER
C
         IF(CONSTRUCTION_AND_NET_INVESTMENT /= 0.) THEN
            FUNDS_4_CONSTRUCTION = FUNDS_FROM_OPERATIONS/
     +                                   CONSTRUCTION_AND_NET_INVESTMENT
         ELSE
            FUNDS_4_CONSTRUCTION = 0.
         ENDIF
         GROSS_CASH_2_DEBT =
     +                 THE_PERCENT_OF_A_TO_B(GROSS_CASH_FLOW,TOTAL_DEBT) 
         EBITDA_2_DEBT = THE_PERCENT_OF_A_TO_B(EBITDA,TOTAL_DEBT) 
      RETURN
C **********************************************************************
      ENTRY SET_NON_EQUIVALENCED_VARIABLES
C **********************************************************************
C
         VARIABLE(2) = SECONDARY_SALES_REVENUES
         VARIABLE(17) = BOOK_DEPRECIATION
         VARIABLE(19) = CIAC_AMORTIZATION


         IF(REALLY_KEPCO) THEN
            VARIABLE(18)=ATL_AMORTIZATION-KEPCO_WC_DEF_MAINT_ENRG_AMORT
         ELSE   
            VARIABLE(18) = ATL_AMORTIZATION
         ENDIF
         VARIABLE(60) = ATL_LEASE_AMORT_EXPENSE + ATL_LEASE_INTEREST ! + ATL_LEASE_PAYMENTS REMOVED 2/4/03 MSG
         VARIABLE(20) = TOTAL_EXPENSES_B4_TAXES
         VARIABLE(216) = ENVIRONMENTAL_TAX
         VARIABLE(217) = CLASS_PROPERTY_TAXES
         VARIABLE(23) = LOCAL_TAXES
         VARIABLE(25) = STATE_TAX_ON_CAPITAL
         VARIABLE(27) = FEDERAL_TAX_ON_CAPITAL
         VARIABLE(28) = DEFERRED_TAXES_DR
         VARIABLE(682) = DEFERRED_TAXES_CR ! - LTD_PS_DEFERRED_TAX_CR
         VARIABLE(32) = DEFERRED_REVENUES
         VARIABLE(33) = CLASS_BTL_REVENUES
         VARIABLE(34) = INVESTMENT_INCOME
         VARIABLE(35) = CLASS_BTL_EXPENSES
         VARIABLE(36) = BTL_INCOME_TAXES
         VARIABLE(300) = BTL_STATE_TAXES
         VARIABLE(302) = BTL_FEDERAL_TAXES
         VARIABLE(43) = SUBSIDIARY_INCOME
         VARIABLE(44) = NET_OF_TAX_EXEXP
         VARIABLE(46) = PREFERRED_DIVIDENDS
         VARIABLE(48) = COMMON_DIVIDENDS
         VARIABLE(49) = RETAINED_EARNINGS
         VARIABLE(54) = ABS(MARKET_2_BOOK)
         VARIABLE(56) = DIVIDEND_PER_SHARE
         VARIABLE(130) = INCOME_TAX_DEPRECIATION
         VARIABLE(133) = STATE_INCOME_TAX_DEDUCTIONS
         VARIABLE(212) = STATE_TAXES
         VARIABLE(141) = STATE_TAX_RATE
         VARIABLE(137) = FED_INCOME_TAX_DEDUCTIONS
         VARIABLE(211) = FEDERAL_TAXES
         VARIABLE(139) = AMTINCOME
C        VARIABLE(213) = FEDERAL_INCOME_TAX_RATE()
         VARIABLE(145) = ADDENDUM_2_RATE_BASE
         VARIABLE(101) = COMMON_STOCK_ISSUED
         VARIABLE(102) = LONG_TERM_DEBT_ISSUED
         VARIABLE(103) = PREFERRED_STOCK_ISSUED
         VARIABLE(106) = CASH_FROM_SALE_OF_ASSETS
         VARIABLE(113) = CIAC_CASH ! Contributions in Aid of Construction
         VARIABLE(126) = NEW_SUBSIDIARY_INVESTMENT ! Subsidiary equity additions
         VARIABLE(114) = CAPITIALIZED_LEASE_ADDITIONS ! Capital Leases
         VARIABLE(116) = LEASED_NF_BURN ! LeasedNuclearFuel Payments
         VARIABLE(117) = NUCL_DECOM_FUND ! Nuclear Decommissioning Fund Payment
C        VARIABLE(119) = LONG_TERM_DEBT_RETIREMENTS ! Debt and Preferred Stock Retirements
         VARIABLE(120) = COMMON_STOCK_BOUGHT ! Common Stock Buyback

C
C ADDED CATAWBA STUFF IN BODY OF PROGRAM 4/15/97
C
         VARIABLE(127) = DEFERRED_EXPENSE_CASH +
     +                   CATAWBA_OTHER_NET_REVENUES ! Deferred cash expense
C        VARIABLE(127) = DEFERRED_EXPENSE_CASH  
         VARIABLE(292) = BTL_AMORTIZATION
         VARIABLE(902) = BTL_DEF_TAXES_CR
         VARIABLE(903) = BTL_DEFERRED_TAXES_DR
         VARIABLE(294) = BTL_DEF_TAXES_CR + BTL_DEFERRED_TAXES_DR
         VARIABLE(904) = TOTAL_DEFERRED_TAXES_DR
C
C KEPCO STUFF 5/29/97
C
         VARIABLE(312) = KEPCO_WC_CURENT_MAINT_ENRG_COST +
     +                   KEPCO_WC_DEF_MAINT_ENRG_AMORT
         VARIABLE(313) = KEPCO_WC_CURENT_MAINT_ENRG_COST
         VARIABLE(314) = KEPCO_WC_DEF_MAINT_ENRG_AMORT
         VARIABLE(384) = INTEREST_AMORTIZATION      
C                                       
C EMISSIONS REPORT INFORMATION
C
c         VOID_LOGICAL = REPORT_CLASS_EMISSIONS_INFO(VARIABLE) !155 TO 208
      RETURN
C **********************************************************************
      ENTRY ZERO_NON_EQUIVALENT_VALUES
C **********************************************************************
C
         ENVIRONMENTAL_TAX = 0.
         CLASS_PROPERTY_TAXES = 0.
         LOCAL_TAXES = 0.
         STATE_TAX_ON_CAPITAL = 0.
         FEDERAL_TAX_ON_CAPITAL = 0.
         DEFERRED_TAXES_DR = 0.
         DEFERRED_TAXES_CR = 0.
         DEFERRED_REVENUES = 0.
         CLASS_BTL_REVENUES = 0.
         INVESTMENT_INCOME = 0.
         CLASS_BTL_EXPENSES = 0.
         BTL_INCOME_TAXES = 0.
         SUBSIDIARY_INCOME = 0.
         NET_OF_TAX_EXEXP = 0.
         PREFERRED_DIVIDENDS = 0.
         COMMON_DIVIDENDS = 0.
         RETAINED_EARNINGS = 0.
         INCOME_TAX_DEPRECIATION = 0.
         STATE_INCOME_TAX_DEDUCTIONS = 0.
         STATE_TAXES = 0.
         FED_INCOME_TAX_DEDUCTIONS = 0.
         FEDERAL_TAXES = 0.
         AMTINCOME = 0.
         ADDENDUM_2_RATE_BASE = 0.
         COMMON_STOCK_ISSUED = 0.
         LONG_TERM_DEBT_ISSUED = 0.
         PREFERRED_STOCK_ISSUED = 0.
         LEASED_NF_BURN = 0.
         NUCL_DECOM_FUND = 0.
         LONG_TERM_DEBT_RETIREMENTS = 0.
         COMMON_STOCK_BOUGHT = 0.
         DEFERRED_EXPENSE_CASH = 0.
         CAPITIALIZED_LEASE_ADDITIONS = 0.
         BTL_AMORTIZATION = 0.        
         BTL_DEF_TAXES_CR = 0.       
         BTL_DEFERRED_TAXES_DR = 0.   
         TOTAL_DEFERRED_TAXES_DR = 0. 
      RETURN
C***********************************************************************
c      ENTRY SBU_2_SBU_ADJUSTMENTS_BY(R_CLASS_POS)
C***********************************************************************
C
C        LIQUID_INVESTMENTS(2,R_CLASS_POS) = SBU_VARIABLES(74) +
C    +                                 LIQUID_INVESTMENTS(2,R_CLASS_POS)
C        LONG_TERM_INVESTMENTS(R_CLASS_POS) = SBU_VARIABLES(289) +
C    +                                LONG_TERM_INVESTMENTS(R_CLASS_POS)
C        COMMON_STOCK(2,R_CLASS_POS) = SBU_VARIABLES(77) +
C    +                                       COMMON_STOCK(2,R_CLASS_POS)
C        REARNC(2,R_CLASS_POS) = SBU_VARIABLES(78) +
C    +                                             REARNC(2,R_CLASS_POS)
C        COMMON_EQUITY(2,R_CLASS_POS) = SBU_VARIABLES(79) +
C    +                                      COMMON_EQUITY(2,R_CLASS_POS)
C        PREFERRED_STOCK(2,R_CLASS_POS) = SBU_VARIABLES(80) +
C    +                                    PREFERRED_STOCK(2,R_CLASS_POS)
C        LONG_TERM_DEBT(2,R_CLASS_POS) = SBU_VARIABLES(81) +
C    +                                     LONG_TERM_DEBT(2,R_CLASS_POS)
C***********************************************************************
      ENTRY SBU_2_PARENT_ADJUSTMENTS(R_CLASS_POS,BASE_YEAR_ACTIVE)
C***********************************************************************
C
      IF(BASE_YEAR_ACTIVE) THEN
         DEF_TAX_CR_BALANCE(2,R_CLASS_POS) = SBU_VARIABLES(87) + 
     +                                 DEF_TAX_CR_BALANCE(2,R_CLASS_POS)
         DEF_ITC_BALANCE(2,R_CLASS_POS) = SBU_VARIABLES(88) + 
     +                                    DEF_ITC_BALANCE(2,R_CLASS_POS)
         NUC_DECOM_FUND_BAL(2,R_CLASS_POS) = SBU_VARIABLES(70) + 
     +                                 NUC_DECOM_FUND_BAL(2,R_CLASS_POS)
         CIAC_BALANCE(2,R_CLASS_POS) = SBU_VARIABLES(86) + 
     +                                       CIAC_BALANCE(2,R_CLASS_POS)
         CAPITIALZIED_LEASES(2,R_CLASS_POS) = SBU_VARIABLES(92) + 
     +                                CAPITIALZIED_LEASES(2,R_CLASS_POS)
         OTHER_ASSETS(2,R_CLASS_POS) = SBU_VARIABLES(69) +
     +                                       OTHER_ASSETS(2,R_CLASS_POS)
         NUC_DECOM_FUND_LIABILITY(R_CLASS_POS) = SBU_VARIABLES(288) +
     +                             NUC_DECOM_FUND_LIABILITY(R_CLASS_POS)
         POST_RETIREMENT_MEDICAL_FUND(R_CLASS_POS) = SBU_VARIABLES(286)+
     +                         POST_RETIREMENT_MEDICAL_FUND(R_CLASS_POS)
         ACCOUNTS_PAYABLE(R_CLASS_POS) = SBU_VARIABLES(389) +
     +                                     ACCOUNTS_PAYABLE(R_CLASS_POS)
         ACCOUNTS_RECEIVABLE(R_CLASS_POS) = SBU_VARIABLES(390) +
     +                                  ACCOUNTS_RECEIVABLE(R_CLASS_POS)
         FUEL_INVENTORY(R_CLASS_POS) = SBU_VARIABLES(391) +
     +                                       FUEL_INVENTORY(R_CLASS_POS)
         CLASS_MATERIALS_N_SUPPLIES(R_CLASS_POS) =
     +                           CLASS_MATERIALS_N_SUPPLIES(R_CLASS_POS)
     +                           + SBU_VARIABLES(469)
         CLASS_GAS_STORAGE(R_CLASS_POS) = CLASS_GAS_STORAGE(R_CLASS_POS)
     +                                    + SBU_VARIABLES(468)
         CLASS_DEFERRED_PURCHASE_GAS(R_CLASS_POS) =
     +                          CLASS_DEFERRED_PURCHASE_GAS(R_CLASS_POS)
     +                          + SBU_VARIABLES(467)
         DEFERRED_FUEL_BALANCE(R_CLASS_POS) = SBU_VARIABLES(392) + ! need to add to the base year
     +                                DEFERRED_FUEL_BALANCE(R_CLASS_POS)
         POST_RETIREMENT_MED_PAYABLE(R_CLASS_POS) = SBU_VARIABLES(287) +
     +                          POST_RETIREMENT_MED_PAYABLE(R_CLASS_POS)
C
C
         DEFERRED_PURCHASE_POWER(2,R_CLASS_POS) = SBU_VARIABLES(410)
     +                          + DEFERRED_PURCHASE_POWER(2,R_CLASS_POS)
         PENSION_LIABILITY(2,R_CLASS_POS) = SBU_VARIABLES(411)
     +                                + PENSION_LIABILITY(2,R_CLASS_POS)
         DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS) = SBU_VARIABLES(412)
     +                         + DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS)
         STORM_RESERVE_BALANCE(2,R_CLASS_POS) = SBU_VARIABLES(413)
     +                            + STORM_RESERVE_BALANCE(2,R_CLASS_POS)
         ExecBenefitsBalance(2,R_CLASS_POS) = SBU_VARIABLES(905)
     +                              + ExecBenefitsBalance(2,R_CLASS_POS)
         IncentiveCompBalance(2,R_CLASS_POS) = SBU_VARIABLES(906)
     +                             + IncentiveCompBalance(2,R_CLASS_POS) 
         ACCRUED_VACATION_PAY_BALANCE(2,R_CLASS_POS)=SBU_VARIABLES(414)
     +                     + ACCRUED_VACATION_PAY_BALANCE(2,R_CLASS_POS)
         RB_INCLUDE_DEFERRED_TAX_DR(2,R_CLASS_POS) = SBU_VARIABLES(415)
     +                       + RB_INCLUDE_DEFERRED_TAX_DR(2,R_CLASS_POS)
         RB_INCLUDE_DEFERRED_REVENUES(2,R_CLASS_POS)=SBU_VARIABLES(416)
     +                     + RB_INCLUDE_DEFERRED_REVENUES(2,R_CLASS_POS)
         RB_EXCLUDED_PENSION_LIABILITY(2,R_CLASS_POS)=SBU_VARIABLES(417)
     +                    + RB_EXCLUDED_PENSION_LIABILITY(2,R_CLASS_POS)
         RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,R_CLASS_POS) =
     +                  SBU_VARIABLES(418)
     +                  + RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,R_CLASS_POS)
         RB_EXCLUDED_STORM_RESERVE(2,R_CLASS_POS) = SBU_VARIABLES(419)
     +                        + RB_EXCLUDED_STORM_RESERVE(2,R_CLASS_POS)
         RB_EXCLUDE_ACCRUED_VACATION_PAY(2,R_CLASS_POS) =
     +                  SBU_VARIABLES(420)
     +                  + RB_EXCLUDE_ACCRUED_VACATION_PAY(2,R_CLASS_POS)
c         FASB143_ARO_NET_ASSET_BAL = SBU_VARIABLES(636)
c     +                          + FASB143_NET_ASSET_VALUE(2,R_CLASS_POS)
c         FASB143_ARO_LIABLILITY_BAL = SBU_VARIABLES(637)
c     +                       + FASB143_LT_LIABILITY_VALUE(2,R_CLASS_POS)
C
      ENDIF
C***********************************************************************
C      ENTRY SBU_2_PARENT_ADJUSTMENTS(R_CLASS_POS)
C***********************************************************************
C
c        CLASS_DEFERRED_FUEL_BALANCE = SBU_VARIABLES(392) + ! 10/17 out for testing
c    +                                DEFERRED_FUEL_BALANCE(R_CLASS_POS)
         FASB143_ARO_NET_ASSET_BAL = ! SBU_VARIABLES(636)
     +             FASB143_NET_ASSET_VALUE(2,R_CLASS_POS)
     +             + BALANCE_SHEET_ROLLUPS(2,ARO Net Assets,CLASS_LEVEL)
         CLASS_GPV(2,R_CLASS_POS) = CLASS_GPV(2,R_CLASS_POS) +
     +                              SBU_VARIABLES(63)  ! SBU GPV WITH NUC LIAB
C    +                            - SBU_VARIABLES(288) ! SBU NUC LIAB            
         CLASS_CWIP(2,R_CLASS_POS) = SBU_VARIABLES(64)
     +                               + CLASS_CWIP(2,R_CLASS_POS)
         CLASS_CUMULATIVE_DEPRECIATION(2,R_CLASS_POS) =
     +                                               SBU_VARIABLES(66) + 
     +                      CLASS_CUMULATIVE_DEPRECIATION(2,R_CLASS_POS)
         NET_DD_BALANCE(2,R_CLASS_POS) = NET_DD_BALANCE(2,R_CLASS_POS)
     +                                   + SBU_VARIABLES(71)
     +                                   - SBU_VARIABLES(628)
         CLASS_REGULATORY_ASSETS = SBU_VARIABLES(463)
     +                             + CLASS_REGULATORY_ASSETS
         FASB_109 = SBU_VARIABLES(464) + FASB_109
         FASB_133 = SBU_VARIABLES(465) + FASB_133
         CAPX_PENSION_ADJUSTMENT = CAPX_PENSION_ADJUSTMENT
     +                             + SBU_VARIABLES(734)
         OTHER_DD_BALANCE(2,R_CLASS_POS) = SBU_VARIABLES(466)
     +                                 + OTHER_DD_BALANCE(2,R_CLASS_POS)
         GOODWILL(2,R_CLASS_POS) = GOODWILL(2,R_CLASS_POS)
     +                             + SBU_VARIABLES(462)
         CLASS_NET_NF_VALUE(2,R_CLASS_POS) = SBU_VARIABLES(67) + 
     +                                 CLASS_NET_NF_VALUE(2,R_CLASS_POS)
         CUM_DEF_REVENUES(2,R_CLASS_POS) = SBU_VARIABLES(72) + 
     +                                   CUM_DEF_REVENUES(2,R_CLASS_POS)
         OTHER_LT_LIABILITY(2,R_CLASS_POS) = SBU_VARIABLES(83) + 
     +                                 OTHER_LT_LIABILITY(2,R_CLASS_POS)
c         DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS) = SBU_VARIABLES(412)
c     +                         + DEFERRED_GAIN_FROM_SALES(2,R_CLASS_POS)
         CUSTOMER_DEPOSITS_BAL(2,R_CLASS_POS) = SBU_VARIABLES(85) +
     +                              CUSTOMER_DEPOSITS_BAL(2,R_CLASS_POS)
         CUM_DEF_TAX_RATEBASE(2,R_CLASS_POS) = SBU_VARIABLES(144) + 
     +                               CUM_DEF_TAX_RATEBASE(2,R_CLASS_POS)
C        DEFERRED_DEBITS_RATE_BASE(2,R_CLASS_POS) = SBU_VARIABLES(146)+
C     +                          DEFERRED_DEBITS_RATE_BASE(2,R_CLASS_POS)
         NUC_FUEL_RATE_BASE(2,R_CLASS_POS) = SBU_VARIABLES(369) + 
     +                                 NUC_FUEL_RATE_BASE(2,R_CLASS_POS)
C        NUC_FUEL_RATE_BASE(2,R_CLASS_POS) =
C    +                              NUC_FUEL_RATE_BASE_AT(CLASS_LEVEL) + 
C    +                                 NUC_FUEL_RATE_BASE(2,R_CLASS_POS)
C        NUC_FUEL_RATE_BASE_AT(CLASS_LEVEL) = 0.
         CWIP_IN_RATE_BASE(2,R_CLASS_POS) = SBU_VARIABLES(370) + 
     +                                  CWIP_IN_RATE_BASE(2,R_CLASS_POS)
C        CWIP_IN_RATE_BASE(2,R_CLASS_POS) =
C    +                               CWIP_IN_RATE_BASE_AT(CLASS_LEVEL) + 
C    +                                  CWIP_IN_RATE_BASE(2,R_CLASS_POS)
C        CWIP_IN_RATE_BASE_AT(CLASS_LEVEL) = 0.
         CUM_ITC_DEF_RATEBASE(2,R_CLASS_POS) = SBU_VARIABLES(149) + 
     +                               CUM_ITC_DEF_RATEBASE(2,R_CLASS_POS)
         NUC_DECOM_RATE_BASE(2,R_CLASS_POS) = SBU_VARIABLES(150) + 
     +                                NUC_DECOM_RATE_BASE(2,R_CLASS_POS)
         IF(MONTHLY_MIDAS_ACTIVE)
     +                CIAC_RATE_BASE(2,R_CLASS_POS) = SBU_VARIABLES(151)
     +                                   + CIAC_RATE_BASE(2,R_CLASS_POS)
         CAPITIALIZED_LEASES_RATE_BASE(2,R_CLASS_POS) =
     +                    CAPITIALIZED_LEASES_RATE_BASE(2,R_CLASS_POS) +
     +                                                SBU_VARIABLES(153)
         NF_IN_PROCESS(2,R_CLASS_POS) = SBU_VARIABLES(254) + 
     +                                      NF_IN_PROCESS(2,R_CLASS_POS)
C
C        (2,R_CLASS_POS) = SBU_VARIABLES()
C    +                     + (2,R_CLASS_POS)
      RETURN
C***********************************************************************
      ENTRY CALCULATE_RATE_BASE(R_YR)
C***********************************************************************
C
c         RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS) =
c     +                                STORM_RESERVE_BALANCE(2,CLASS_POS)
c         RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS) = 
c     +                         ACCRUED_VACATION_PAY_BALANCE(2,CLASS_POS)
         RB_EXCLUDED_PENSION_LIABILITY(2,CLASS_POS) =
     +                         RB_EXCLUDED_PENSION_LIABILITY_RATE *
     +                                    PENSION_LIABILITY(2,CLASS_POS)
         CUM_ITC_DEF_RATEBASE(2,CLASS_POS) =
     +                              RBITC * DEF_ITC_BALANCE(1,CLASS_POS)
         CUM_DEF_TAX_RATEBASE(2,CLASS_POS) =
     +                          RBDFTX * DEF_TAX_CR_BALANCE(2,CLASS_POS)
         NUC_DECOM_RATE_BASE(2,CLASS_POS) = NUC_DEOM_FUND_RATEBASE *
     +                                   NUC_DECOM_FUND_BAL(2,CLASS_POS)
         CIAC_RATE_BASE(2,CLASS_POS) = CIAC_EXCLUDED_FROM_RATEBASE *
     +                                       CIAC_BALANCE(2,CLASS_POS) +
     +                                DEPOSITS_EXCLUDED_FROM_RATEBASE *
     +                                CUSTOMER_DEPOSITS_BAL(2,CLASS_POS)
         PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS)=CLASS_GPV(2,CLASS_POS)-
     +                        CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS)
         CAPITIALIZED_LEASES_RATE_BASE(2,CLASS_POS) =
     +           CAP_LEASES_IN_RATEBASE*CAPITIALZIED_LEASES(2,CLASS_POS)
         ASSET_NEC_IN_RATE_BASE(2,CLASS_POS)=RBANEC*(WCCUM(1,CLASS_POS)+
     +                                               LINEC(1,CLASS_POS))

         RB_INCLUDE_DEFERRED_TAX_DR(2,CLASS_POS) =
     +                    RB_INCLUDED_DEF_TAXES_DR_RATE *               ! 155
     +                                            CUMTXNORM(2,CLASS_POS)
         RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,CLASS_POS) =
     +                    RB_EXCLUDED_Deferred_Gain_RATE *              ! 157
     +                           DEFERRED_GAIN_FROM_SALES(2,CLASS_POS)
         RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS) =
     +                    RB_EXCLUDED_Storm_Reserve_RATE *              ! 158
     +                              STORM_RESERVE_BALANCE(2,CLASS_POS)
         RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS) =
     +                    RB_EXCLUDED_Accrued_Vacation_Pay_RATE *       ! 159
     +                       ACCRUED_VACATION_PAY_BALANCE(2,CLASS_POS)
         RB_INCLUDE_DEFERRED_REVENUES(2,CLASS_POS) =
     +                    RB_INCLUDED_DEFERRED_REVENUES_RATE *          ! 160
     +                                   CUM_DEF_REVENUES(2,CLASS_POS)

         RATE_BASE(2,CLASS_POS)=PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS)
     +                  + DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
     +                  - DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS)
     +                  + NUC_FUEL_RATE_BASE(2,CLASS_POS)
     +                  + CWIP_IN_RATE_BASE(2,CLASS_POS)
     +                  + NUC_DECOM_RATE_BASE(2,CLASS_POS)
     +                  + RB_INCLUDE_DEFERRED_TAX_DR(2,CLASS_POS)
     +                  + RB_INCLUDE_DEFERRED_REVENUES(2,CLASS_POS)
     +                  - CUM_DEF_TAX_RATEBASE(2,CLASS_POS)
     +                  - CUM_ITC_DEF_RATEBASE(2,CLASS_POS)
     +                  - CIAC_RATE_BASE(2,CLASS_POS)
     +                  - RB_EXCLUDED_PENSION_LIABILITY(2,CLASS_POS)
     +                  - RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,CLASS_POS)
     +                  - RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS)
     +                  - RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS)
     +                  + ASSET_NEC_IN_RATE_BASE(2,CLASS_POS)
C
         IF(INDEX('Ending',RATEBASE_VALUATION) /= 0) THEN   
            ASSET_CLASS_RATE_BASE = RATE_BASE(2,CLASS_POS)
            RATE_BASE_PLANT_IN_SERVICE =
     +                           PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS)
            RATE_BASE_DEF_TAXES = CUM_DEF_TAX_RATEBASE(2,CLASS_POS)
            RATE_BASE_DEFERRED_DEBITS =
     +                            DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS)
            RATE_BASE_DEFERRED_CREDITS =
     +                        DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS)
            IF(AFUDC_RETURN_POLICY == '2') THEN
               RATE_BASE_NUC_FUEL = NUC_FUEL_RATE_BASE(2,CLASS_POS) +
     +                              NF_IN_PROCESS(2,CLASS_POS)
               RATE_BASE_CWIP = CLASS_CWIP(2,CLASS_POS)
            ELSE
               RATE_BASE_NUC_FUEL = NUC_FUEL_RATE_BASE(2,CLASS_POS)
               RATE_BASE_CWIP = CWIP_IN_RATE_BASE(2,CLASS_POS)
            ENDIF
            RATE_BASE_DEF_ITC = CUM_ITC_DEF_RATEBASE(2,CLASS_POS)
            RATE_BASE_NUC_DECOM = NUC_DECOM_RATE_BASE(2,CLASS_POS)
            RATE_BASE_CIAC = CIAC_RATE_BASE(2,CLASS_POS)
            RATE_BASE_ASSET_NEC = ASSET_NEC_IN_RATE_BASE(2,CLASS_POS)
            RATE_BASE_CAPITIALIZED_LEASES =
     +                        CAPITIALIZED_LEASES_RATE_BASE(2,CLASS_POS)
            CLASS_RB_DEFERRED_TAX_DR =
     +                           RB_INCLUDE_DEFERRED_TAX_DR(2,CLASS_POS)
            CLASS_RB_DEFERRED_REVENUES =
     +                         RB_INCLUDE_DEFERRED_REVENUES(2,CLASS_POS)
            CLASS_RB_PENSION_LIABILITY =
     +                        RB_EXCLUDED_PENSION_LIABILITY(2,CLASS_POS)
            CLASS_RB_DEFERRED_ASSET_GAIN =
     +                      RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,CLASS_POS)
            CLASS_RB_STORM_RESERVE =
     +                            RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS)
            CLASS_RB_ACCRUED_VACATION_PAY =
     +                      RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS)
         ELSEIF(INDEX('Opening',RATEBASE_VALUATION) /= 0) THEN   
            ASSET_CLASS_RATE_BASE = RATE_BASE(1,CLASS_POS)
            RATE_BASE_PLANT_IN_SERVICE =
     +                           PLANT_IN_SERVICE_RATE_BASE(1,CLASS_POS)
            RATE_BASE_DEF_TAXES = CUM_DEF_TAX_RATEBASE(1,CLASS_POS)
            RATE_BASE_DEFERRED_DEBITS =
     +                            DEFERRED_DEBITS_RATE_BASE(1,CLASS_POS)
            RATE_BASE_DEFERRED_CREDITS =
     +                        DEFERRED_CREDITS_IN_RATE_BASE(1,CLASS_POS)
            IF(AFUDC_RETURN_POLICY == '2') THEN
               RATE_BASE_NUC_FUEL = NUC_FUEL_RATE_BASE(1,CLASS_POS) +
     +                              NF_IN_PROCESS(1,CLASS_POS)
               RATE_BASE_CWIP = CLASS_CWIP(1,CLASS_POS)
            ELSE
               RATE_BASE_NUC_FUEL = NUC_FUEL_RATE_BASE(1,CLASS_POS)
               RATE_BASE_CWIP = CWIP_IN_RATE_BASE(1,CLASS_POS)
            ENDIF
            RATE_BASE_DEF_ITC = CUM_ITC_DEF_RATEBASE(1,CLASS_POS)
            RATE_BASE_NUC_DECOM = NUC_DECOM_RATE_BASE(1,CLASS_POS)
            RATE_BASE_CIAC = CIAC_RATE_BASE(1,CLASS_POS)
            RATE_BASE_ASSET_NEC = ASSET_NEC_IN_RATE_BASE(1,CLASS_POS)
            RATE_BASE_CAPITIALIZED_LEASES =
     +                        CAPITIALIZED_LEASES_RATE_BASE(1,CLASS_POS)
            CLASS_RB_DEFERRED_TAX_DR =
     +                           RB_INCLUDE_DEFERRED_TAX_DR(1,CLASS_POS)
            CLASS_RB_DEFERRED_REVENUES =
     +                         RB_INCLUDE_DEFERRED_REVENUES(1,CLASS_POS)
            CLASS_RB_PENSION_LIABILITY =
     +                        RB_EXCLUDED_PENSION_LIABILITY(1,CLASS_POS)
            CLASS_RB_DEFERRED_ASSET_GAIN =
     +                      RB_EXCLUDED_DEFERRED_ASSET_GAIN(1,CLASS_POS)
            CLASS_RB_STORM_RESERVE =
     +                            RB_EXCLUDED_STORM_RESERVE(1,CLASS_POS)
            CLASS_RB_ACCRUED_VACATION_PAY =
     +                    RB_EXCLUDE_ACCRUED_VACATION_PAY(1,CLASS_POS)
         ELSE ! IF(INDEX('Average',RATEBASE_VALUATION) /= 0) THEN
            ASSET_CLASS_RATE_BASE = (RATE_BASE(1,CLASS_POS) +
     +                                        RATE_BASE(2,CLASS_POS))/2.
            RATE_BASE_PLANT_IN_SERVICE =
     +                      (PLANT_IN_SERVICE_RATE_BASE(1,CLASS_POS)+
     +                       PLANT_IN_SERVICE_RATE_BASE(2,CLASS_POS))/2.
            RATE_BASE_DEF_TAXES = (CUM_DEF_TAX_RATEBASE(1,CLASS_POS) +
     +                             CUM_DEF_TAX_RATEBASE(2,CLASS_POS))/2.
            RATE_BASE_DEFERRED_DEBITS =
     +                       (DEFERRED_DEBITS_RATE_BASE(1,CLASS_POS) +
     +                        DEFERRED_DEBITS_RATE_BASE(2,CLASS_POS))/2.
            RATE_BASE_DEFERRED_CREDITS =
     +                 (DEFERRED_CREDITS_IN_RATE_BASE(1,CLASS_POS)
     +                  + DEFERRED_CREDITS_IN_RATE_BASE(2,CLASS_POS))/2.
            IF(AFUDC_RETURN_POLICY == '2') THEN
               RATE_BASE_NUC_FUEL = (NUC_FUEL_RATE_BASE(1,CLASS_POS) +
     +                                    NF_IN_PROCESS(1,CLASS_POS) +
     +                               NUC_FUEL_RATE_BASE(2,CLASS_POS) +
     +                                    NF_IN_PROCESS(2,CLASS_POS))/2.
               RATE_BASE_CWIP = (CLASS_CWIP(1,CLASS_POS) +
     +                                       CLASS_CWIP(2,CLASS_POS))/2.
            ELSE
               RATE_BASE_NUC_FUEL = (NUC_FUEL_RATE_BASE(1,CLASS_POS) +
     +                               NUC_FUEL_RATE_BASE(2,CLASS_POS))/2.
               RATE_BASE_CWIP = (CWIP_IN_RATE_BASE(1,CLASS_POS) +
     +                                CWIP_IN_RATE_BASE(2,CLASS_POS))/2.
            ENDIF
            RATE_BASE_DEF_ITC = (CUM_ITC_DEF_RATEBASE(1,CLASS_POS) +
     +                             CUM_ITC_DEF_RATEBASE(2,CLASS_POS))/2.
            RATE_BASE_NUC_DECOM = (NUC_DECOM_RATE_BASE(1,CLASS_POS) +
     +                              NUC_DECOM_RATE_BASE(2,CLASS_POS))/2.
            RATE_BASE_CIAC = (CIAC_RATE_BASE(1,CLASS_POS) +
     +                                   CIAC_RATE_BASE(2,CLASS_POS))/2.
            RATE_BASE_ASSET_NEC = (ASSET_NEC_IN_RATE_BASE(1,CLASS_POS) +
     +                           ASSET_NEC_IN_RATE_BASE(2,CLASS_POS))/2.
            RATE_BASE_CAPITIALIZED_LEASES =
     +                   (CAPITIALIZED_LEASES_RATE_BASE(1,CLASS_POS) +
     +                    CAPITIALIZED_LEASES_RATE_BASE(2,CLASS_POS))/2.
            CLASS_RB_DEFERRED_TAX_DR =
     +                    (RB_INCLUDE_DEFERRED_TAX_DR(1,CLASS_POS)
     +                     + RB_INCLUDE_DEFERRED_TAX_DR(2,CLASS_POS))/2.
            CLASS_RB_DEFERRED_REVENUES =
     +                  (RB_INCLUDE_DEFERRED_REVENUES(1,CLASS_POS)
     +                   + RB_INCLUDE_DEFERRED_REVENUES(2,CLASS_POS))/2.
            CLASS_RB_PENSION_LIABILITY =
     +                 (RB_EXCLUDED_PENSION_LIABILITY(1,CLASS_POS)
     +                  + RB_EXCLUDED_PENSION_LIABILITY(2,CLASS_POS))/2.
            CLASS_RB_DEFERRED_ASSET_GAIN =
     +               (RB_EXCLUDED_DEFERRED_ASSET_GAIN(1,CLASS_POS)
     +                + RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,CLASS_POS))/2.
            CLASS_RB_STORM_RESERVE =
     +                     (RB_EXCLUDED_STORM_RESERVE(1,CLASS_POS)
     +                      + RB_EXCLUDED_STORM_RESERVE(2,CLASS_POS))/2.
            CLASS_RB_ACCRUED_VACATION_PAY =
     +               (RB_EXCLUDE_ACCRUED_VACATION_PAY(1,CLASS_POS)
     +                + RB_EXCLUDE_ACCRUED_VACATION_PAY(2,CLASS_POS))/2.
         ENDIF
         ASSET_CLASS_RATE_BASE = ASSET_CLASS_RATE_BASE +
     +                                              ADDENDUM_2_RATE_BASE
      RETURN
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C                           R I N I T                                  C
C        Copyright (c) 1982 M.S. Gerber & Associates, Inc.             C
C                      All Rights Reserved                             C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C                                                                      C
C     Purpose:  This subroutine reads the initialization file and      C
C               converts percent values to fractions.                  C
C                                                                      C
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
C
C
C***********************************************************************
      ENTRY READ_CLASS_INITIALIZATION_FILE
C***********************************************************************
C
         IREC = 0
         PARENT_HAS_LINKED_SBUS = .FALSE.
         PARENT_HAS_LINKED_SUBS = .FALSE.
         CALL OPEN_INITIZATION_FILE
         CALL GET_MAX_LINKED_SBUS(MAX_LINKED_CLASSES,MAX_INIT_CLASS_NUM)
         IF(ALLOCATED(LINKED_TO)) DEALLOCATE(LINKED_TO)
         ALLOCATE(SBU_LINKED_LIST(-1:1024,0:MAX_LINKED_CLASSES))
         ALLOCATE(LINKED_TO(0:MAX_INIT_CLASS_NUM))
         IF(ALLOCATED(LINKED_TO_COMPANY)) DEALLOCATE(LINKED_TO_COMPANY)
         ALLOCATE(LINKED_TO_COMPANY(0:MAX_INIT_CLASS_NUM))
         SBU_LINKED_LIST = -99
         LINKED_TO = 0
         LINKED_TO_COMPANY = -99
         IF(.NOT. ALLOCATED(SUBs_LINKED_TO_PARENT))
     +                          ALLOCATE(SUBs_LINKED_TO_PARENT(-1:1024))
         SUBs_LINKED_TO_PARENT = 0
         ELIMINAITON_CLASS_ID_NUM = 1024
         SUBs_LINKED_TO_PARENT(0) = ELIMINAITON_CLASS_ID_NUM
         CALL PARENT_CLASS_ID(PARENT_CLASS_ID_NUM)
         PARENT_CLASS_ID_NUM = PARENT_CLASS_ID_NUM + 1
         SUBs_LINKED_TO_PARENT(1) = PARENT_CLASS_ID_NUM
         DEFINED_CLASSES = 1
         CONSOLID_AVAILABLE_AMT_CREDITS = 0.
         NUM_OF_SUBSIDIARIES = 0
         NUM_OF_BUSINESS_UNITS = 0
         NUM_OF_REGULATED_UNITS = 0
         NUMBER_OF_REPORTING_CLASSES = 1
         SUBS_LINKED_2_PARENT = 0
      DO
         IREC = IREC + 1
         READ(10,REC=IREC,IOSTAT=IOS) DELETE,INT_ASSET_CLASS_NAME,
     +                                ASSET_CLASS_ID,ASSET_CLASS_TYPE,
     +                                ASSET_CLASS_TYPE_STR,
     +                                LINKED_CLASS_ID,REPORT_THIS_CLASS,
     +                                MOVE_TO_CLASS_ID,
     +                                ACCOUNT_ACTIVE
         IF(IOS /= 0) EXIT
         IF(DELETE >= 8 .OR. ACCOUNT_ACTIVE == 'N' .OR.
     +                                    ASSET_CLASS_TYPE == 'N') CYCLE
         IF(ASSET_CLASS_ID >= 0) ASSET_CLASS_ID = ASSET_CLASS_ID + 1 !=ADDED 6/6/95
         IF(LINKED_CLASS_ID >= 0) LINKED_CLASS_ID = LINKED_CLASS_ID + 1 !=ADDED 6/6/95
         IF(ASSET_CLASS_TYPE == 'C') THEN ! CONSOLIDATING
            IS_CONSOLIDATING_CLASS = .TRUE.
            ASSET_CLASS_TYPE = 'S'
         ELSE
            IS_CONSOLIDATING_CLASS = .FALSE.
         ENDIF
         IF(ASSET_CLASS_TYPE == 'E') THEN !ELIMINATION
            INIT_CLASS = 0
            ELIMINAITON_CLASS_ID_NUM = ASSET_CLASS_ID
            SUBs_LINKED_TO_PARENT(0) = ELIMINAITON_CLASS_ID_NUM
            REPORT_THIS_CLASS = 'N'
         ELSE
            IF(ASSET_CLASS_TYPE == PARENT) THEN
C              PARENT_CLASS_ID_NUM = ASSET_CLASS_ID
C              SUBs_LINKED_TO_PARENT(1) = PARENT_CLASS_ID_NUM
            ELSE
               IF(ASSET_CLASS_TYPE /= 'C') THEN
                  IF(LINKED_CLASS_ID < 0 .OR.
     +                           LINKED_CLASS_ID == ASSET_CLASS_ID) THEN
                     WRITE(4,*) "*** STOP at line 10232 "//
     +                           "       READ_CLASS_INITIALIZATION_FILE"
                     WRITE(4,*) '*** Class ',INT_ASSET_CLASS_NAME
                     WRITE(4,*) 'is linked to itself or has an invalid'
                     WRITE(4,*) 'link number'
                     WRITE(4,*) 'Class ID ',ASSET_CLASS_ID-1
                     WRITE(4,*) ' linked to ID ',LINKED_CLASS_ID-1 
                     er_message='See WARNING MESSAGES -msgmmsb6.for-1'
                     call end_program(er_message)
                  ENDIF
               ENDIF
               IF(ASSET_CLASS_TYPE == SUBSIDIARY) THEN
                  NUM_OF_SUBSIDIARIES = NUM_OF_SUBSIDIARIES + 1
                  LINKED_TO(ASSET_CLASS_ID) = LINKED_CLASS_ID
                  IF(LINKED_CLASS_ID == PARENT_CLASS_ID_NUM) THEN
                     SUBS_LINKED_2_PARENT = SUBS_LINKED_2_PARENT + 1
                     SUBs_LINKED_TO_PARENT(SUBS_LINKED_2_PARENT+1) =
     +                                                    ASSET_CLASS_ID
                     PARENT_HAS_LINKED_SUBS = .TRUE.
                  ELSE
                     IF(LINKED_CLASS_ID >= 0) THEN
                        IF(SBU_LINKED_LIST(LINKED_CLASS_ID,0)==-99) THEN
                           SBU_LINKED_LIST(LINKED_CLASS_ID,0) = 1
                        ENDIF
                        LINK_POS = SBU_LINKED_LIST(LINKED_CLASS_ID,0)
                        SBU_LINKED_LIST(LINKED_CLASS_ID,LINK_POS) =
     +                                                    ASSET_CLASS_ID
                        SBU_LINKED_LIST(LINKED_CLASS_ID,0) = 1 +
     +                                SBU_LINKED_LIST(LINKED_CLASS_ID,0)
                     ENDIF
                  ENDIF
               ELSE
                  IF(ASSET_CLASS_TYPE == SBU) THEN
                     NUM_OF_BUSINESS_UNITS = NUM_OF_BUSINESS_UNITS + 1
                  ELSE
                     NUM_OF_REGULATED_UNITS = NUM_OF_REGULATED_UNITS + 1
                     NUM_OF_BUSINESS_UNITS = NUM_OF_BUSINESS_UNITS + 1
                  ENDIF
                  LINKED_TO(ASSET_CLASS_ID) = LINKED_CLASS_ID
                  IF(LINKED_CLASS_ID == PARENT_CLASS_ID_NUM)
     +                                   PARENT_HAS_LINKED_SBUS = .TRUE.
                  IF(LINKED_CLASS_ID >= 0 .AND.
     +                           LINKED_CLASS_ID /= ASSET_CLASS_ID) THEN
                     IF(SBU_LINKED_LIST(LINKED_CLASS_ID,0) == -99) THEN
                        SBU_LINKED_LIST(LINKED_CLASS_ID,0) = 1
                     ENDIF
                     LINK_POS = SBU_LINKED_LIST(LINKED_CLASS_ID,0)
                     SBU_LINKED_LIST(LINKED_CLASS_ID,LINK_POS) =
     +                                                    ASSET_CLASS_ID
                     SBU_LINKED_LIST(LINKED_CLASS_ID,0) = 1 +
     +                                SBU_LINKED_LIST(LINKED_CLASS_ID,0)
                  ENDIF
               ENDIF
               IF(REPORT_THIS_CLASS == 'Y' .OR. REPORT_THIS_CLASS=='Z') 
     +                    NUMBER_OF_REPORTING_CLASSES = 
     +                                   NUMBER_OF_REPORTING_CLASSES + 1
               DEFINED_CLASSES = DEFINED_CLASSES + 1
            ENDIF
            INIT_CLASS = MASTER_CLASS_LIST(ASSET_CLASS_ID)
            IF(INIT_CLASS == 0 .AND. IREC  > 1) THEN
               CYCLE
            ENDIF
         ENDIF
         ACTIVATE_CLASS_IN_YEAR(INIT_CLASS) = 0
         YEAR_CLASS_DEACTIVATED(INIT_CLASS) = 0
         CLASS_NAME(INIT_CLASS) = INT_ASSET_CLASS_NAME
         CLASS_TYPE(INIT_CLASS) = ASSET_CLASS_TYPE
         LINKED_2_CLASS(INIT_CLASS) = LINKED_CLASS_ID
         REPORT_CLASS(INIT_CLASS) = REPORT_THIS_CLASS == 'Y' .OR.
     +                              REPORT_THIS_CLASS=='Z'
         CONSOLIDATING_CLASS(INIT_CLASS) = IS_CONSOLIDATING_CLASS
C
         READ(10,REC=IREC,IOSTAT=IOS) DELETE,INT_ASSET_CLASS_NAME,
     +          DELETE,
     +          ASSET_CLASS_TYPE,
     +          ASSET_CLASS_TYPE_STR,
     +          LINKED_CLASS_ID,REPORT_THIS_CLASS,
     +          MOVE_TO_CLASS_ID,
     +          ACCOUNT_ACTIVE,
     +          COMPANY_ID,
     +          OTHER_ASSETS(2,INIT_CLASS),
     +          CUMTXNORM(2,INIT_CLASS),
     +          CUM_DEF_REVENUES(2,INIT_CLASS),
     +          WCCUM(2,INIT_CLASS),
     +          DEF_ITC_BALANCE(2,INIT_CLASS),
     +          DEF_TAX_CR_BALANCE(2,INIT_CLASS),
     +          LINEC(2,INIT_CLASS),
     +          COMMON_STOCK(2,INIT_CLASS),
     +          COMMON_SHARES(2,INIT_CLASS),
     +          REARNC(2,INIT_CLASS),
     +          PREFERRED_STOCK(2,INIT_CLASS),
     +          LONG_TERM_DEBT(2,INIT_CLASS),
     +          SHORT_TERM_DEBT(2,INIT_CLASS),
     +          OTHER_LT_LIABILITY(2,INIT_CLASS),
     +          OPERATING_REVENUES(2,INIT_CLASS),
     +          STBOKLOSS(3),STBOKLOSS(2),STBOKLOSS(1),
     +          FDBKLOSS(3),FDBKLOSS(2),FDBKLOSS(1),
     +          LTDINT(0,INIT_CLASS),
     +          INTEREST_ON_SHORT_TERM_DEBT(2,INIT_CLASS),
     +          PSDIV(0,INIT_CLASS),
     +          RATE_REVENUE(0,INIT_CLASS),
     +          CUM_DEF_TAX_RATEBASE(2,INIT_CLASS),
     +          CUM_ITC_DEF_RATEBASE(2,INIT_CLASS),
     +          LIQUID_INVESTMENTS(2,INIT_CLASS),
     +          AVAILCREDIT(1,INIT_CLASS),
     +          NUC_DECOM_FUND_BAL(2,INIT_CLASS),
     +          DEFERRED_EXPENSE_BALANCE(2,INIT_CLASS),
     +          CUSTOMER_DEPOSITS_BAL(2,INIT_CLASS),
     +          WEIGHTED_COST_OF_CAPITAL_BY(INIT_CLASS),
     +          CIAC_BALANCE(2,INIT_CLASS),
     +          INIT_PLANNING_PEAK(1,INIT_CLASS),
     +          INIT_PLANNING_PEAK(2,INIT_CLASS),
     +          INIT_PLANNING_PEAK(3,INIT_CLASS),
     +          BY_ADJUSTMENT_2_ECONOMIC_ASSETS(INIT_CLASS),
     +          INVESTMENT_IN_SUBSIDIARIES(2,INIT_CLASS),
     +          CAPITIALZIED_LEASES(2,INIT_CLASS),
     +          REGULATORY_ASSETS,  ! PLACEHOLDER
     +          NUC_DECOM_RATE_BASE(2,INIT_CLASS),
     +          CAPITIALIZED_LEASES_RATE_BASE(2,INIT_CLASS),
     +          CIAC_RATE_BASE(2,INIT_CLASS),
     +          ASSET_NEC_IN_RATE_BASE(2,INIT_CLASS),
     +          CLASS_ADDENDUM_2_RATE_BASE(INIT_CLASS),
     +          POST_RETIREMENT_MEDICAL_FUND(INIT_CLASS),
     +          POST_RETIREMENT_MED_PAYABLE(INIT_CLASS),
     +          NUC_DECOM_FUND_LIABILITY(INIT_CLASS),
     +          LONG_TERM_INVESTMENTS(INIT_CLASS),
     +          TOTAL_CAPITAL,
     +          STOCK_PRICE_YEAR_END(2,INIT_CLASS),
     +          CURRENCY_DENOMINATION(INIT_CLASS),
     +          FED_TAX_EXEMPT(INIT_CLASS),
     +          YEAR_CLASS_DEACTIVATED(INIT_CLASS),
     +          ACTIVATE_CLASS_IN_YEAR(INIT_CLASS),
     +          ACCOUNTS_RECEIVABLE(INIT_CLASS),
     +          ACCOUNTS_PAYABLE(INIT_CLASS),
     +          COMMON_DIVIDEND_PAYMENT(INIT_CLASS),
     +          FUEL_INVENTORY(INIT_CLASS),
     +          DEFERRED_FUEL_BALANCE(INIT_CLASS), ! 71
     +          PENSION_LIABILITY(2,INIT_CLASS),
     +          DEFERRED_GAIN_FROM_SALES(2,INIT_CLASS),
     +          STORM_RESERVE_BALANCE(2,INIT_CLASS),
     +          ACCRUED_VACATION_PAY_BALANCE(2,INIT_CLASS),
     +          RB_INCLUDE_DEFERRED_TAX_DR(2,INIT_CLASS),
     +          RB_INCLUDE_DEFERRED_REVENUES(2,INIT_CLASS),
     +          RB_EXCLUDED_PENSION_LIABILITY(2,INIT_CLASS),
     +          RB_EXCLUDED_DEFERRED_ASSET_GAIN(2,INIT_CLASS),
     +          RB_EXCLUDED_STORM_RESERVE(2,INIT_CLASS),
     +          RB_EXCLUDE_ACCRUED_VACATION_PAY(2,INIT_CLASS),
     +          CLASS_MATERIALS_N_SUPPLIES(INIT_CLASS),
     +          CLASS_GAS_STORAGE(INIT_CLASS),
     +          CLASS_DEFERRED_PURCHASE_GAS(INIT_CLASS),
     +          DEFERRED_PURCHASE_POWER(2,INIT_CLASS),
     +          ACQUISITION_PREMIUM(INIT_CLASS),
     +          FASB143_NET_ASSET_VALUE(2,INIT_CLASS),
     +          FASB143_LT_LIABILITY_VALUE(2,INIT_CLASS),
     +          PROPERTY_TAX_BASIS(2,INIT_CLASS),  ! 91 BASE YEAR
     +          PROPERTY_TAX_BASIS(1,INIT_CLASS),  ! 92 BY-1 
     +          STD_INTEREST_VECTOR(INIT_CLASS),
     +          LTD_INTEREST_VECTOR(INIT_CLASS),
     +          PS_DIVIDENDS_VECTOR(INIT_CLASS),
     +          STI_INTEREST_VECTOR(INIT_CLASS),
     +          LTI_INTEREST_VECTOR(INIT_CLASS),
     +          CUSTOMER_DEPOSIT_INTREST_VECTOR(INIT_CLASS),
     +          DECOM_FUND_INTEREST_VECTOR(INIT_CLASS),
     +          RETIREMENT_FUND_INTEREST_VECTOR(INIT_CLASS),
     +          CURRENCY_CONVERSION_VECTOR(INIT_CLASS),   ! 101
     +          FASB_87_INTANGIBLE_ASSETS(INIT_CLASS),
     +          OTHER_COMPREHENSIVE_INCOME_BALANCE(INIT_CLASS),  ! 103
     +          OPERATING_REVENUE_TAX_LAGGED_BASIS(INIT_CLASS),   ! 104
     +          ExecBenefitsBalance(2,INIT_CLASS),
     +          IncentiveCompBalance(2,INIT_CLASS)
C
         LINKED_TO_COMPANY(ASSET_CLASS_ID) = COMPANY_ID
         CLASS_NUC_DECOM_TRUST_BAL(INIT_CLASS) =
     +                                  NUC_DECOM_FUND_BAL(2,INIT_CLASS)
         CIAC_CLASS_BALANCE(INIT_CLASS) = CIAC_BALANCE(2,INIT_CLASS)
C
         YEAR_CLASS_DEACTIVATED(INIT_CLASS) = 
     +                       MAX(-1,YEAR_CLASS_DEACTIVATED(INIT_CLASS) -
     +                                                        BASE_YEAR)
         ACTIVATE_CLASS_IN_YEAR(INIT_CLASS) =
     +                       MAX(-1,ACTIVATE_CLASS_IN_YEAR(INIT_CLASS) -
     +                                                        BASE_YEAR)
         REPORT_ZEROS_4_CLASS(INIT_CLASS)=REPORT_THIS_CLASS == 'Z' .AND. 
     +                            ACTIVATE_CLASS_IN_YEAR(INIT_CLASS) > 1
         IF(CLASS_TYPE(INIT_CLASS) == PARENT) THEN
            YEAR_CLASS_DEACTIVATED(INIT_CLASS) = -1
            ACTIVATE_CLASS_IN_YEAR(INIT_CLASS) = -1
            PARENT_CASH_CS_DIVIDEND_PAYMENT =
     +                               COMMON_DIVIDEND_PAYMENT(INIT_CLASS)
            IF(FirstEnergy()) THEN
               UNMODELLED_SUBS_OWNED_BY_PARENT = 0.
            ELSE
               UNMODELLED_SUBS_OWNED_BY_PARENT =
     +                          INVESTMENT_IN_SUBSIDIARIES(2,INIT_CLASS)
            ENDIF
         ENDIF
C
C CALCULATED DOLLAR AMOUNTS FROM CAP STRUCTURE RATES 
C
         IF(COMMON_STOCK(2,INIT_CLASS) <= 1. .AND.
     +                             COMMON_STOCK(2,INIT_CLASS) > 0.) THEN
            COMMON_STOCK(2,INIT_CLASS) = COMMON_STOCK(2,INIT_CLASS) *
     +                                                     TOTAL_CAPITAL   
         ENDIF
         IF(REARNC(2,INIT_CLASS) <= 1. .AND.
     +                                   REARNC(2,INIT_CLASS) > 0.) THEN
            REARNC(2,INIT_CLASS) = REARNC(2,INIT_CLASS) * TOTAL_CAPITAL
         ENDIF
         IF(ASSET_CLASS_TYPE == 'E') THEN !ELIMINATION
            R_PREFERRED_STOCK_ISSUED = 0.
            R_LONG_TERM_DEBT_ISSUED = 0.
            R_INVESTMENT_IN_AFILLIATES = 0.
            R_LOANS_TO_AFILLIATES = 0.
            PS_PREM_BAL = 0.
            LTD_PREM_BAL = 0.
            PS_ISSUING_BAL = 0.
            LTD_ISSUING_BAL = 0.
         ELSE
            CALL DEBT_BASE_YEAR_INFO(ASSET_CLASS_ID,
     +                            R_PREFERRED_STOCK_ISSUED,
     +                            R_LONG_TERM_DEBT_ISSUED,
     +                            R_INVESTMENT_IN_AFILLIATES,
     +                            R_LOANS_TO_AFILLIATES,
     +                            PS_PREM_BAL,
     +                            LTD_PREM_BAL,
     +                            PS_ISSUING_BAL,
     +                            LTD_ISSUING_BAL)
         ENDIF
         OTHER_ASSETS(2,INIT_CLASS) = OTHER_ASSETS(2,INIT_CLASS)
     +                                + R_INVESTMENT_IN_AFILLIATES
     +                                + R_LOANS_TO_AFILLIATES
         IF(PREFERRED_STOCK(2,INIT_CLASS) <= 1. .AND.
     +                          PREFERRED_STOCK(2,INIT_CLASS) > 0.) THEN
            PREFERRED_STOCK_ADDENDUM(INIT_CLASS) = TOTAL_CAPITAL *
     +                                   PREFERRED_STOCK(2,INIT_CLASS) -
     +                                   R_PREFERRED_STOCK_ISSUED
         ELSE   
            IF(ASSET_CLASS_TYPE == SBU .OR.
     +                         ASSET_CLASS_TYPE == REGULATED_GROUP) THEN
               PREFERRED_STOCK_ADDENDUM(INIT_CLASS) =
     +                               MAX(PREFERRED_STOCK(2,INIT_CLASS) -
     +                                   R_PREFERRED_STOCK_ISSUED,0.)
            ELSE
               PREFERRED_STOCK_ADDENDUM(INIT_CLASS) =
     +                                     PREFERRED_STOCK(2,INIT_CLASS)
            ENDIF
         ENDIF
         PREFERRED_STOCK(2,INIT_CLASS) = R_PREFERRED_STOCK_ISSUED +
     +                            PREFERRED_STOCK_ADDENDUM(INIT_CLASS) +
     +                            PS_PREM_BAL ! - PS_ISSUING_BAL
         IF(LONG_TERM_DEBT(2,INIT_CLASS) <= 1. .AND.
     +                           LONG_TERM_DEBT(2,INIT_CLASS) > 0.) THEN
            LONG_TERM_DEBT_ADDENDUM(INIT_CLASS) = TOTAL_CAPITAL *
     +                                    LONG_TERM_DEBT(2,INIT_CLASS) -
     +                                    R_LONG_TERM_DEBT_ISSUED
         ELSE   
            IF(ASSET_CLASS_TYPE == SBU .OR.
     +                         ASSET_CLASS_TYPE == REGULATED_GROUP) THEN
               LONG_TERM_DEBT_ADDENDUM(INIT_CLASS) =
     +                                MAX(LONG_TERM_DEBT(2,INIT_CLASS) -
     +                                    R_LONG_TERM_DEBT_ISSUED,0.)
            ELSE
               LONG_TERM_DEBT_ADDENDUM(INIT_CLASS) =
     +                                      LONG_TERM_DEBT(2,INIT_CLASS)
            ENDIF
         ENDIF
         LONG_TERM_DEBT(2,INIT_CLASS) = R_LONG_TERM_DEBT_ISSUED
     +                             + LONG_TERM_DEBT_ADDENDUM(INIT_CLASS)
     +                             + LTD_PREM_BAL ! - LTD_ISSUING_BAL 
C
C     ADJUST ASSESTS NEC BY LIAB NEC TO GET WORKING CAPITAL
C
         WCCUM(2,INIT_CLASS) = WCCUM(2,INIT_CLASS) - LINEC(2,INIT_CLASS)
         COMMON_EQUITY(2,INIT_CLASS) = COMMON_STOCK(2,INIT_CLASS) +
     +                                              REARNC(2,INIT_CLASS)
         IF(COMMON_SHARES(2,INIT_CLASS) == 0.) THEN
C            COMMON_SHARES(2,INIT_CLASS) = .0001
            BOOK_VALUE_STOCK(2,INIT_CLASS) = COMMON_EQUITY(2,INIT_CLASS)
         ELSE
            BOOK_VALUE_STOCK(2,INIT_CLASS)=COMMON_EQUITY(2,INIT_CLASS)/
     +                                       COMMON_SHARES(2,INIT_CLASS)
         ENDIF
         SALES(1,INIT_CLASS) = RATE_REVENUE(0,INIT_CLASS)
         BDPAFC = 0.0
         FDBKINCO = FDBKLOSS(3)
         STBOKINCO = STBOKLOSS(3)
C
C     COMPUTE INITIAL PARAMETER VALUES FROM THE VALUES JUST READ
C
c$ifdefined(sbu_testing)
C
C SBU USING ANUALIZED LTD AND PS AS A % COST VS $M
C
         IF(LTDINT(0,INIT_CLASS) < 0.) THEN
            WEIGHTED_CLASS_LTD_COST(INIT_CLASS) =
     +                                    ABS(LTDINT(0,INIT_CLASS))/100.
            LTDINT(0,INIT_CLASS) = WEIGHTED_CLASS_LTD_COST(INIT_CLASS) *
     +                                      LONG_TERM_DEBT(2,INIT_CLASS)
         ELSE
            IF(LONG_TERM_DEBT(2,INIT_CLASS) /= 0. .AND.
     +                                   LTDINT(0,INIT_CLASS) > 0.) THEN
               WEIGHTED_CLASS_LTD_COST(INIT_CLASS)=LTDINT(0,INIT_CLASS)/
     +                                      LONG_TERM_DEBT(2,INIT_CLASS)
            ELSE
               WEIGHTED_CLASS_LTD_COST(INIT_CLASS) = 0.
            ENDIF      
         ENDIF
         IF(PSDIV(0,INIT_CLASS) < 0.) THEN
            WEIGHTED_CLASS_PS_COST(INIT_CLASS) =
     +                                    ABS(PSDIV(0,INIT_CLASS))/100.
            PSDIV(0,INIT_CLASS) = WEIGHTED_CLASS_PS_COST(INIT_CLASS) *
     +                                     PREFERRED_STOCK(2,INIT_CLASS)
         ELSE
            IF(PREFERRED_STOCK(2,INIT_CLASS) /= 0. .AND.
     +                                    PSDIV(0,INIT_CLASS) > 0.) THEN
               WEIGHTED_CLASS_PS_COST(INIT_CLASS)=PSDIV(0,INIT_CLASS)/
     +                                     PREFERRED_STOCK(2,INIT_CLASS)
            ELSE
               WEIGHTED_CLASS_PS_COST(INIT_CLASS) = 0.
            ENDIF      
         ENDIF
C
         IF(ASSET_CLASS_TYPE == 'P') THEN ! PARENT
            EMBEDDED_PARENT_LTD_COST=WEIGHTED_CLASS_LTD_COST(INIT_CLASS)
            EMBEDDED_PARENT_PS_COST = WEIGHTED_CLASS_PS_COST(INIT_CLASS)
            CONSOLID_AVAILABLE_AMT_CREDITS = AVAILCREDIT(1,INIT_CLASS) +
     +                                    CONSOLID_AVAILABLE_AMT_CREDITS
         ENDIF
C
         ANNINT(0,INIT_CLASS) = LTDINT(0,INIT_CLASS)+PSDIV(0,INIT_CLASS)
         ANN_PS_DIV(0,INIT_CLASS) = PSDIV(0,INIT_CLASS)
         ANN_LTD_INT(0,INIT_CLASS) = LTDINT(0,INIT_CLASS)
c$endif
      ENDDO
      CALL CLOSE_INIIZATION_FILE
      ALL_CLASS_BUSINESS_UNITS = NUM_OF_SUBSIDIARIES == 0 .AND.
     +                                         NUM_OF_BUSINESS_UNITS > 0
      ALL_CLASS_SUBSIDIARIES =  NUM_OF_SUBSIDIARIES > 0 .AND.
     +                                        NUM_OF_BUSINESS_UNITS == 0
      MIX_OF_SUBS_AND_BUSINESS_UNITS =  NUM_OF_SUBSIDIARIES > 0 .AND.
     +                                         NUM_OF_BUSINESS_UNITS > 0
C
C SAVE DEFINED CLASS POINTER LIST
C
      IF(ALLOCATED(DEFINED_CLASS_POINTER_LIST))
     +                            DEALLOCATE(DEFINED_CLASS_POINTER_LIST,
     +                                       CLASS_AT_LEVEL)
      ALLOCATE(DEFINED_CLASS_POINTER_LIST(-1:DEFINED_CLASSES))
      ALLOCATE(CLASS_LINKED_LEVEL(DEFINED_CLASSES))
      ALLOCATE(TEMP_LIST(DEFINED_CLASSES))
      ALLOCATE(TEMP_LIST2(DEFINED_CLASSES))
      ALLOCATE(TEMP_CLASS_LINKED_LEVEL(DEFINED_CLASSES))
      ALLOCATE(CLASS_AT_LEVEL(-1:DEFINED_CLASSES))
      CLASS_LINKED_LEVEL = 0
      TEMP_LIST = 0
      TEMP_LIST2 = 0
      L = -1
      CLASS_AT_LEVEL = 0
      DEFINED_CLASS_POINTER_LIST = 0
      DEFINED_CLASS_POINTER_LIST(-1) = SUBs_LINKED_TO_PARENT(-1)
      DEFINED_CLASS_POINTER_LIST(0) = SUBs_LINKED_TO_PARENT(0)
      CLASS_AT_LEVEL(-1) = 0
      CLASS_AT_LEVEL(0) = 0
      CLASSES_ASSIGNED = 0
      MAX_LINKED_LEVEL = 0
      LINKED_LEVEL = 0
      DO LINKS_2_PARENT = 1, SUBS_LINKED_2_PARENT+1
         I = 1 
         TEMP_LIST(I) = SUBs_LINKED_TO_PARENT(LINKS_2_PARENT)
         MORE_LEVELS = .FALSE.
         ID_NUM = TEMP_LIST(I)
         CLASS_LINKED_LEVEL(I) = LINKED_LEVEL ! 1
         LINKED_LEVEL = LINKED_LEVEL + 1 
         I = I + 1 
         IF(SBU_LINKED_LIST(ID_NUM,0) > 0) THEN
            SBU_LINKED_LIST(ID_NUM,0) = -98
            DO J = 1, MAX_LINKED_CLASSES 
               IF(SBU_LINKED_LIST(ID_NUM,J) < 0) EXIT
               TEMP_LIST(I) = SBU_LINKED_LIST(ID_NUM,J)
               CLASS_LINKED_LEVEL(I) = LINKED_LEVEL ! 2
               MORE_LEVELS = .TRUE.
               I = I + 1
            ENDDO
         ENDIF
         CLASSES_IN_LIST = I - 1
         IF(MORE_LEVELS) THEN
c           LINKED_LEVEL = 2 
            DOWHILE (MORE_LEVELS)
               MORE_LEVELS = .FALSE.
               DO I = 1, CLASSES_IN_LIST 
                  TEMP_LIST2(I) = TEMP_LIST(I)
                  TEMP_CLASS_LINKED_LEVEL(I) = CLASS_LINKED_LEVEL(I)
               ENDDO
               LINKED_LEVEL = LINKED_LEVEL + 1
               L = 1
               DO I = 1, CLASSES_IN_LIST
                  TEMP_LIST(L) = TEMP_LIST2(I)
                  CLASS_LINKED_LEVEL(L) = TEMP_CLASS_LINKED_LEVEL(I)
                  ID_NUM = TEMP_LIST2(I)
                  L = L + 1 
                  IF(SBU_LINKED_LIST(ID_NUM,0) > 0) THEN
                     SBU_LINKED_LIST(ID_NUM,0) = -98
                     DO J = 1, MAX_LINKED_CLASSES 
                        IF(SBU_LINKED_LIST(ID_NUM,J) < 0) EXIT
                        TEMP_LIST(L) = SBU_LINKED_LIST(ID_NUM,J)
                        CLASS_LINKED_LEVEL(L) = LINKED_LEVEL
                        L = L + 1
                     ENDDO
                     MORE_LEVELS = .TRUE.
                  ENDIF
               ENDDO
               CLASSES_IN_LIST = L - 1
            ENDDO
         ENDIF
         DO I = 1, CLASSES_IN_LIST
            CLASSES_ASSIGNED = CLASSES_ASSIGNED + 1
            DEFINED_CLASS_POINTER_LIST(CLASSES_ASSIGNED) = TEMP_LIST(I)
            CLASS_AT_LEVEL(CLASSES_ASSIGNED) = CLASS_LINKED_LEVEL(I)
            MAX_LINKED_LEVEL = MAX(MAX_LINKED_LEVEL,
     +                                 CLASS_AT_LEVEL(CLASSES_ASSIGNED))
         ENDDO
         LINKED_LEVEL = 1
      ENDDO
      DEALLOCATE(TEMP_LIST,SBU_LINKED_LIST,TEMP_LIST2,
     +           CLASS_LINKED_LEVEL,TEMP_CLASS_LINKED_LEVEL)
      RETURN
C***********************************************************************
c      ENTRY CATAWBA_BY_DEF_TAXES_BAL(CATAWBA_DEFERRED_TAXES_BAL_CR)
C***********************************************************************
c        TXDEFC(1) = TXDEFC(1) ! + CATAWBA_DEFERRED_TAXES_BAL_CR        
c      RETURN
C***********************************************************************   
      ENTRY CLASS_LINKED_TO(R_CLASS,R_LINKED_CLASS)
C***********************************************************************
         R_LINKED_CLASS = LINKED_TO(R_CLASS)
      RETURN
C***********************************************************************
      ENTRY CLASS_BELONGS_TO_COMPANY(R_CLASS,R_LINKED_CLASS)
C***********************************************************************
         IF(R_CLASS < 1) THEN
            R_LINKED_CLASS = 1
         ELSE
            R_LINKED_CLASS = LINKED_TO_COMPANY(R_CLASS)
         ENDIF
      RETURN
C***********************************************************************   
      ENTRY CLASS_LINKED_TO_PARENT(R_CLASS,R_CLASS_IS_LINKED_TO_PARENT)
C***********************************************************************
         R_CLASS_IS_LINKED_TO_PARENT =
     +                         LINKED_TO(R_CLASS) == PARENT_CLASS_ID_NUM
      RETURN
C***********************************************************************
      ENTRY CLASS_ACTIVATE_IN_YR(R_CLASS,R_ACTIVATE_YR,R_MO_ACTIVE)
C***********************************************************************
         IF(R_CLASS > 0) THEN
            CLASS_POS = MASTER_CLASS_LIST(R_CLASS)
            R_ACTIVATE_YR = ACTIVATE_CLASS_IN_YEAR(CLASS_POS)
         ELSE
            R_ACTIVATE_YR = -1
         ENDIF
         R_ACTIVATE_YR = -1
         R_MO_ACTIVE = 1
      RETURN
C***********************************************************************
      ENTRY CLASS_DEACTIVATE_IN_YR(R_CLASS,R_DEACTIVE_YR,R_MO_DEACT)
C***********************************************************************
         R_DEACTIVE_YR = 199
         R_MO_DEACT = 13
         return
c         IF(R_CLASS > 0) THEN
c            CLASS_POS = MASTER_CLASS_LIST(R_CLASS)
c            R_DEACTIVE_YR = YEAR_CLASS_DEACTIVATED(CLASS_POS)
c            IF(R_DEACTIVE_YR <= 0) R_DEACTIVE_YR = 199
c         ELSE
c            R_DEACTIVE_YR = 199
c         ENDIF
c         R_DEACTIVE_YR = 199
c         R_MO_DEACT = 13
c      RETURN
C***********************************************************************
      ENTRY MOVE_BALANCE_SHEET_ITEMS()
C***********************************************************************
         DO I = 1, 2
            IF(CLASS_TYPE(CLASS_POS) /= SUBSIDIARY .AND.
     +           .NOT. DONT_TALLY_THIS_CLASS .AND. CLASS_LEVEL > 0) THEN
               BALANCE_SHEET_ROLLUPS(I,ARO Net Assets,CLASS_LEVEL-1) =
     +             BALANCE_SHEET_ROLLUPS(I,ARO Net Assets,CLASS_LEVEL-1)
     +             + FASB143_NET_ASSET_VALUE(I,CLASS_POS)
     +             + BALANCE_SHEET_ROLLUPS(I,ARO Net Assets,CLASS_LEVEL)
               BALANCE_SHEET_ROLLUPS(I,ARO Liabilities,CLASS_LEVEL-1) =
     +            BALANCE_SHEET_ROLLUPS(I,ARO Liabilities,CLASS_LEVEL-1)
     +            + FASB143_LT_LIABILITY_VALUE(I,CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(I,ARO Liabilities,CLASS_LEVEL)

               BALANCE_SHEET_ROLLUPS(I,Other Deferred Credits,
     +                                                  CLASS_LEVEL-1) =
     +                 BALANCE_SHEET_ROLLUPS(I,Other Deferred Credits,
     +                                                    CLASS_LEVEL-1)
     +                 + OTHER_DEFERRED_CREDITS_BAL(I,CLASS_POS)
     +                 + BALANCE_SHEET_ROLLUPS(I,Other Deferred Credits,
     +                                                      CLASS_LEVEL)
               BALANCE_SHEET_ROLLUPS(I,Regulatory Deferred Credits,
     +                                                  CLASS_LEVEL-1) =
     +            BALANCE_SHEET_ROLLUPS(I,Regulatory Deferred Credits,
     +                                                    CLASS_LEVEL-1)
     +            + REGULATORY_DEFERRED_CREDITS_BAL(I,CLASS_POS)
     +            + BALANCE_SHEET_ROLLUPS(I,Regulatory Deferred Credits,
     +                                                      CLASS_LEVEL)
               BALANCE_SHEET_ROLLUPS(I,Reaquired Debt Gain,
     +                                                  CLASS_LEVEL-1) =
     +                    BALANCE_SHEET_ROLLUPS(I,Reaquired Debt Gain,
     +                                                    CLASS_LEVEL-1)
     +                    + GAIN_ON_REAQUIRED_DEBT_BAL(I,CLASS_POS)
     +                    + BALANCE_SHEET_ROLLUPS(I,Reaquired Debt Gain,
     +                                                      CLASS_LEVEL)

            ENDIF
C ZERO LOWER LEVEL
            BALANCE_SHEET_ROLLUPS(I,ARO Net Assets,CLASS_LEVEL) = 0.
            BALANCE_SHEET_ROLLUPS(I,ARO Liabilities,CLASS_LEVEL) = 0.
            BALANCE_SHEET_ROLLUPS(I,Other Deferred Credits,
     +                                                 CLASS_LEVEL) = 0.
            BALANCE_SHEET_ROLLUPS(I,Regulatory Deferred Credits,
     +                                                 CLASS_LEVEL) = 0.
            BALANCE_SHEET_ROLLUPS(I,Reaquired Debt Gain,
     +                                                 CLASS_LEVEL) = 0.
         END DO
      RETURN
C***********************************************************************   
      ENTRY ASSET_CLASS_PROPERTY_TAXES
C***********************************************************************
C
C     PROPERTY TAX ON CONSTURCTION
C
         OPENING_BALANACE_4_PROPERTY_TAX =
     +                               PROPERTY_TAX_BASIS_VALUATION == 'O'
         CLOSING_BALANACE_4_PROPERTY_TAX = 
     +                               PROPERTY_TAX_BASIS_VALUATION == 'E'
         IF(WVPA()) CLOSING_BALANACE_4_PROPERTY_TAX = .TRUE.
         IF(IPALCO() .AND. IPALCO_PROPERTY_TAX)
     +                          CLOSING_BALANACE_4_PROPERTY_TAX = .TRUE.
C
         PROPERTY_VALUE = 0.
         IF(REAL_PROPERTY_TAX_VALUES()) THEN
            GPV_WITH_CWIP = PROPERTY_TAX_GPV +
     +              (CLASS_CWIP(2,CLASS_POS) + CLASS_CWIP(1,CLASS_POS)
     +                       + NFIS(2,CLASS_POS) + NFIS(1,CLASS_POS))/2.
            GPV_NO_CWIP = PROPERTY_TAX_GPV  
     +                      + (NFIS(2,CLASS_POS) + NFIS(1,CLASS_POS))/2.
            NPV_WITH_CWIP = PROPERTY_TAX_NPV +
     +             (CLASS_CWIP(2,CLASS_POS) + CLASS_CWIP(1,CLASS_POS)
     +                       + NFIS(2,CLASS_POS) + NFIS(1,CLASS_POS))/2.
            NPV_NO_CWIP = PROPERTY_TAX_NPV
     +                      + (NFIS(2,CLASS_POS) + NFIS(1,CLASS_POS))/2.
         ELSE
            IF(OPENING_BALANACE_4_PROPERTY_TAX) THEN
               GPV_NO_CWIP = CLASS_GPV(1,CLASS_POS)
               GPV_WITH_CWIP = GPV_NO_CWIP + CLASS_CWIP(1,CLASS_POS)
               NPV_NO_CWIP =  CLASS_GPV(1,CLASS_POS) -
     +                       CLASS_CUMULATIVE_DEPRECIATION(1,CLASS_POS)
               NPV_WITH_CWIP = NPV_NO_CWIP + CLASS_CWIP(1,CLASS_POS)
            ELSEIF(CLOSING_BALANACE_4_PROPERTY_TAX) THEN
               GPV_NO_CWIP = CLASS_GPV(2,CLASS_POS)
               GPV_WITH_CWIP = GPV_NO_CWIP + CLASS_CWIP(2,CLASS_POS)
               NPV_NO_CWIP =  CLASS_GPV(2,CLASS_POS) -
     +                       CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS)
               NPV_WITH_CWIP = NPV_NO_CWIP + CLASS_CWIP(2,CLASS_POS)
            ELSE ! AVERAGE
               GPV_NO_CWIP = (CLASS_GPV(2,CLASS_POS)
     +                        + CLASS_GPV(1,CLASS_POS))/2.
               GPV_WITH_CWIP = GPV_NO_CWIP
     +                        + (CLASS_CWIP(2,CLASS_POS)
     +                           + CLASS_CWIP(1,CLASS_POS))/2.
               NPV_NO_CWIP = (CLASS_GPV(2,CLASS_POS)
     +                  - CLASS_CUMULATIVE_DEPRECIATION(2,CLASS_POS)
     +                  + CLASS_GPV(1,CLASS_POS)
     +                  - CLASS_CUMULATIVE_DEPRECIATION(1,CLASS_POS))/2.
               NPV_WITH_CWIP = NPV_NO_CWIP
     +                         + (CLASS_CWIP(2,CLASS_POS)
     +                         + CLASS_CWIP(1,CLASS_POS))/2.
            ENDIF
         ENDIF
         IF(PROPERTY_TAX_METHOD == 1) PROPERTY_VALUE = GPV_WITH_CWIP
         IF(PROPERTY_TAX_METHOD == 2) PROPERTY_VALUE = GPV_NO_CWIP
         IF(PROPERTY_TAX_METHOD == 3) PROPERTY_VALUE = NPV_WITH_CWIP
         IF(PROPERTY_TAX_METHOD == 4) PROPERTY_VALUE = NPV_NO_CWIP
C
C WABASH VALLEY PROPERTY CALCULATION
C
         IF(WVPA()) THEN ! 2 year lag on tax basis
            TEMP_PROPERTY_VALUE = PROPERTY_TAX_BASIS(1,CLASS_POS)
            PROPERTY_TAX_BASIS(1,CLASS_POS) =
     +                                   PROPERTY_TAX_BASIS(2,CLASS_POS)
            PROPERTY_TAX_BASIS(2,CLASS_POS) = PROPERTY_VALUE
            PROPERTY_VALUE = TEMP_PROPERTY_VALUE 
         ENDIF
         IF(IPALCO() .AND. IPALCO_PROPERTY_TAX) THEN  ! 1 year lag on tax basis
            TEMP_PROPERTY_VALUE = PROPERTY_TAX_BASIS(2,CLASS_POS)
            PROPERTY_TAX_BASIS(1,CLASS_POS) =
     +                                   PROPERTY_TAX_BASIS(2,CLASS_POS)
            PROPERTY_TAX_BASIS(2,CLASS_POS) = PROPERTY_VALUE
            PROPERTY_VALUE = TEMP_PROPERTY_VALUE 
         ENDIF
         PROP_TAX_VALUE_B4_EXCLUSION = PROPERTY_VALUE ! /2.
         PROP_TAX_ADDENDUM = CLASS_ADDENDUM_TO_PROPERTY_TAX
         PROP_TAX_FROM_PRIOR_LEVEL =
     +                            EXCLUDED_SBU_PROPERTY_TAX(CLASS_LEVEL)
         PROP_TAX_RATE = PROPERTY_TAX_RATE
C        CLASS_PROPERTY_TAXES = PROPERTY_TAX_RATE/200.*PROPERTY_VALUE + 
C    +                                    CLASS_ADDENDUM_TO_PROPERTY_TAX
         IF(PROPERTY_TAX_METHOD == 1) PROP_TAX_VALUE_EXCLUSION =
     +                      PROPERTY_VALUE_GPV_WITH_CWIP(CLASS_LEVEL) ! /2.
         IF(PROPERTY_TAX_METHOD == 2) PROP_TAX_VALUE_EXCLUSION =
     +                        PROPERTY_VALUE_GPV_NO_CWIP(CLASS_LEVEL) ! /2.
         IF(PROPERTY_TAX_METHOD == 3) PROP_TAX_VALUE_EXCLUSION =
     +                      PROPERTY_VALUE_NPV_WITH_CWIP(CLASS_LEVEL) ! /2.
         IF(PROPERTY_TAX_METHOD == 4) PROP_TAX_VALUE_EXCLUSION = 
     +                        PROPERTY_VALUE_NPV_NO_CWIP(CLASS_LEVEL) ! /2.
                                         
         PROPERTY_VALUE = PROP_TAX_VALUE_B4_EXCLUSION
     +                    - PROP_TAX_VALUE_EXCLUSION             
         PROPERTY_TAXES_BASED_ON_VALUE = PROPERTY_TAX_RATE/100. *
     +                                   PROPERTY_VALUE
         CLASS_PROPERTY_TAXES = PROPERTY_TAXES_BASED_ON_VALUE
     +                          + CLASS_ADDENDUM_TO_PROPERTY_TAX
     +                          + EXCLUDED_SBU_PROPERTY_TAX(CLASS_LEVEL)
C
C THE LEVELS VALUES HAVE BEEN USED ZERO THEM OUT.
C
         PROPERTY_VALUE_GPV_WITH_CWIP(CLASS_LEVEL) = 0.
         PROPERTY_VALUE_GPV_NO_CWIP(CLASS_LEVEL) = 0.
         PROPERTY_VALUE_NPV_WITH_CWIP(CLASS_LEVEL) = 0.
         PROPERTY_VALUE_NPV_NO_CWIP(CLASS_LEVEL) = 0.
         EXCLUDED_SBU_PROPERTY_TAX(CLASS_LEVEL) = 0.
C
C TRACK NEXT LEVEL'S EXCLUSIONS
C
         IF(EXCLUDE_SBU_PROPERTY_TAX .AND. CLASS_LEVEL > 0 .AND.
     +          (CLASS_TYPE(CLASS_POS) == SBU .OR.
     +                   CLASS_TYPE(CLASS_POS) == REGULATED_GROUP)) THEN ! ASSET_CLASS_TYPE
            PROPERTY_VALUE_GPV_WITH_CWIP(CLASS_LEVEL-1) = GPV_WITH_CWIP
     +                     + PROPERTY_VALUE_GPV_WITH_CWIP(CLASS_LEVEL-1)
            PROPERTY_VALUE_GPV_NO_CWIP(CLASS_LEVEL-1)   = GPV_NO_CWIP
     +                       + PROPERTY_VALUE_GPV_NO_CWIP(CLASS_LEVEL-1)
            PROPERTY_VALUE_NPV_WITH_CWIP(CLASS_LEVEL-1) = NPV_WITH_CWIP
     +                     + PROPERTY_VALUE_NPV_WITH_CWIP(CLASS_LEVEL-1)
            PROPERTY_VALUE_NPV_NO_CWIP(CLASS_LEVEL-1)   = NPV_NO_CWIP
     +                       + PROPERTY_VALUE_NPV_NO_CWIP(CLASS_LEVEL-1)
            EXCLUDED_SBU_PROPERTY_TAX(CLASS_LEVEL-1) =
     +                        CLASS_PROPERTY_TAXES
     +                        + EXCLUDED_SBU_PROPERTY_TAX(CLASS_LEVEL-1)
         ENDIF
      RETURN
C***********************************************************************
C      ENTRY RETURN_ST_JOE_BASE_REVENUES(R_BASE_ELECTRIC_REVENEUS)
C***********************************************************************
C         R_BASE_ELECTRIC_REVENEUS = ST_JOE_BASE_ELECTRIC_REVENEUS
C      RETURN
C***********************************************************************
      ENTRY GET_MAX_CLASS_NUM(R_MAX_CLASS_NUM)
C***********************************************************************
         R_MAX_CLASS_NUM = MAX_CLASS_NUM
      RETURN
C***********************************************************************
      ENTRY GET_PROD_CLASS_NAME(R_CLASS,R_CLASS_NAME)
C***********************************************************************
         R_CLASS_NAME = CLASS_NAME(MASTER_CLASS_LIST(R_CLASS))
      RETURN
C     END
C***********************************************************************
      ENTRY CLASS_CAPITAL_RATES()
C***********************************************************************
C
         STD_MONTHLY_INTEREST_RATE = 0.
         STI_MONTHLY_INTEREST_RATE = 0.
         LTD_NEW_MONTHLY_INTEREST_RATE = 0.
         LTI_NEW_MONTHLY_INTEREST_RATE = 0.
         PS_NEW_MONTHLY_INTEREST_RATE = 0.
         MONTHLY_CUST_DEPOSITS_RATE = 0.
         MONTHLY_RETIREMENT_FUND_RATE = 0.
         MONTHLY_NUC_DECOM_RATE = 0.
C
         STD_RATE_AVAILABLE = .FALSE. 
         LTD_RATE_AVAILABLE = .FALSE.
         PS_RATE_AVAILABLE = .FALSE.
         STI_RATE_AVAILABLE = .FALSE.
         LTI_RATE_AVAILABLE = .FALSE.
         CUST_DEPOSITS_RATE_AVAILABLE = .FALSE.
         RETIREMENT_FUND_RATE_AVAILABLE = .FALSE.
         NUC_DECOM_RATE_AVAILABLE = .FALSE.
C
C MOVED FORM GET_PARAMETERS 6/29/04
C
         CALL RETURN_NEW_ISSUE_INTEREST_RATES(YEAR,CLASS,
     +                                  STD_INTEREST_RATE,
     +                                  RETURN_ON_ST_INVEST,
     +                                  INTEREST_ON_CUSTOMER_DEPOSITS,
     +                                  RETURN_ON_LONG_TERM_INVESTMENTS,
     +                                  RETURN_RETIREMENT_MEDICAL_FUND,
     +                                  NUCL_DECOM_FUND_RETURN,
     +                                  OCI_NUCL_DECOM_FUND_RETURN,
     +                                  OCI_RETURN_RETIREMENT_FUND)
C
         IF(STD_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                                   STD_INTEREST_VECTOR(CLASS_POS),
     +                                   MONTHLY_CAPITAL_VALUES,
     +                                   YR)
            IF(VECTOR_FOUND) THEN
               STD_FIRST_HALF_RATE = SUM(MONTHLY_CAPITAL_VALUES(1:6))/
     +                                                             1200.
               STD_SECOND_HALF_RATE = SUM(MONTHLY_CAPITAL_VALUES(7:12))/
     +                                                             1200.
               STD_MONTHLY_INTEREST_RATE = MONTHLY_CAPITAL_VALUES
               STD_RATE_AVAILABLE = .TRUE. 
            ELSE
               STD_FIRST_HALF_RATE = STD_INTEREST_RATE/2.
               STD_SECOND_HALF_RATE = STD_INTEREST_RATE/2.
            ENDIF
         ENDIF
C
         IF(LTD_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                                   LTD_INTEREST_VECTOR(CLASS_POS),
     +                                   MONTHLY_CAPITAL_VALUES,
     +                                   YR)
C
            IF(VECTOR_FOUND) THEN
               LTDRTE = SUM(MONTHLY_CAPITAL_VALUES(7:12))/600.
               LTD_NEW_MONTHLY_INTEREST_RATE = MONTHLY_CAPITAL_VALUES
               LTD_RATE_AVAILABLE = .TRUE. 
            ENDIF
         ENDIF
C
         IF(PS_DIVIDENDS_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                                   PS_DIVIDENDS_VECTOR(CLASS_POS),
     +                                   MONTHLY_CAPITAL_VALUES,
     +                                   YR)
C
            IF(VECTOR_FOUND) THEN
               PSRATE = SUM(MONTHLY_CAPITAL_VALUES(7:12))/600.
               PS_NEW_MONTHLY_INTEREST_RATE = MONTHLY_CAPITAL_VALUES
               PS_RATE_AVAILABLE = .TRUE. 
            ENDIF
         ENDIF
C
         STI_FIRST_HALF_RATE = RETURN_ON_ST_INVEST
         STI_SECOND_HALF_RATE = RETURN_ON_ST_INVEST
         IF(STI_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                                   STI_INTEREST_VECTOR(CLASS_POS),
     +                                   MONTHLY_CAPITAL_VALUES,
     +                                   YR)
            IF(VECTOR_FOUND) THEN
               STI_FIRST_HALF_RATE = SUM(MONTHLY_CAPITAL_VALUES(1:6))/
     +                                                              600.
               STI_SECOND_HALF_RATE = SUM(MONTHLY_CAPITAL_VALUES(7:12))/
     +                                                              600.
               STI_MONTHLY_INTEREST_RATE = MONTHLY_CAPITAL_VALUES
               STI_RATE_AVAILABLE = .TRUE. 
            ENDIF
         ENDIF
C
C
         LTI_FIRST_HALF_RATE = RETURN_ON_LONG_TERM_INVESTMENTS
         LTI_SECOND_HALF_RATE = RETURN_ON_LONG_TERM_INVESTMENTS
         IF(LTI_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                                   LTI_INTEREST_VECTOR(CLASS_POS),
     +                                   MONTHLY_CAPITAL_VALUES,
     +                                   YR)
            IF(VECTOR_FOUND) THEN
               LTI_FIRST_HALF_RATE = SUM(MONTHLY_CAPITAL_VALUES(1:6))/
     +                                                              600.
               LTI_SECOND_HALF_RATE = SUM(MONTHLY_CAPITAL_VALUES(7:12))/
     +                                                              600.
               LTI_NEW_MONTHLY_INTEREST_RATE = MONTHLY_CAPITAL_VALUES
               LTI_RATE_AVAILABLE = .TRUE. 
            ENDIF
         ENDIF
C
         CUST_DEPOSITS_FIRST_HALF_RATE =INTEREST_ON_CUSTOMER_DEPOSITS
         CUST_DEPOSITS_SECOND_HALF_RATE = INTEREST_ON_CUSTOMER_DEPOSITS
         IF(CUSTOMER_DEPOSIT_INTREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                       CUSTOMER_DEPOSIT_INTREST_VECTOR(CLASS_POS),
     +                       MONTHLY_CAPITAL_VALUES,YR)
            IF(VECTOR_FOUND) THEN
               CUST_DEPOSITS_FIRST_HALF_RATE =
     +                             SUM(MONTHLY_CAPITAL_VALUES(1:6))/600.
               CUST_DEPOSITS_SECOND_HALF_RATE =
     +                            SUM(MONTHLY_CAPITAL_VALUES(7:12))/600.
               MONTHLY_CUST_DEPOSITS_RATE = MONTHLY_CAPITAL_VALUES
               CUST_DEPOSITS_RATE_AVAILABLE = .TRUE.
            ENDIF
         ENDIF
C
C
         DECOM_FUND_FIRST_HALF_RATE = NUCL_DECOM_FUND_RETURN
         DECOM_FUND_SECOND_HALF_RATE = NUCL_DECOM_FUND_RETURN
         OCI_DECOM_FUND_FIRST_HALF_RATE = OCI_NUCL_DECOM_FUND_RETURN
         OCI_DECOM_FUND_SECOND_HALF_RATE = OCI_NUCL_DECOM_FUND_RETURN
         IF(DECOM_FUND_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                            DECOM_FUND_INTEREST_VECTOR(CLASS_POS),
     +                            MONTHLY_CAPITAL_VALUES,YR)
            IF(VECTOR_FOUND) THEN
               DECOM_FUND_FIRST_HALF_RATE =
     +                             SUM(MONTHLY_CAPITAL_VALUES(1:6))/600.
               DECOM_FUND_SECOND_HALF_RATE =
     +                            SUM(MONTHLY_CAPITAL_VALUES(7:12))/600.
               MONTHLY_NUC_DECOM_RATE = MONTHLY_CAPITAL_VALUES
               NUC_DECOM_RATE_AVAILABLE = .TRUE. 
            ENDIF
         ENDIF
C
         OCI_RETIREMENT_FUND_FIRST_HALF_RATE =
     +                                        OCI_RETURN_RETIREMENT_FUND
         OCI_RETIREMENT_FUND_SECND_HALF_RATE =
     +                                        OCI_RETURN_RETIREMENT_FUND
         RETIREMENT_FUND_FIRST_HALF_RATE =
     +                                    RETURN_RETIREMENT_MEDICAL_FUND
         RETIREMENT_FUND_SECND_HALF_RATE =
     +                                    RETURN_RETIREMENT_MEDICAL_FUND
         IF(RETIREMENT_FUND_INTEREST_VECTOR(CLASS_POS) >= 1) THEN
             CALL GET_CAP_RATES_4_CURRENT_YEAR(VECTOR_FOUND,
     +                       RETIREMENT_FUND_INTEREST_VECTOR(CLASS_POS),
     +                       MONTHLY_CAPITAL_VALUES,YR)
            IF(VECTOR_FOUND) THEN
               RETIREMENT_FUND_FIRST_HALF_RATE =
     +                             SUM(MONTHLY_CAPITAL_VALUES(1:6))/600.
               RETIREMENT_FUND_SECND_HALF_RATE =
     +                            SUM(MONTHLY_CAPITAL_VALUES(7:12))/600.
               MONTHLY_RETIREMENT_FUND_RATE = MONTHLY_CAPITAL_VALUES
               RETIREMENT_FUND_RATE_AVAILABLE = .TRUE. 
            ENDIF
         ENDIF
C
      RETURN
C***********************************************************************
      ENTRY RETURN_MONTHLY_STD_VECTOR_RATES(R_RATE_FOUND,
     +                                      R_MONTHLY_RATE)
C***********************************************************************
         R_RATE_FOUND = STD_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = STD_MONTHLY_INTEREST_RATE
      RETURN
C***********************************************************************
      ENTRY RETURN_MONTHLY_LTD_VECTOR_RATES(R_RATE_FOUND,
     +                                      R_MONTHLY_RATE)
C***********************************************************************
         R_RATE_FOUND = LTD_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = LTD_NEW_MONTHLY_INTEREST_RATE
      RETURN
C***********************************************************************
      ENTRY RETURN_MONTHLY_STI_VECTOR_RATES(R_RATE_FOUND,
     +                                      R_MONTHLY_RATE)
C***********************************************************************
         R_RATE_FOUND = STI_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = STI_MONTHLY_INTEREST_RATE
      RETURN
C***********************************************************************
      ENTRY RETURN_MONTHLY_LTI_VECTOR_RATES(R_RATE_FOUND,
     +                                      R_MONTHLY_RATE)
C***********************************************************************
         R_RATE_FOUND = LTI_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = LTI_NEW_MONTHLY_INTEREST_RATE
      RETURN
C***********************************************************************
      ENTRY RETURN_MONTHLY_PS_VECTOR_RATES(R_RATE_FOUND,
     +                                      R_MONTHLY_RATE)
C***********************************************************************
         R_RATE_FOUND = PS_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = PS_NEW_MONTHLY_INTEREST_RATE
      RETURN
C***********************************************************************
      ENTRY RET_MTHLY_CUSTOMER_VECTOR_RATES(R_RATE_FOUND,
     +                                           R_MONTHLY_RATE)
C***********************************************************************
         R_RATE_FOUND = CUST_DEPOSITS_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = MONTHLY_CUST_DEPOSITS_RATE
      RETURN
C***********************************************************************
      ENTRY RET_MTHLY_RETIRMNT_VECTOR_RATES(R_RATE_FOUND,
     +                                             R_MONTHLY_RATE)
C***********************************************************************
         R_RATE_FOUND = RETIREMENT_FUND_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = MONTHLY_RETIREMENT_FUND_RATE
      RETURN
C***********************************************************************
      ENTRY RET_MTHLY_DECOMMG_VECTOR_RATES(R_RATE_FOUND,
     +                                                 R_MONTHLY_RATE)
C***********************************************************************
         R_RATE_FOUND = NUC_DECOM_RATE_AVAILABLE
         IF(R_RATE_FOUND) R_MONTHLY_RATE = MONTHLY_NUC_DECOM_RATE
      RETURN
C***********************************************************************
      ENTRY SUM_CASH_EXPENSES(R_TOTAL_CASH_EXPENSES)
C***********************************************************************
C
            R_TOTAL_CASH_EXPENSES = FUEL_EXPENSE
     +                            + PURCHASE_POWER_EXPENSE
     +                            + VARIABLE_EXPENSE
     +                            + INC_CAPACITY_PURCHASES_TO_LEVEL_RM
     +                            + FIXED_EXPENSE
     +                            + OTHER_EXPENSE_1
     +                            + OTHER_EXPENSE_2
     +                            + KEPCO_WC_CURENT_MAINT_ENRG_COST
     +                            + OTHER_EXPENSE_3
     +                            + DSM_EXPENSE
     +                            + DSM_REBATE
     +                            + ATL_LEASE_INTEREST
     +                            + SERVICE_TRANSACTION_EXPENSE
     +                            + EMISSION_CREDIT_EXPENSE
     +                            + NF_CASH_EXPENSE
     +                            + CATAWBA_EXPENSES
     +                            + CATAWBA_CAPACITY_PAYMENTS
     +                            + TRANSMISSION_OPERATION
     +                            + TRANSMISSION_MAINTENANCE
     +                            + DISTRIBUTION_OPERATION
     +                            + DISTRIBUTION_MAINTENANCE
     +                            + CUSTOMER_ACCOUNTS
     +                            + CUSTOMER_SERVICES
     +                            + SALES_EXPENSE
     +                            + AG_OPERATIONS
     +                            + AG_MAINTENANCE
     +                            + RETIREMENT_MEDICAL_PAYMENTS
     +                            + TOTAL_DERIVATIVE_EXPENSE
     +                            + TOTAL_FUEL_DERIV_EXPENSES
     +                            + WVPA_PROP_TAXES_IN_POWER_COSTS
     +                            + ATL_Opt_Expenses    ! 1
     +                            + AssessedPensionOPEB
c    +                            + WVPA_NON_MEMBER_COST_OF_POWER
c     +                            + WVPA_MEMBER_COST_OF_POWER
      RETURN
      END
      SUBROUTINE IMPA_ANNUAL_RATIOS(PARENT_CLASS,CLASS,
     +                              VARIABLE,OPERATING_METHOD)
      REAL (KIND=4) :: VARIABLE(0:*)
      REAL (KIND=4) :: VOID_REAL,MemberCost
      REAL (KIND=4),PARAMETER :: NOT_AVAIL=-999999.
      CHARACTER (LEN=1) :: OPERATING_METHOD
      INTEGER (KIND=2) :: CLASS
      REAL (KIND=4) :: CLASS_CUSTOMERS(0:12),MONTHLY_ENERGY(0:12)
      LOGICAL (KIND=1) :: PARENT_CLASS
      
         VARIABLE(744) = NOT_AVAIL
         VARIABLE(752) = NOT_AVAIL
         VARIABLE(754) = NOT_AVAIL
         VARIABLE(756) = NOT_AVAIL
         VOID_REAL = VARIABLE(39)     ! Book Interest on LTD 39
     +               + VARIABLE(497)   ! Self Funded Capital Assets (#497)             
     +               + VARIABLE(119)  ! LTD retirement Payments (#119)
         VARIABLE(773) = VARIABLE(333) + VARIABLE(0)  ! BulkPower + BASE REVENUES
         IF(VOID_REAL /= 0.) VARIABLE(744) = 1. + VARIABLE(45)/VOID_REAL
         VARIABLE(745) = VARIABLE(17)   ! Dep
     +                   + VARIABLE(384) !LTD Amort 
     +                   - VARIABLE(119)      
         VARIABLE(755) = VARIABLE(39) + VARIABLE(119) ! P&I
         IF(.NOT. PARENT_CLASS) RETURN
         CALL IMPA_CUSTOMERS_SALES(CLASS,CLASS_CUSTOMERS,
     +                             MONTHLY_ENERGY)
         VARIABLE(753) = CLASS_CUSTOMERS(0)/12.  
         VARIABLE(751) = MONTHLY_ENERGY(0)*1000000.  ! MEMBER SALES kWh
         MemberCost = VARIABLE(333) + VARIABLE(0)  ! BulkPower + BASE REVENUES
         IF(MONTHLY_ENERGY(0) /= 0.) VARIABLE(752)= 1000.*MemberCost/
     +                                          (10.*MONTHLY_ENERGY(0)) ! average member rate
         IF(VARIABLE(753) /= 0.) THEN
            VARIABLE(754) = VARIABLE(751)/VARIABLE(753)   ! CUSTOMER USAGE          
            VARIABLE(756) = 1000000.*VARIABLE(773)/VARIABLE(753) ! AVERAGE BILL 
         ENDIF
      RETURN
      END SUBROUTINE
      SUBROUTINE GET_PTCs_TEST(CLASS,CLASS_PTCs)
      INTEGER (KIND=2) :: CLASS
      REAL (KIND=4) :: CLASS_PTCs(0:12)
         CLASS_PTCs = 25
      END SUBROUTINE
