C     Last change: msg 3/17/2022 9:55:49 AM
C********************************************************************** 
C
C             THE PRODUCTION & INCREMENTAL COST ANALYSIS MODEL (PICAm)
C               COPYRIGHT (C) 1981, 1982, 1983, 1984, 1985, 1991, 1992
C                        M.S. GERBER & ASSOCIATES, INC.
C                              ALL RIGHTS RESERVED
C
C**********************************************************************
C
      RECURSIVE FUNCTION PROCOST(PRICE_PLANNING_FIRST_PASS,
     +                                       CoalLPActive)
C
      INCLUDE 'SpinLib.MON'
      USE IREC_ENDPOINT_CONTROL
      USE PROCSAVE_COMMON
      USE GRX_PLANNING_ROUTINES
      use eco
      USE conversion_routines
      use procost_data
      use cla_decs
      use miscmod
      use kepcocom
      use grxModules
      use grx_extend
      use grx_data
      use grx_captrade
      use annual_contracts
      use monthly_icap
      use annl_nuc
      use dr_booth_modules
      USE SIZECOM
C      
      SAVE
      INCLUDE 'PRODCOM.MON'
      INCLUDE 'PROD2COM.MON'
      INCLUDE 'PROD3COM.MON'
      INCLUDE 'ELRPTCOM.MON'
      INCLUDE 'LAMCOM.MON'
      INCLUDE 'ENVIRCOM.MON'
      INCLUDE 'CNTRCOM.MON'
C

C
C     ADDED FOR MIDAS GOLD, 6/5/91
C
      INCLUDE 'POOLCOM.MON'
      INCLUDE 'SERVCOM.MON'
      
C
      CHARACTER*5 GET_SCENAME
      LOGICAL (KIND=4) :: TEMP_L4,COAL_MODEL_RAN_LAST_ITERATION
      LOGICAL (KIND=4) :: STOP_HERE

      REAL (KIND=4) :: SYS_CO2_EMISSIONS
      integer*2 ji
      LOGICAL*1 CALUCLATE_NUC_FUEL_PRICES,TRANS_HYDRO,
     +          YES_RUN_MULTIAREA_TRANSACT,INIT_TRANS_LOAD_AFTER_EL,
     +          TF_FILE_EXISTS/.FALSE./,
     +          YES_USE_TRANSACT_LOADS,
     +          YES_STRICT_MARKET_PRICE,
     +          YES_USE_TF_FILE_FOR_MULTIAREA,
     +          YES_CENTRAL_DISPATCH_TRANSACT,
     +          APPLY_NOX_SEASON,SEASON_IS_NOX_SEASON,
     +          CALCULATE_NOX,
     +          NOX_CONTROL_FOR_UNIT,
     +          SOX_CONTROL_FOR_UNIT,
     +          CO2_CONTROL_FOR_UNIT,
     +          HG_CONTROL_FOR_UNIT,
     +          OTHER3_CONTROL_FOR_UNIT,
     +          GET_NOX_CONTROL_FOR_UNIT,
     +          GET_SOX_CONTROL_FOR_UNIT,
     +          GET_CO2_CONTROL_FOR_UNIT,
     +          CO2_FIRST_CONTROL_MONTH,
     +          CO2_FIRST_CONTROL_YEAR,
     +          CO2_YEAR_BEFORE_CONTROL,
     +          GET_HG_CONTROL_FOR_UNIT,
     +          GET_OTHER3_CONTROL_FOR_UNIT,
     +          UNIT_IS_IN_NOX_SEASON_GROUP,
     +          TRANS_NOX_SEASON_ACTIVE/.FALSE./,
     +          NOX_ACTIVE_IN_TG(:),
     +          NOX_YEAR_ACTIVE_IN_TG(:),
     +          FUEL_POINTERS_USED,
     +          WEATHER_ANALYST_ACTIVE/.FALSE./,
     +          GAS_WEATHER_ANALYST_ACTIVE/.FALSE./,
     +          MANAGE_WEATHER_DEMAND_FORECASTS,
     +          MANAGE_WEEKLY_HYDRO_FORECASTS,
     +          MANAGE_GAS_WEATHER_DEMAND_FORECASTS,
     +          WEEKLY_HYDRO_ACTIVE/.FALSE./,
     +          YES_REGIONAL_OUTAGES_ACTIVE/.FALSE./,
     +          REGIONAL_PARAMS_ACTIVE,
     +          REGIONAL_OUTAGES_ACTIVE,
     +          NOX_ACTIVE_FOR_UNIT,
     +          YES_UNIT_COMMITMENT_LOGIC,
     +          UNIT_COMMITMENT_LOGIC,
     +          TRANSACT_ANALYST_ONLY,
     +          INIT_FILE_IS_ACTIVE,
     +          IS_A_MARKET_RESOURCE,
     +          REGIONAL_HYDRO_PARAM_ACTIVE,
     +          END_MONTH_FUEL_DERIVATIVES,
     +          IS_REGIONAL_HYDRO_PARAM_ACTIVE/.FALSE./,
     +          TEMP_L,
     +          RESURRECT_RETROFIT_UNIT,
     +          ANNUAL_CO2_RETIREMENTS_PROCESS,
     +          ANNUAL_CO2_RETROFIT_PROCESS,
     +          ANNUAL_RETIRE_RETRO_PROCESS,
     +          RPS_PROGRAMS_ANNUAL_CALC,
     +          WRITE_HOURLY_STORAGE_REPORT,
     +          UPDATE_STATUS_REPORT,
     +          READ_TRANS_CONSTRAINT_DATA,
     +          WRITE_MONTHLY_GAS_DEMAND_CLASS_SUMMARY,
     +          READ_TRANS_PATH_DATA,
     +          ANNUAL_GAS_SUPPLY_CURVES,
     +          annual_lp_basin_gas,
     +          GAS_MODEL_ONLY,YES_GAS_MODEL_ONLY,
     +          INIT_CLA_UNIT_UP_YESTERDAY,
     +          RPS_PROGRAMS_ANNUAL_INIT,
     +          ANNUAL_LP_GAS_PRICING,
     +          MONTHLY_GAS_SUPPLY_CURVES,
     +          SP_CAPEX_ACTIVE,
     +          NEW_SUPPLY_CURVE_REPORT,
     +          GAS_MODEL_ACTIVE,
     +          HH_ONLY,
     +          RUN_HH_ONLY,
     +          GAS_DATA_AVAILABLE,
     +          YES_GAS_MODEL_DATA_AVAILABLE,
     +          RUN_GAS_MODEL,
     +          gas_lp_active,
     +          LP_GAS_MODEL,
     +          COMMIT_ON_TOTAL_COST_ENV/.FALSE./,
     +          YES_COMMIT_ON_TOTAL_COST_ENV,
     +          RE_ALLOCATE_NUNITS_ARRAYS,
     +          RUN_COAL_MODEL
      CHARACTER*1 NOX_SEASON_REGION(:),
     +            GET_TRANS_GROUP_NOX_SEASON
      INTEGER*2 MAX_TRANS_GROUP_NUMBER/0/,
     +          GET_MAX_TRANS_GROUP_NUMBER,
     +          TG,TRANSACTION_GROUP,
     +          HYDRO_TRANS_GROUP,
     +          HH_VECTOR,
     +          GET_HH_VECTOR,
     +          CURRENT_YEAR,
     +          NOX_YEAR(:),
     +          END_NOX_YEAR(:),
     +          GET_TRANS_GROUP_NOX_YEAR,
     +          GET_TRANS_GROUP_END_NOX_YEAR,
     +          HYDRO_LOAD_NO,
     +          GET_TRANS_LOAD_AGGREGATION,
     +          NUMBER_OF_HYDRO_LOAD_GROUPS,
     +          GET_NUMBER_OF_HYDRO_GROUPS,
     +          FIRST_HYDRO_LOAD_NO(:),
     +          HYDRO_AG_IPNTX(:),PLOT_PTS,
     +          GSP,
     +          GET_UNIT_GAS_REGION_INDEX,
     +          MAX_GAS_REGION_NO/500/,
     +          NUM_GAS_NODES,NUM_GAS_LINKS
      ALLOCATABLE :: NOX_SEASON_REGION,NOX_ACTIVE_IN_TG,
     +               NOX_YEAR_ACTIVE_IN_TG,
     +               NOX_YEAR,
     +               END_NOX_YEAR,
     +               FIRST_HYDRO_LOAD_NO,
     +               HYDRO_AG_IPNTX
      INTEGER*4 PROCOST
      LOGICAL*1 READ_PRODUCTION_PARAMETERS,CoalLPActive
      REAL GET_SYSTEM_CAPACITY,
     +     GET_ANNUAL_PEAK,
     +     GET_MONTHLY_VAR_SUM,LOCAL_CLASS_RESERVE_MARGIN,
     +     GET_MONTHLY_FUEL_INDEX,
     +     P_DELIVERY_COST,
     +     S_DELIVERY_COST,
     +     GET_DISPADJ_SAVE,
     +     GET_DISPADJ2_SAVE,
     +     CO2_RETRO_HEAT_MULT,GET_CO2_RETRO_HEAT_MULT,
     +     CO2_RETRO_CAP_MULT,GET_CO2_RETRO_CAP_MULT
      CHARACTER*1 PALO_ALTO
      CHARACTER*11 CLK ! INTRINSIC TIME FUNCTION.
      PARAMETER(PALO_ALTO='P')
      CHARACTER*5 AREA_ALLOCATORS_FILE
      INTEGER*1 MO
      REAL TOTAL_AREA_CAP_ALLOCATORS,TOTAL_AREA_LOSSES,LOSSES
      CHARACTER*6 CAP_LIMIT_FUEL_TYPES,ENRG_LIMIT_FUEL_TYPES*3
      CHARACTER*20 TEMP_UNIT_NAME
      CHARACTER*2 CHR_ISEAS
      PARAMETER(CAP_LIMIT_FUEL_TYPES='GOCN12',
     +          ENRG_LIMIT_FUEL_TYPES='H12')
      CHARACTER*1 UTILITY_TYPE,COUNTRY
      LOGICAL*1 OFFSET_MAINTENANCE_VECTORS,DO_IT,
     +          MONTHLY_INVENTORY_ACTIVE,ECON_SWITCH,
     +          BEFORE_LOAD_CURVE,
     +          CLASS_EXISTS(MAX_LOAD_CLASSES),
     +          CLASS_IN_AREA_1(MAX_LOAD_CLASSES),
     +          PRICE_PLANNING_FIRST_PASS,
     +          LOLP_REPORT,
     +          HAVE_HOURLY_MC_AFTER_EL,
     +          CAL_HOURLY_MC_AFTER_EL
      INTEGER*2 NUM_UNITS_BEFORE_ADDITIONS,
     +          RETURN_CL_UNITS_B4_ADDITIONS,PERIOD,
     +          POINTER
      INTEGER*2 PSMO,PEMO,PROCMETH,HOURS_IN_PERIOD,I,M,
     +          ISEAS,SET_CURRENT_IPNT,IPNTX, HOURS_INCREMENT,EM,
     +          PRODUCTION_PERIODS,J,
     +          BASE_DATE,PEAK_MONTH,
     +          HISTORICAL_PRODUCTION_DATE, ! 01/15/03 FOR MONTHLY MIDAS
     +          GET_YR,RUN_YEARS,
     +          PRODUCTION_COSTING_PERIODS,
     +          R_ISEAS,R_PSMO,R_PEMO,TRANS,MAX_TRANS_LOAD_GROUPS,
     +          NUMBER_OF_ACTIVE_TRANS_GROUPS,
     +          GET_NUMBER_OF_ACTIVE_GROUPS,
     +          GET_THERMAL_ONLINE
      INTEGER*2 SAVE_YEAR
      INTEGER*2 LAST_NUNITS/0/,GET_PROCOST_LAST_NUNITS,
     +          FT,GET_PRIMARY_MOVER
C
      REAL  ESCALATED_MONTHLY_VALUE,
     +      ESCALATE_THERMAL_VOM,
     +      ESCALATE_THERMAL_FOM,
     +      LEASOR_MARK_UP,
     +      TRANS_LOAD_PROB_2_HOURS,
     +      HYDRO_LOAD_PROB_2_HOURS
      REAL SEASONAL_SYSTEM_CAP,RTEMP,
     +     RTEMP012(0:12),
     +     GET_CL_POOL_FRAC_OWN,RTEMP_2,RTEMP_3,RTEMP_4,
     +     RTEMP_5,RTEMP_6,RTEMP_7,RTEMP_8,RTEMP_9,RTEMP_10,
     +     RETRO_VOM,RETRO_FOM
      REAL ANNUAL_PEAK/0./,PEAK,DX,TRANS_PEAK,
     +     BASE_TO_PEAK_RATIO,
     +     PEAK_AFTER_DSM,PEAK_AFTER_EL,BASE_AFTER_DSM,
     +     LPROB(CONVOLUTION_POINTS),LODDUR(CONVOLUTION_POINTS),
     +     HEAT_RATE_FACTOR(MAX_CL_UNITS),
     +     GET_HEAT_RATE_FACTOR,
     +     MAINTENANCE_RATE(MAX_CL_UNITS),GET_VAR,
     +     HYDRO_MONTHLY_ENRG(MAX_EL_UNITS),HYDROCAPMO(MAX_EL_UNITS),
     +     EL_SO2(MAX_EL_UNITS),ENERGY_EXCHANGE_ADJUSTMENT,
     +     EL_SO2_PERIOD(12),
     +     RR_OBS(LOAD_CURVE_POINTS),
     +     AVE_RUNNING_RATE(LOAD_CURVE_POINTS),DIVIDE_BY,
     +     DISP_BTU_COST(MAX_CL_UNITS),MN_RATE,
     +     REMAIN_ANN_ENRG(MAX_CONTRACTS),
     +     MAXIMUM_ANNUAL_CAPACITY(MAX_CONTRACTS),
     +     CT_TARGET_ANN_ENRG(MAX_CONTRACTS),
     +     CNTR_WEIGHTED_CAPACITY(MAX_CONTRACTS),
     +     GET_CLASS_PEAK_NET_DSM,
     +     NUCLEAR_AVAIL_MULT,GET_SCENARIO_NUCLEAR_AVAIL,
     +     COAL_AVAIL_MULT,GET_SCENARIO_COAL_AVAIL,
     +     GET_SCENARIO_GAS_AVAIL,GAS_AVAIL_MULT,
     +     GET_SCENARIO_OIL_AVAIL,GET_SCENARIO_OTHER_AVAIL,
     +     OIL_AVAIL_MULT,OTHER_AVAIL_MULT,
     +     HYDRO_WATER_YEAR_MULT,GET_SCENARIO_HYDRO_WATER_YEAR,
     +     GET_PARAM_HYDRO,
     +     FUEL_SCEN_MULT(5), ! MAY NEED TO MAKE ALLOCATABLE
     +     GET_SCENARIO_GAS_PRICES,
     +     GET_SCENARIO_OIL_PRICES,
     +     GET_SCENARIO_COAL_PRICES,
     +     GET_SCENARIO_URANIUM_PRICES,
     +     GET_MONTHLY_REGIONAL_OUTAGE,
     +     NOX_CONTROL_MULT,
     +     SOX_CONTROL_MULT,
     +     CO2_CONTROL_MULT,
     +     HG_CONTROL_MULT,
     +     OTHER3_CONTROL_MULT,
     +     GET_VCPMWH_IN,
     +     GET_FIXED_COST_IN,
     +     GET_NOX_VOM,
     +     GET_NOX_FOM,
     +     GET_SOX_VOM,
     +     GET_SOX_FOM,
     +     GET_CO2_VOM,
     +     GET_CO2_FOM,
     +     GET_HG_VOM,
     +     GET_HG_FOM,
     +     GET_OTHER3_VOM,
     +     GET_OTHER3_FOM,
     +     GET_MAINTENANCE_RATE,
     +     TEMP_R4,
     +     CL_CAPACITY_PLANNING_ADJUSTMENTS,
     +     INIT_MONTHLY_LDC_2_HOURS,
     +     GET_MONTHLY_GAS_PRICE_BY_STATE
      REAL*4 UNSCHEDULED_MAINT_HOURS,
     +       HH_ADJ,MONTHLY_HH_BASIS,
     +       UPDATE_HH_PRICE,
     +       LOWER_48_BASIN_ADD
C
      REAL DSM_PEAK_RESERVE_ALLOCATION(3,MAX_LOAD_CLASSES)
      REAL LPROB_100(LOAD_CURVE_POINTS),LODDUR_100(LOAD_CURVE_POINTS),
     +     ANNUAL_BASE
      LOGICAL*1 DISPATCH_REPORT,ENRG_LIMIT_REPORT,
     +          LOAD_PROB_PLOT,UNIT_OUTPUT_REPORT,
     +          ANNUAL_UNIT_OUTPUT_REPORT,
     +          SPREAD_SHEET,
     +          POOLING_TRANSACTIONS,ESC_DISP_ADDER,
     +          ESCALATE_DISP_ADDER,
     +          CALL_DISPATCH_REPORT,
     +          ANNUAL_OR_SPREAD_SHEET_REPORT,
     +          USE_SECONDARY_FUEL(MAX_CL_UNITS),
     +          WEST_KOOTENAY_POWER,WKP_ACTIVE,
     +          USE_EXTERNAL_PRODUCTION_COST
      REAL*8 DEMAND,TOTAL_SALES_ENERGY,TOTAL_SALES_REVENUE,
     +       SALES_ENERGY,CAP_LIMITED_DEMAND,
     +       SALES_ENERGY_NOT_IN_FORECAST,ENRG_LIMITED_PURCHASE_ENERGY,
     +       DEMAND_AFTER_DSM_BEFORE_EL,
     +       DEMAND_AFTER_DSM_AFTER_EL,
     +       GET_DEMAND_AFTER_EL,
     +       TRANS_EL_GENERATION,
     +       TRANS_DEMAND
      REAL*8 GET_TOTAL_SALES_ENERGY,
     +       GET_TOTAL_SALES_REVENUE,
     +       GET_SALES_ENRGY_NOT_IN_FORECAST,
     +       GET_ENRG_LIMITED_PURCHASE_ENRGY
      REAL GET_ENERGY_EXCHANGE_ADJUSTMENT,TRANS_EL_CAPACITY
C
C COMMON /PROCSAVE/
C
      REAL*8 GET_FUEL_COST,GET_VAR_COST

      INTEGER*2 PERIOD_COUNTER,CALCULATION_ORDER(12)
C
C
C ADDED 5/16/92 FOR POOLING COST TRANSACITONS
C
C     INCLUDE 'OVLYCOM.MON'
      INTEGER*1 L
      LOGICAL*4 AREA_CONTROL_FILE_EXISTS,
     +          TEST_PRODP_FILE_EXISTS
      LOGICAL*1 BTU_TAX_ALREADY_ACTIVE,
     +          BTU_TAX_ACTIVE_THIS_MONTH(12),
     +          BTU_TAX_ACTIVE_DISP_RPT,
     +          BTU_TAX_ACTIVE,
     +          DISPAT_BTU_TAX_ACTIVE
C
C ECONOMY INTERCHANGE
C
      LOGICAL*1 INCLUDE_IN_DISPATCH_ORDER
      INTEGER*1 BTU_TAX_START_MONTH
      CHARACTER*1 POOL_PRICING_SWITCH
      REAL TRANSACTION_BUY_SPREAD,TRANSACTION_SELL_SPREAD
      REAL POOL_NATIVE_MULT,POOL_OTHER_MULT,
     +     UNSERVED_ENERGY_PRICE,
     +     CAP_LIMT_BTU_TAX_RATES_GOCN12(0:6),
     +     ENRG_LIMT_ENRGY_TAX_RATES_H12(0:3),
     +     BTU_TAX_IN_ADJUSTMENT_CLAUSE,
     +     POOLING_VARIABLE_COST_SWITCH,
     +     POOLING_FUEL_COST_SWITCH,
     +     POOLING_FIXED_COST_SWITCH,
     +     TIE_GROUP_LIMIT(3)
C
      REAL DISP_BTU_TAX_ADDER(MAX_CL_UNITS)
      REAL*8 ANNUAL_BTUS_GOCN12(0:6),
     +       ANNUAL_BTUS_FOR_BTU_TAX_GOCN12(0:6),
     +       ANNUAL_EL_MWH_H12(0:3),
     +       ANNUAL_EL_MWH_FOR_BTU_TAX_H12(0:3)
C
C KEPCO STUFF 5/20/92
C
      CHARACTER*1 KEPCO_REPORTS,WABASH_POWER_COST_RPT
      REAL CT_PATTERN_SUM(MAX_CONTRACTS),
     +     WOLF_CREEK_ENRG_COST
      REAL CNTR_SALES_REVENUE,CNTR_SALES_ENERGY
      REAL WEIGHTED_HOURS,PERIOD_RATE,UNIT_CAPACITY,MW_CAPACITY
C
      INTEGER*2   R_UNITS,RECALCULATE_FUEL_COSTS

      LOGICAL (KIND=1) :: NUC_FUEL_PRICE_SOURCE_IS_NFILE
C
C 7/20/94. GAT. SRP.
      REAL TEMP_HYDRO_ENERGY,TEMP_HYDRO_CAP
C
C WABASH VALLEY STUFF January, 1994
C
      REAL RESOURCE_CAP(MAX_LOAD_CLASSES),
     +     CAP_ALLOCATOR,CONTROL_AREA_1_NEEDS,GET_AREA1_PEAK_NET_DSM,
     +     AVAILABLE_MWS
      INTEGER*2 ARRAY_POINTR,AREA,LAST_CLASS_IN_AREA1,I2_ZERO/0/
C
C FUEL INVENTORY VARIABLES
C
      REAL*8 MMBTU_FUEL_BALANCE(0:MAXIMUM_FUEL_TYPES)
      LOGICAL*4 FUEL_INVENTORY_ACTIVE
      INTEGER*2 FUEL_INVENTORY_ID(0:1024),FUEL_ID ! 041908. CHANGE.
!      ALLOCATABLE :: FUEL_INVENTORY_ID
C
C EMISSION FUEL BLENDING 12/30/92 MSG
C
      LOGICAL*1 PHASE_I_UNIT_OR_NOT_USA(MAX_CL_UNITS)
      INTEGER*4 ERROR,DEALLOCATE_FUEL_INVENTORY_ID,
     +          VALUES_TO_ZERO
      REAL BLEND_SO2,BLEND_NOX_BK1,BLEND_NOX_BK2,BLEND_CO2,
     +     BLEND_OTH2,BLEND_OTH3
      REAL ANNUAL_BLENDED_BTU_COST(:),BLENDED_BTU_COST(:),
     +     ANNUAL_FUEL_BTU_COST(:),B_FUEL,P_FUEL,
     +     ANNUAL_DISP_BTU_COST(:)
C
C SERVICE TRANSACTIONS VARIABLES
C
      LOGICAL*4 SERVICE_TRANSACTIONS_ACTIVE
      LOGICAL*1 MONTHLY_SERVICE_REPORT_ACTIVE/.FALSE./
      CHARACTER*1 SERVICE_REPORT
      LOGICAL*1 CAP_PLANNING_METHOD_ANNDECOMP
      CHARACTER*2 CAPACITY_PLANNING_METHOD,GREEN_MRX_METHOD
C
C FUEL PRICE VARIABLES
C
      LOGICAL*1 FUEL_PRICE_DATA_AVAILABLE
C
      LOGICAL*1   DUKE,VOID_LOGICAL,UPDATE_CATAWBA_CONTRACT_DATA,
     +            WRITE_MARGINAL_UNIT_REPORT,
     +            TEST_MONTHLY_MUST_RUN,
     +            CPL_ACTIVE,CALC_CONTRACT_CLASS_INFO,
     +            READ_ENERGY_PRODUCTS_DATA,
     +            READ_FUEL_DERIVATIVES_DATA,
     +            MONTHLY_ACTIVE_ENERGY_PRODUCTS,
     +            BEGIN_MONTH_FUEL_DERIVATIVES,
     +            MONTHLY_TRANSACTION_LOADS,
     +            CALC_CL_CAP_MARKETS,
     +            MONTHLY_USER_DATA_RESET,
     +            INIT_CAP_MARKET_REVENUE,
     +            MONTHLY_GAS_DEMAND,
     +            MONTHLY_GAS_PRICING,
     +            monthly_lp_gas_pricing,
     +            INIT_MON_MDS_CL_UNITS,
     +            TRANS_OUTAGE_DATA_ACTIVE,
     +            READ_TRANS_OUTAGE_DATA,
     +            THIS_MONTH_TRANS_OUTAGES,
     +            MONTHLY_ACTIVE_TRANS_OUTAGES,
     +            PROCESS_ANNUAL_GAS_STORAGE,
     +            ANNUAL_FUEL_DERIVATIVES,
     +            ANNUAL_ACTIVE_TRANS_OUTAGES,
     +            GasModulePipeExpansion

      INTEGER*2 FUEL_MIX_POINTERS,
     +          UPDATE_PRIMARY_FUEL_MIX_RATIO,
     +          MON_MDS_CL_EXP_2_AC
    
      REAL*4 VOIDR4,
     +       DUKE_TOTAL_CAPACITY_CHARGES,
     +       BUYERS_SECTION_82_ENRG_RATE
      REAL*4 CATAWBA_ENRG,CATAWBA_FUEL_COST,CATAWBA_OM_COST
      REAL*4 MCGUIRE_ENRG,MCGUIRE_FUEL_COST,MCGUIRE_OM_COST
C
C 6/22/94 ESCALATION MODIFICATIONS
C
      INTEGER*2 VOID_INT2,ESCALATE_ALL_VALUES,
     +          CL_EXPENSES_2_ASSET_CLASSES,
     +          SET_UP_CL_CLASS_ARRAYS,
     +          ZERO_CL_CLASS_ARRAYS,
     +          ESCALATE_DISP_ADDER_VALUES,
     +          ESCALATE_FUEL_ADDER_VALUES,
     +          RETROFIT_ACTIVE_ID,
     +          TEMP_I2,
     +          ESCALATE_ONE_VALUE
C
      LOGICAL*1 DETAILED_MAINTENANCE_ACTIVE,
     +          CALC_ANNUAL_CAP_AND_MAINT,
     +          GET_ANNUAL_CAPACITY,UPDATE_PERIOD_CAPACITY,
     +          GET_PERIOD_CAPACITY,GET_PERIOD_MAINTENANCE,
     +          UPDATE_PERIOD_MAINTENANCE,
     +          DETAILED_MAINTENANCE_IS_ACTIVE
C
C FUEL SUPPLY INVENTORY POINTER
C
      INTEGER*2 GET_THIS_YEARS_FUEL_SUPPLY_ID,LAST_YEARS_NUNITS,
     +      THIS_YEARS_FUEL_SUPPLY_ID(MAX_CL_UNITS),R_YR,R_UNIT,
     +      FUEL_SUPPLY_ID_4_THIS_YEAR
C
      ALLOCATABLE :: BLENDED_BTU_COST,ANNUAL_BLENDED_BTU_COST,
     +               ANNUAL_FUEL_BTU_COST,ANNUAL_DISP_BTU_COST
      EQUIVALENCE (LPROB(1),LPROB_100(1)),(LODDUR(1),LODDUR_100(1))
C
      LOGICAL*1 FOUND_CLASS_FORECAST,GET_PEAK_ENERGY_AFTER_LOSSES,
     +            CLASS_6_AND_WABASH_VALLEY
      REAL*4  CLASS_PEAK_AFTER_LOSSES(2,MAX_LOAD_CLASSES),
     +        CLASS_ENERGY_AFTER_LOSSES(2,MAX_LOAD_CLASSES)
      LOGICAL*1 NUC_GEN_UNIT_FOUND,SEASON_EMISSIONS_RATES/.FALSE./
! REGIONAL ANALYSIS TRANSACTIONS VARIABLES
      INTEGER*2   R_BLOCK
      REAL*4      GET_TOTAL_INCREMENTAL_COST,INC_CAP,
     +            PRIM_TOTAL_EMISSION_COST,
     +            TEMP_DISPATCH_MULT,
     +            DISP_ADJUSTER,
     +            GET_INCREMENTAL_FUEL_COST,
     +            A_HR,B_HR,SECOND_BLOCK_HEAT,
     +            GET_TOTAL_INC_COST_PARAMS,
     +            R_BLENDED_BTU_COST,
     +            R_1ST_FUEL,
     +            R_1ST_NON_FUEL,
     +            R_2ND_FUEL,
     +            R_2ND_NON_FUEL
C
      LOGICAL*1 PA_CONTRACT_ACITVE
      LOGICAL*1 DEALLO_MONTH_MARG_COST_ARRAYS,
     +          DEALLO_CAL_HOURLY_MC_AFTER_EL,
     +          DEALLOCATE_MONTHLY_TRANS_LOADS,
     +          DEALLOCATE_MONTHLY_GAS_DEMAND,
     +          DEALLO_ANNUAL_MARG_COSTS_ARRAYS
      CHARACTER*20 MONTH_NAME
      LOGICAL*1 LAHEY_LF95,DEBUG_ON,SET_DEBUG_ON

!
!
      IF(YEAR > 28) THEN
         YEAR = YEAR
      ENDIF
      IF(YEAR == 1) THEN
         LAST_NUNITS = -1
         LAST_YEARS_NUNITS = -1
      ENDIF
      IF(YEAR == 1 .OR. GRX_ITERATIONS == 0) THEN
         RETRO_POINTER = 0
      ENDIF
      RE_ALLOCATE_NUNITS_ARRAYS = NUNITS > LAST_NUNITS
      IF(DEBUG_ON()) CALL write_scroll_line_RW('PROCOST',2)
      CALL UPDATE_PRODUCTION_SWITCHES
      WKP_ACTIVE = WEST_KOOTENAY_POWER()
      CALL INITIALIZE_CAWCD_ENERGY
      if(year+base_year >= 2015) then
         temp_l4 = temp_l4
      endif
C
      IF(NUNITS > 0) THEN 

         THIS_YEARS_FUEL_SUPPLY_ID = 0
         VOID_LOGICAL = INIT_MON_MDS_CL_UNITS(NUNITS)

      ENDIF
C      
      SAVE_YEAR = YEAR
      CURRENT_YEAR = YEAR + BASE_YEAR

      IF(CPL_ACTIVE()) THEN
         CALL READ_CPL_DATA(YEAR)
      ENDIF
      gas_lp_active = LP_GAS_MODEL()
      ANNUAL_PEAK = 0.
      PRODUCTION_COSTING_PERIODS = PRODUCTION_PERIODS()
      ESCALATE_DISP_ADDER = ESC_DISP_ADDER()
      ANNUAL_OR_SPREAD_SHEET_REPORT = ANNUAL_UNIT_OUTPUT_REPORT() .OR. 
     +                                                    SPREAD_SHEET()
      MONTHLY_SERVICE_REPORT_ACTIVE = SERVICE_REPORT() /= 'F'
      CALL FUEL_PRICE_FILES_ACTIVE(FUEL_PRICE_DATA_AVAILABLE)
      NUM_UNITS_BEFORE_ADDITIONS = RETURN_CL_UNITS_B4_ADDITIONS()
! 062307. 
      TEMP_L = ANNUAL_GAS_SUPPLY_CURVES(YEAR)
!      
! 061209. TOOK OUT TO REFLECT DYNAMIC UPDATING OF BASIN EXTRACTION.
!
!      TEMP_L = annual_lp_basin_gas(YEAR)
!
      TEMP_L = ANNUAL_LP_GAS_PRICING(NUM_GAS_NODES,NUM_GAS_LINKS,YEAR)
      YES_GAS_MODEL_ONLY = GAS_MODEL_ONLY()
!
! 012019
!
         VOID_LOGICAL = RPS_PROGRAMS_ANNUAL_INIT()
!
! Hourly Product Files. 072119.
      CALL READ_HOURLY_PRODUCT_FILES(YEAR)
!
      IF(YEAR == 1) THEN
         GAS_DATA_AVAILABLE = .FALSE.
         IF(ALLOCATED(ENERGY)) THEN
            DEALLOCATE(ENERGY,
     +                 TENRG,
     +                 TMMBTUS,
     +                 FUELCOST,
     +                 VARCOST)
            
         ENDIF   
         ALLOCATE(ENERGY(MAX_SIMULATION_YEARS),
     +            TENRG(MAX_SIMULATION_YEARS),
     +            TMMBTUS(MAX_SIMULATION_YEARS),
     +            FUELCOST(MAX_SIMULATION_YEARS),
     +            VARCOST(MAX_SIMULATION_YEARS))
! 092608. ONCE PER ENDPOINT     
         VOID_LOGICAL = INIT_CLA_UNIT_UP_YESTERDAY() 
         FUELCOST = 0. D0
         VARCOST = 0. D0
         TENRG = 0. D0
         TMMBTUS = 0. D0
         ENERGY = 0. D0
! 07/12/04. FROM TRANSOBJ.FOR

!
         WEATHER_ANALYST_ACTIVE = MANAGE_WEATHER_DEMAND_FORECASTS()
! 072006.
         GAS_WEATHER_ANALYST_ACTIVE = 
     +                             MANAGE_GAS_WEATHER_DEMAND_FORECASTS()
!         WEEKLY_HYDRO_ACTIVE = MANAGE_WEEKLY_HYDRO_FORECASTS()
         TRANS_OUTAGE_DATA_ACTIVE = READ_TRANS_OUTAGE_DATA()
         YES_REGIONAL_OUTAGES_ACTIVE = REGIONAL_PARAMS_ACTIVE()

         IS_REGIONAL_HYDRO_PARAM_ACTIVE = REGIONAL_HYDRO_PARAM_ACTIVE()

         CALL SET_DISPATCH_AVERAGE_INC

         BTU_TAX_ALREADY_ACTIVE = .FALSE.
         MONTHLY_INVENTORY_ACTIVE = .FALSE. ! 6/15/93. GAT.
         CAP_PLANNING_METHOD_ANNDECOMP=CAPACITY_PLANNING_METHOD()=='AN'
         CALL INITIALIZE_EMIS_REPORTING
         VOID_INT2 = SET_UP_CL_CLASS_ARRAYS()
         CALL SET_UP_EL_CLASS_ARRAYS
         CALL DOES_CATAWBA2_FILE_EXIST(CATAWBA2_FILE_EXISTS)

         VOID_LOGICAL = READ_FUEL_DERIVATIVES_DATA()
         CALL DOES_TF_FILE_EXIST(TF_FILE_EXISTS)

!
         MAX_TRANS_GROUP_NUMBER = GET_MAX_TRANS_GROUP_NUMBER()
         IF(MAX_TRANS_GROUP_NUMBER > 0) THEN
            IF(ALLOCATED(NOX_SEASON_REGION)) 
     +                    DEALLOCATE(  NOX_SEASON_REGION,
     +                                 NOX_ACTIVE_IN_TG,
     +                                 NOX_YEAR_ACTIVE_IN_TG,
     +                                 NOX_YEAR,
     +                                 END_NOX_YEAR)
            ALLOCATE(NOX_SEASON_REGION(MAX_TRANS_GROUP_NUMBER),
     +                    NOX_ACTIVE_IN_TG(MAX_TRANS_GROUP_NUMBER),
     +                    NOX_YEAR_ACTIVE_IN_TG(MAX_TRANS_GROUP_NUMBER),
     +                    NOX_YEAR(MAX_TRANS_GROUP_NUMBER),
     +                    END_NOX_YEAR(MAX_TRANS_GROUP_NUMBER))
            DO I = 1, MAX_TRANS_GROUP_NUMBER
               NOX_SEASON_REGION(I) = GET_TRANS_GROUP_NOX_SEASON(I) ! TRIGGERED OFF OF TG #, NOT INDEX
               NOX_YEAR(I) = GET_TRANS_GROUP_NOX_YEAR(I) 
               END_NOX_YEAR(I) = GET_TRANS_GROUP_END_NOX_YEAR(I)
            ENDDO
            TRANS_NOX_SEASON_ACTIVE = .TRUE.
         ELSE
            TRANS_NOX_SEASON_ACTIVE = .FALSE.
         ENDIF
      ENDIF
! 010713. MOVE FROM OUTSIDE OF YEAR=1.      
      COMMIT_ON_TOTAL_COST_ENV = YES_COMMIT_ON_TOTAL_COST_ENV()
!
      GAS_MODEL_ACTIVE = RUN_GAS_MODEL()
      HH_ONLY = RUN_HH_ONLY()
      HH_VECTOR = GET_HH_VECTOR()
!
      IF(GAS_MODEL_ACTIVE) THEN
         VOID_LOGICAL = PROCESS_ANNUAL_GAS_STORAGE(YEAR)
      ENDIF
!      VOID_LOGICAL = ANNUAL_ENERGY_PRODUCTS()
      VOID_LOGICAL = ANNUAL_FUEL_DERIVATIVES()
      VOID_LOGICAL = ANNUAL_ACTIVE_TRANS_OUTAGES() ! YEAR NOT PASSED 070704
      FUEL_MIX_POINTERS = UPDATE_PRIMARY_FUEL_MIX_RATIO(YEAR)
C
C SET_EMISSIONS_RATES ALLOCATES ARRAY SIZES BASED ON NUNITS
C WHEN NEXT DECISION PLANNING IS BEING USED NUNITS CAN CHANGE EACH
C YEAR.  THIS REQUIRES THAT THE ARRAYS BE RESET.  THE 10/14/94 SOLUTION
C IS TO RE-RUN THE SET UP ROUTINE.  A BETTER SOLUTION IS TO INCREMENTALLY
C ADD TO THE ARRAYS.
C
! 8/5/99. GAT. MOVED FROM BELOW
!
      IF(YEAR == 1) THEN
         CALL INIT_EMIS_POINTR_RECORD
         CALL SET_EMISSIONS_RATES(NUNITS)
      ELSEIF(LAST_YEARS_NUNITS /= NUNITS) THEN
         CALL SET_EMISSIONS_RATES(NUNITS)
      ENDIF
!      LAST_YEARS_NUNITS = NUNITS ! MOVED TO END OF PRO_COST 6/15/10 MSG
!
      IF(TRANS_NOX_SEASON_ACTIVE) THEN
         DO I = 1, MAX_TRANS_GROUP_NUMBER

            IF( (NOX_SEASON_REGION(I) == 'T' .AND. 
     +                           CURRENT_YEAR >= NOX_YEAR(I).AND.
     +                           CURRENT_YEAR <= END_NOX_YEAR(I)) 
     +                            .OR. NOX_SEASON_REGION(I) == 'M') THEN
               NOX_ACTIVE_IN_TG(I) = .TRUE.
               NOX_YEAR_ACTIVE_IN_TG(I) = .TRUE.
            ELSE
               NOX_ACTIVE_IN_TG(I) = .FALSE.
!
               IF(NOX_SEASON_REGION(I) == 'T' .AND. 
     +                                 CURRENT_YEAR < NOX_YEAR(I) ) THEN
                  IF(CURRENT_YEAR > END_NOX_YEAR(I)) THEN
                     NOX_YEAR_ACTIVE_IN_TG(I) = .TRUE.
                  ELSE
                     NOX_YEAR_ACTIVE_IN_TG(I) = .FALSE.
                  ENDIF
               ELSE
                  NOX_YEAR_ACTIVE_IN_TG(I) = .TRUE.
               ENDIF
            ENDIF
         ENDDO
      ENDIF
      CALL ZERO_EL_CLASS_ARRAYS
! TEMPORARY. GAT.
      CALL CREATE_EMISSIONS_BY_FUEL_TYPE(NUNITS)
!      
      VOID_INT2 = ZERO_CL_CLASS_ARRAYS()
      BTU_TAX_ACTIVE_THIS_MONTH = .FALSE.
C
      BTU_TAX_ACTIVE_DISP_RPT = .FALSE.
      POOL_PRICING_SWITCH = 'P'
      POOL_NATIVE_MULT = 0.
      POOL_OTHER_MULT = 0.
      UNSERVED_ENERGY_PRICE = 0.
      TRANSACTION_BUY_SPREAD = 0. ! SET TO .25 FOR MARYLAND PSC
      TRANSACTION_SELL_SPREAD = 0.! SET TO 0. FOR MARYLAND PSC
      POOLING_VARIABLE_COST_SWITCH = 1.
      POOLING_FUEL_COST_SWITCH = 1.
      POOLING_FIXED_COST_SWITCH = 1.
      BTU_TAX_IN_ADJUSTMENT_CLAUSE = 0.
      DO I = 0, 6
         CAP_LIMT_BTU_TAX_RATES_GOCN12(I) = 0.
         ANNUAL_BTUS_GOCN12(I) = 0.D0
         ANNUAL_BTUS_FOR_BTU_TAX_GOCN12(I) = 0.D0
      ENDDO
      DO I = 0, 3
         ENRG_LIMT_ENRGY_TAX_RATES_H12(I) = 0.
         ANNUAL_EL_MWH_H12(I) = 0.D0
         ANNUAL_EL_MWH_FOR_BTU_TAX_H12(I) = 0.D0
         IF(I > 0) TIE_GROUP_LIMIT(I) = 999999.
      ENDDO
      INCLUDE_IN_DISPATCH_ORDER = .FALSE.

      IF(YEAR == 1) THEN

         FUEL_INVENTORY_ID = 0
C
         CALL READ_SERVICE_TRANS(MAX_CL_UNITS,
     +                                      SERVICE_TRANSACTIONS_ACTIVE)
         CALL INIT_TRANSACTION_MANAGER() ! 11/6/01.
C
C FUEL INVENTORY DATA
C
         CALL BUILD_FUEL_INVENTORIES(MMBTU_FUEL_BALANCE,
     +                               FUEL_INVENTORY_ID,
     +                               MONTHLY_INVENTORY_ACTIVE,
     +                               FUEL_INVENTORY_ACTIVE)
      ENDIF
C
C END 
C
      IF(FUEL_PRICE_DATA_AVAILABLE) THEN
         IF(YEAR == 1 .OR. NUNITS > LAST_NUNITS .or.
     +                                      ITERATE_GRX_PLANNING()) THEN
            CALL SET_UP_FUEL_COST_INFO(NUNITS,
     +                                 SFESCR,
     +                                 EMISS_FUEL_ESCAL)
         ENDIF
      ENDIF
      AREA_CONTROL_FILE_EXISTS = INDEX(AREA_ALLOCATORS_FILE(),'NONE')==0
C     KEPCO = .FALSE. ! SET TO FALSE UNTIL KEPCO JOINS THE TC PROJECT 
      WOLF_CREEK_ENRG_COST = 0.
      KEPCO = AREA_CONTROL_FILE_EXISTS
      KEPCO_WC_DEF_MAINT_ENRG_COST = 0.
      KEPCO_WC_DEF_MAINT_ENRG_AMORT = 0.
      FIRST_MAINTENANCE_PERIOD = 13
C      
C      
      IF(.NOT. TESTING_PLAN .AND. WABASH_VALLEY .AND. 
     +                 INDEX('M,B,A',WABASH_POWER_COST_RPT()) /= 0) THEN
!
         CALL IS_CLASS_6_AND_WV(CLASS_6_AND_WABASH_VALLEY)
         IF(CLASS_6_AND_WABASH_VALLEY) THEN
            NUMBER_OF_AREAS = 6
         ELSE
            NUMBER_OF_AREAS = 5 ! MAYBE RESET TO 6 FOR HOOSIER.
         ENDIF
!         
         CALL WABASH_POWER_COST_REPORT(NUNITS,NUMBER_OF_CONTRACTS,
     +                                                      HYDRO_UNITS)
      ENDIF
      IF(KEPCO) THEN
         EMERGENCY_ENERGY_CONTRACT = 0
         MAINTENANCE_ENERGY_CONTRACT = 0
         TOTAL_EMERGENCY_ENERGY = 0.
         TOTAL_MAINTENANCE_ENERGY = 0.
         TOTAL_AREA_RESOURCE_LOSSES = 0.
         CALL READ_AREA_ALLOCATORS
         CL_ANNUAL_EMERGENCY_ENERGY = 0.
         CT_ANNUAL_EMERGENCY_ENERGY = 0.
         EL_ANNUAL_EMERGENCY_ENERGY = 0.
         CL_ANNUAL_MAINTENANCE_ENERGY = 0.
         CT_ANNUAL_MAINTENANCE_ENERGY = 0.
         EL_ANNUAL_MAINTENANCE_ENERGY = 0.
         CL_ANNUAL_ENERGY_LOSSES = 0.
         CT_ANNUAL_ENERGY_LOSSES = 0.
         EL_ANNUAL_ENERGY_LOSSES = 0.
         ANNUAL_AREA_ENERGY = 0.
         ANNUAL_COINCIDENT_PEAK = 0.
         ANNUAL_NONCOINCIDENT_PEAK = 0.
         ANNUAL_AREA_SURPLUS_ENERGY = 0.
         KEPCO_ANNUAL_AREA_SALES = 0.
         KEPCO_ANNUAL_DUMP_ENERGY = 0.
         CL_RESOURCE_ANNUAL_AREA_ENRG = 0.
         CT_RESOURCE_ANNUAL_AREA_ENRG = 0.
         EL_RESOURCE_ANNUAL_AREA_ENRG = 0.
         CL_RESOURCE_ANNUAL_AREA_CAP = 0.
         CT_RESOURCE_ANNUAL_AREA_CAP = 0.
         EL_RESOURCE_ANNUAL_AREA_CAP = 0.
C
         CALL INIT_WC_DEF_MAINTENANCE(YEAR)
      ENDIF
      IF(TEST_PRODP_FILE_EXISTS()) THEN
         VOID_LOGICAL = READ_PRODUCTION_PARAMETERS(SAVE_YEAR,
     +                              POOL_PRICING_SWITCH,
     +                              POOL_NATIVE_MULT,POOL_OTHER_MULT,
     +                              TRANSACTION_BUY_SPREAD,
     +                              TRANSACTION_SELL_SPREAD,
     +                              CAP_LIMT_BTU_TAX_RATES_GOCN12,
     +                              UNSERVED_ENERGY_PRICE,
     +                              POOLING_VARIABLE_COST_SWITCH,
     +                              INCLUDE_IN_DISPATCH_ORDER,
     +                              POOLING_FUEL_COST_SWITCH,
     +                              POOLING_FIXED_COST_SWITCH,
     +                              ENRG_LIMT_ENRGY_TAX_RATES_H12,
     +                              BTU_TAX_START_MONTH,
     +                              BTU_TAX_IN_ADJUSTMENT_CLAUSE,
     +                              TIE_GROUP_LIMIT)
     
C
         IF(BTU_TAX_START_MONTH > 0 .AND. 
     +                                .NOT. BTU_TAX_ALREADY_ACTIVE) THEN
            DO MO = BTU_TAX_START_MONTH, 12
               BTU_TAX_ACTIVE_THIS_MONTH(MO) = .TRUE.
            ENDDO
            BTU_TAX_ALREADY_ACTIVE = .TRUE.
            BTU_TAX_ACTIVE_DISP_RPT = .TRUE.
         ELSE IF(BTU_TAX_START_MONTH < 0 .AND. 
     +                     (BTU_TAX_ALREADY_ACTIVE .OR. YEAR == 1)) THEN
            DO MO = 1, ABS(BTU_TAX_START_MONTH)
               BTU_TAX_ACTIVE_THIS_MONTH(MO) = .TRUE.
            ENDDO
            BTU_TAX_ALREADY_ACTIVE = .FALSE.
            BTU_TAX_ACTIVE_DISP_RPT = .TRUE.
         ELSE IF(BTU_TAX_ALREADY_ACTIVE) THEN
            DO MO = 1, 12
               BTU_TAX_ACTIVE_THIS_MONTH(MO) = .TRUE.
            ENDDO
            BTU_TAX_ACTIVE_DISP_RPT = .TRUE.
         ENDIF
      ENDIF
C
      ELCPTS = CONVOLUTION_POINTS
      MINLOD = 0.1
      BASE_DATE = (CURRENT_YEAR - 1900) * 100

      REG_VARIABLE_FOSSIL_COSTS = 0.
      ENRG_LIMITED_ENRG = 0. D0
      ENRG_LIMITED_CAPACITY = 0
      ENRG_LIMITED_FIXED_COST(1:4) = 0. D0

      STORAGE_ENRG = 0. D0
      SYSCAP = 0
      TOTAL_SALES_ENERGY = 0. D0
      TOTAL_SALES_REVENUE = 0. D0
      SALES_ENERGY_NOT_IN_FORECAST = 0. D0
      ENRG_LIMITED_PURCHASE_ENERGY = 0. D0
      FIXED_OM_COSTS = 0. D0
      TOTAL_NUCLEAR_FUEL_EXPENSE = 0. D0
      PURCHASE_ENERGY = 0. D0
      PURCHASE_COSTS = 0. D0
      ENERGY_EXCHANGE_ADJUSTMENT = 0.
      CAP_LIMITED_DEMAND = 0. D0
      ANNUAL_ECONOMY_BOUGHT = 0.
      ANNUAL_ECONOMY_SOLD = 0.
      ANNUAL_ECONOMY_COST = 0.
      ANNUAL_ECONOMY_REVENUE = 0.
      ANNUAL_BASE = 9999999.
      ANN_DYN_STORAGE_GEN_ENRG = 0.
      ANN_DYN_STORAGE_PUMP_ENRG = 0.
C
C INITIALIZE ANNUAL SERVICE COSTS VARIABLES
C
      IF(MONTHLY_SERVICE_REPORT_ACTIVE) CALL INIT_TRANS_ANNUAL_COSTS
C
      DO I = 1 , 2
         CLASS_ASSIGNED_ENERGY(I) = 0.
         CLASS_ASS_FOSSIL_COST(I) = 0.
         CLASS_ASS_PURCHASE_COST(I) = 0.
         CLASS_ASS_NUCLEAR_COST(I) = 0.
         CLASS_ASSIGNED_VARIABLE_COST(I) = 0.
         CLASS_ASSIGNED_FIXED_COST(I) = 0.
         CLASS_ASSIGNED_MMBTUS(I) = 0.
         DO EM = 1, NUMBER_OF_EMISSION_TYPES
            CLASS_ASSIGNED_EMISS(EM,I) = 0.
         ENDDO
      ENDDO
      DO I = 1, 4
         ENRG_LIMITED_PURCHASE_EXPENSE(I) = 0.
         ENRG_LIMITED_SALES_REVENUE(I) = 0.
         ENRG_LIMITED_VAR_COST(I) = 0.
         OWNED_NUCLEAR_FUEL_EXPENSE(I) = 0.
         LEASED_NUCLEAR_FUEL_EXPENSE(I) = 0.
         FOSSIL_FUEL_COSTS(I) = 0.
         PURCHASED_POWER_COSTS(I) = 0.
      ENDDO

      ANNUAL_EMIS = 0.
      CALL INIT_EMISSION_REPORT_GROUPS(NUNITS,BASE_DATE,ONLINE,OFLINE)
      DO I = 0, MAX_REPORTING_GROUPS
         GROUP_ENERGY(I) = 0. D0
         GROUP_CAPACITY(I) = 0.
         ANN_EL_CAPACITY(I) = 0.
         ANN_CL_CAPACITY(I) = 0.
         GROUP_MMBTUS(I) = 0. D0
         GROUP_FUEL(I) = 0. D0
         GROUP_VAROM(I) = 0. D0
         GROUP_FIXED_OM(I) = 0. D0
         GROUP_SALES(I) = 0. D0
         GROUP_SALES_REVENUE(I) = 0. D0
         DO EM = 1, NUMBER_OF_EMISSION_TYPES
            GROUP_EMISSIONS(EM,I) = 0.
         ENDDO
      ENDDO
      NBLOK = 0
C
C NEED TO LOAD THE FUEL BALANCES
C
      IF(FUEL_INVENTORY_ACTIVE) THEN
         PSMO = 1
         PEMO = 1
         IF(PRODUCTION_COSTING_PERIODS == 1) THEN
            PEMO = 12

         ENDIF
         CALL GET_FUEL_INVENTORIES(MMBTU_FUEL_BALANCE,YEAR,INT2(1),
     +                                                        PSMO,PEMO)
      ENDIF
      IF(NUNITS > LAST_NUNITS) THEN 
      
         IF(ALLOCATED(BLENDED_BTU_COST)) THEN
            DEALLOCATE(BLENDED_BTU_COST,STAT=ERROR)
         ENDIF
         ALLOCATE(BLENDED_BTU_COST(MAX(NUNITS,1)))
         IF(ALLOCATED(ANNUAL_BLENDED_BTU_COST)) THEN
            DEALLOCATE(ANNUAL_BLENDED_BTU_COST,STAT=ERROR)
            DEALLOCATE(ANNUAL_FUEL_BTU_COST,STAT=ERROR)
            DEALLOCATE(ANNUAL_DISP_BTU_COST,STAT=ERROR)
         ENDIF
!
         ALLOCATE(ANNUAL_BLENDED_BTU_COST(MAX(NUNITS,1)))
         ALLOCATE(ANNUAL_FUEL_BTU_COST(MAX(NUNITS,1)))
         ALLOCATE(ANNUAL_DISP_BTU_COST(MAX(NUNITS,1)))
      ENDIF
      BLENDED_BTU_COST = 0.
      ANNUAL_BLENDED_BTU_COST = 0.
      ANNUAL_FUEL_BTU_COST = 0.
      ANNUAL_DISP_BTU_COST = 0.
!
      GIBSON_POINTER = 0
      GIBSON_BACKUP_POINTER = 0
      PSI_AREA_LAST_RESOURCE_POINTER = 0
      MARKET_PURCHASE_POINTER = 0
C
C SET ALL PRICES
C
      VOID_INT2 = ESCALATE_ALL_VALUES(PBTUCT,PFESCR,NUNITS,UNITNM)
      VOID_INT2 = ESCALATE_ALL_VALUES(SBTUCT,SFESCR,NUNITS,UNITNM)
C      
      VOID_INT2 = ESCALATE_ALL_VALUES(EMISS_FUEL_COST,
     +                                   EMISS_FUEL_ESCAL,NUNITS,UNITNM)
! 

      VOID_INT2 = ESCALATE_ALL_VALUES(CL_AI_ENERGY_RATE,
     +                             CL_AI_ENERGY_ESCALATOR,NUNITS,UNITNM)
      VOID_INT2 = ESCALATE_ALL_VALUES(CL_AI_CAPACITY_RATE,
     +                           CL_AI_CAPACITY_ESCALATOR,NUNITS,UNITNM)
! 
! ADDED FOR STEININGER. 5/19/97. GAT.
!
!
      VOID_INT2 = ESCALATE_ALL_VALUES(ANNUAL_CL_FIXED_COST,
     +                           ANNUAL_CL_FIXED_COST_ESC,NUNITS,UNITNM)
      VOID_INT2 = ESCALATE_FUEL_ADDER_VALUES(SAVE_YEAR,
     +                                     FUELADJ,PFESCR,NUNITS,UNITNM)
C

      IF(ESCALATE_DISP_ADDER) THEN
         VOID_INT2 = ESCALATE_DISP_ADDER_VALUES(SAVE_YEAR,
     +                                           DISPADJ,DISPADJ2,
     +                                             PFESCR,NUNITS,UNITNM)
      ENDIF

      IF(PRODUCTION_COSTING_PERIODS == 1) THEN
         DETAILED_MAINTENANCE_ACTIVE = DETAILED_MAINTENANCE_IS_ACTIVE()
      ELSE
         DETAILED_MAINTENANCE_ACTIVE = CALC_ANNUAL_CAP_AND_MAINT(YEAR)
         IF(DETAILED_MAINTENANCE_ACTIVE) 
     +            GET_ANNUAL_CAPACITY =
     +                            UPDATE_PERIOD_CAPACITY(NUNITS,INT2(1))

      ENDIF

      ECO_SALES_REV_FROM = 0.
      ECO_SALES_ENRG_FROM = 0.
      ECO_PUCH_COST_FROM = 0.
      ECO_PUCH_ENRG_FROM = 0.
      DATE1 = BASE_DATE + 1
      DATE2 = BASE_DATE + 12
!
      IF(YEAR == 1 .AND. GRX_ITERATIONS == 0)
     +                           COAL_MODEL_RAN_LAST_ITERATION = .FALSE. 
      IF(COAL_MODEL_RAN_LAST_ITERATION) THEN
         CALL SET_SCRUBBERS_FROM_COAL_LP(CURRENT_YEAR)
      ENDIF
      DO I = 1, NUNITS
!         
! ADDED 8/9/99. GAT. FOR CPL.
!        
         RTEMP = GET_CL_POOL_FRAC_OWN(I)
         IF(RTEMP >= 0.) THEN
            CL_POOL_FRAC_OWN(I) = RTEMP
         ELSE
            CL_POOL_FRAC_OWN(I) = GET_VAR(RTEMP,YEAR,UNITNM(I))
         ENDIF
!         
         USE_SECONDARY_FUEL(I) = .FALSE.
C
C EMISSIONS BLENDING ADDED 12/30/92
C
         IF(EMISS_BLENDING_RATE(I) > 0.) THEN
            ANNUAL_BLENDED_BTU_COST(I) = 
     +               (1.-EMISS_BLENDING_RATE(I))*PBTUCT(I)+
     +                       EMISS_BLENDING_RATE(I) * EMISS_FUEL_COST(I)
         ELSE
            ANNUAL_BLENDED_BTU_COST(I) = PBTUCT(I)
         ENDIF
         IF(ABS(FUELMX(I)) /= 1.) THEN
            ANNUAL_FUEL_BTU_COST(I) = ABS(FUELMX(I)) * 
     +               ANNUAL_BLENDED_BTU_COST(I) +
     +                                (1. - ABS(FUELMX(I))) * SBTUCT(I)
         ELSE
            ANNUAL_FUEL_BTU_COST(I) = ANNUAL_BLENDED_BTU_COST(I)
         ENDIF
         DISP_BTU_TAX_ADDER(I) = 0.


         FUEL_SUPPLY_ID_4_THIS_YEAR = FUEL_SUPPLY_ID(I)
         IF(FUEL_SUPPLY_ID_4_THIS_YEAR < 0) THEN
            FUEL_SUPPLY_ID_4_THIS_YEAR = 
     +         GET_VAR(FLOAT(
     +                FUEL_SUPPLY_ID_4_THIS_YEAR),YEAR,'FUEL SUPPLY ID')
         ENDIF
         THIS_YEARS_FUEL_SUPPLY_ID(I) = FUEL_SUPPLY_ID_4_THIS_YEAR

         DO_IT = .FALSE.
         IF(FUEL_INVENTORY_ACTIVE) THEN
            IF(THIS_YEARS_FUEL_SUPPLY_ID(I) /= 0) THEN
               IF(FUEL_INVENTORY_ID(
     +                          THIS_YEARS_FUEL_SUPPLY_ID(I)) /= 0) THEN
                  DO_IT = MMBTU_FUEL_BALANCE(
     +               FUEL_INVENTORY_ID(
     +                              THIS_YEARS_FUEL_SUPPLY_ID(I))) == 0.
               ELSE
                  WRITE(4,*) trim(UNITNM(I)),
     +                      ' references fuel inventory number',
     +                       THIS_YEARS_FUEL_SUPPLY_ID(I)
                  WRITE(4,*) 'That fuel ID number was not '//
     +                       'found in the fuel inventory file.'
                  THIS_YEARS_FUEL_SUPPLY_ID(I) = 0
               ENDIF
            ENDIF
         ENDIF
         IF(FUELMX(I) < 0. .OR. DO_IT) THEN
            ANNUAL_DISP_BTU_COST(I) = SBTUCT(I)
            IF(INCLUDE_IN_DISPATCH_ORDER) THEN
               L = INDEX(CAP_LIMIT_FUEL_TYPES,SEC_FUEL_TYPE(I))
               DISP_BTU_TAX_ADDER(I)=CAP_LIMT_BTU_TAX_RATES_GOCN12(L)
            ENDIF
         ELSE
            ANNUAL_DISP_BTU_COST(I) = ANNUAL_FUEL_BTU_COST(I)
            IF(INCLUDE_IN_DISPATCH_ORDER) THEN
               L = INDEX(CAP_LIMIT_FUEL_TYPES,PRIM_FUEL_TYPE(I))
               IF(ABS(FUELMX(I)) /= 1.) THEN
                  DISP_BTU_TAX_ADDER(I) = ABS(FUELMX(I))*
     +                                  CAP_LIMT_BTU_TAX_RATES_GOCN12(L)
                  L = INDEX(CAP_LIMIT_FUEL_TYPES,SEC_FUEL_TYPE(I))
                  DISP_BTU_TAX_ADDER(I) =  DISP_BTU_TAX_ADDER(I) +
     +                              (1. - ABS(FUELMX(I))) *
     +                                  CAP_LIMT_BTU_TAX_RATES_GOCN12(L)
               ELSE
                  DISP_BTU_TAX_ADDER(I) =
     +                                  CAP_LIMT_BTU_TAX_RATES_GOCN12(L)
               ENDIF
            ENDIF
         ENDIF
C
C EMISSION PARAMETERS
C
         IF(I == 1) CALL CREATE_EMISS_BY_UNIT_BY_FUEL(NUNITS)
         PHASE_I_UNIT_OR_NOT_USA(I) = PHASE_I_UNIT(I) .OR. 
     +                      CURRENT_YEAR  > 1999 .OR. COUNTRY() /= 'U'
C         SEASON_EMISSIONS_RATES = UTILITY_TYPE() == 'T'
!
! SET TO TRUE 6/11/98. GAT.
!
         SEASON_EMISSIONS_RATES = .TRUE.
!         
         IF( .NOT. SEASON_EMISSIONS_RATES) THEN
            CALCULATE_NOX = .TRUE.
            NOX_CONTROL_MULT = 1.0
            SOX_CONTROL_MULT = 1.0
            CO2_CONTROL_MULT = 1.0
            HG_CONTROL_MULT = 1.0
            OTHER3_CONTROL_MULT = 1.0
            CALL GET_SEASON_EMISSIONS_RATES(INT2(1),YEAR,UNITNM(I),
     +                            PHASE_I_UNIT_OR_NOT_USA(I),
     +                            SO2(I),P_SO2(I),NOX(I),P_NOX(I),
     +                            PRIM_NOX_BK2(I),P_NOX_BK2(I),
     +                            PARTICULATES(I),P_PARTICULATES(I),
     +                            EMIS_OTH2(I),P_EMIS_OTH2(I),
     +                            EMIS_OTH3(I),P_EMIS_OTH3(I),
     +                            I,'P',CALCULATE_NOX,
     +                            NOX_CONTROL_MULT,
     +                            SOX_CONTROL_MULT,
     +                            CO2_CONTROL_MULT,
     +                            HG_CONTROL_MULT,
     +                            OTHER3_CONTROL_MULT)
            CALL STORE_FUEL_MIX(I,FUELMX(I))
            CALL GET_SEASON_EMISSIONS_RATES(INT2(1),YEAR,UNITNM(I),
     +                            PHASE_I_UNIT_OR_NOT_USA(I),
     +                            SEC_SO2(I),S_SO2(I),
     +                            SEC_NOX_BK1(I),S_NOX_BK1(I),
     +                            SEC_NOX_BK2(I),S_NOX_BK2(I),
     +                            SEC_CO2(I),S_CO2(I),
     +                            SEC_OTH2(I),S_OTHER2(I),
     +                            SEC_OTH3(I),S_OTHER3(I),
     +                            I,'S',CALCULATE_NOX,
     +                            NOX_CONTROL_MULT,
     +                            SOX_CONTROL_MULT,
     +                            CO2_CONTROL_MULT,
     +                            HG_CONTROL_MULT,
     +                            OTHER3_CONTROL_MULT)
            IF(EMISS_BLENDING_RATE(I) > 0.)THEN
               CALL GET_SEASON_EMISSIONS_RATES(INT2(1),YEAR,UNITNM(I),
     +                              PHASE_I_UNIT_OR_NOT_USA(I),
     +                              BLEND_SO2,EMISS_FUEL_SO2(I),
     +                              BLEND_NOX_BK1,EMISS_FUEL_NOX_BK1(I),
     +                              BLEND_NOX_BK2,EMISS_FUEL_NOX_BK2(I),
     +                              BLEND_CO2,EMISS_FUEL_CO2(I),
     +                              BLEND_OTH2,EMISS_FUEL_OTHER2(I),
     +                              BLEND_OTH3,EMISS_FUEL_OTHER3(I),
     +                              I,'B',CALCULATE_NOX,
     +                              NOX_CONTROL_MULT,
     +                              SOX_CONTROL_MULT,
     +                              CO2_CONTROL_MULT,
     +                              HG_CONTROL_MULT,
     +                              OTHER3_CONTROL_MULT)
               B_FUEL = EMISS_BLENDING_RATE(I)
               CALL STORE_BLENDING_MIX(I,B_FUEL)
               P_FUEL = 1. -  B_FUEL
               SO2(I) = P_FUEL * SO2(I) + B_FUEL * BLEND_SO2
               NOX(I) = P_FUEL * NOX(I) + B_FUEL * BLEND_NOX_BK1
               PRIM_NOX_BK2(I) = 
     +                       P_FUEL*PRIM_NOX_BK2(I)+B_FUEL*BLEND_NOX_BK2
               PARTICULATES(I) = 
     +                         P_FUEL*PARTICULATES(I) + B_FUEL*BLEND_CO2
               EMIS_OTH2(I) = 
     +                       P_FUEL * EMIS_OTH2(I) + B_FUEL * BLEND_OTH2
               EMIS_OTH3(I) = 
     +                       P_FUEL * EMIS_OTH3(I) + B_FUEL * BLEND_OTH3
            ENDIF
!
! FOR SCOTT JONES. 12/10/97. GAT.
!
            IF(EFOR(I) < 0.) THEN
               EAVAIL(I) = (100. - GET_VAR(EFOR(I),YEAR,UNITNM(I)))/100.
            ELSE
               EAVAIL(I) = (100. - EFOR(I))/100.
            ENDIF
            IF(HR_FACTOR(I) < 0.) THEN
               HEAT_RATE_FACTOR(I) = 
     +                              GET_VAR(HR_FACTOR(I),YEAR,UNITNM(I))
            ELSE
               HEAT_RATE_FACTOR(I) = HR_FACTOR(I)
            ENDIF
        
         ENDIF
C
C        CAPACITY LIMITED POINTER LOGIC
C
         IF(.NOT. DETAILED_MAINTENANCE_ACTIVE .OR.
     +                             PRODUCTION_COSTING_PERIODS == 1) THEN 
            DO M = 2, 1 , -1
               IF(INPUT_MW(M,I) < 0.) THEN
                  MW(M,I) = GET_VAR(INPUT_MW(M,I),YEAR,UNITNM(I))
                  IF(MW(M,I) < 0.) THEN
                     WRITE(4,*) "Negative value for capacity"
                     WRITE(4,*) "for unit ",UNITNM(I)
                     WRITE(4,*) " "
                  ENDIF
               ELSE
                  MW(M,I) = INPUT_MW(M,I)
               ENDIF
               IF(MW(M,I) < 1. .AND. M == 1) THEN
                  MW(1,I) = MW(2,I) * MW(1,I)
               ELSE
                  MW(M,I) = MW(M,I) * CAP_FRAC_OWN(I)/100.
               ENDIF
            ENDDO
         ENDIF
         CALL HR_CALC(I)

         ANNUAL_CL_UNIT_CAPACITY(I) = 0.
         ANNUAL_CL_UNIT_ENERGY(I) = 0.
         ANNUAL_CL_UNIT_FUEL_COST(I) = 0.
         ANNUAL_CL_UNIT_VAR_COST(I) = 0.
         ANNUAL_CL_UNIT_MMBTUS(I) = 0. D0
         ANNUAL_CL_UNIT_FIXED_COST(I) = 0.
         ANNUAL_NUC_UNIT_FUEL_ADDER_COST(I) = 0.
         CL_AI_INVESTMENT(I) = 0.
         DO EM = 1, 5
            ANNUAL_CL_UNIT_EMISSIONS(EM,I) = 0.
         ENDDO
      ENDDO
!
      VOID_INT2 = ESCALATE_ALL_VALUES(VAROM,VOMESR,HYDRO_UNITS,
     +                                                     EL_UNIT_NAME)
      VOID_INT2 = ESCALATE_ALL_VALUES(HYDRO_FIXED_COST,
     +              HYDRO_FIXED_COST_ESCALATOR,HYDRO_UNITS,EL_UNIT_NAME)
      VOID_INT2 = ESCALATE_ALL_VALUES(HYDRO_ANNUAL_FIXED_COST,
     +             HYDRO_ANNUAL_FIXED_COST_ESC,HYDRO_UNITS,EL_UNIT_NAME)
      VOID_INT2 = ESCALATE_ALL_VALUES(EL_AI_ENERGY_RATE,
     +                  EL_AI_ENERGY_ESCALATOR,HYDRO_UNITS,EL_UNIT_NAME)
      VOID_INT2 = ESCALATE_ALL_VALUES(EL_AI_CAPACITY_RATE,
     +                EL_AI_CAPACITY_ESCALATOR,HYDRO_UNITS,EL_UNIT_NAME)
      EL_AI_INVESTMENT = 0.
      EL_SO2_ANNUAL = 0.
      IF(CURRENT_YEAR > 1999) THEN
         DO I = 1, HYDRO_UNITS
            IF(EL_SO2_RATE(I) < 0.) THEN
               EL_SO2(I) = GET_VAR(EL_SO2_RATE(I),YEAR,
     +                        'EL SO2 rates for unit '//EL_UNIT_NAME(I))
            ELSE
               EL_SO2(I) = EL_SO2_RATE(I)
            ENDIF
         ENDDO
      ELSE
         EL_SO2 = 0.
      ENDIF
C
      CT_SO2_ANNUAL = 0.
C
      DO I = 1 , NUMBER_OF_CONTRACTS
         ANNUAL_CONTRACT_CAPACITY(I) = 0.0
         ANNUAL_CONTRACT_ENERGY(I) = 0.0
         ANNUAL_CONTRACT_VARIABLE_COST(I) = 0.0
         ANNUAL_CONTRACT_FIXED_COST(I) = 0.0
         ANNUAL_CONTRACT_SO2(I) = 0.0
         CNTR_WEIGHTED_CAPACITY(I) = 0.0
         CT_PATTERN_SUM(I) = 0.
         IF(CT_ENERGY_PATTERN_VECTOR(I) /= 0) THEN
            CT_PATTERN_SUM(I) = 
     +                  GET_MONTHLY_VAR_SUM(CT_ENERGY_PATTERN_VECTOR(I))
         ENDIF
      ENDDO
      DO PERIOD_COUNTER = 1, 12
         CALCULATION_ORDER(PERIOD_COUNTER) = PERIOD_COUNTER
      ENDDO
C
C INITIALIZE SERVICE COSTS VARIABLES
C
      IF(SERVICE_TRANSACTIONS_ACTIVE) THEN
         CALL INITIALIZE_SERVICE_VARS(YEAR)
      ELSE
         TRANSMISSION_CHARGES = 0.
         WHEELING_CHARGES = 0.
         STAND_BY_TRANS_CHARGES= 0.
         DISPATCHING_CHARGES = 0.
         OTHER_SERVICE_CHARGES = 0.
         SERVICE_REVENUES = 0.
         SERVICE_EXPENSES = 0.
         SERVICE_ADJ_CLAUSE_EXPENSES = 0.
         SERVICE_BASE_RATE_EXPENSES = 0.
      ENDIF
C
C
      IF(USE_EXTERNAL_PRODUCTION_COST()) RETURN
!
      UNIT_COMMITMENT_LOGIC = YES_UNIT_COMMITMENT_LOGIC()
!
!
!
      IF(CPL_ACTIVE()) THEN
         CALL INIT_CPL_EMC_ANN_CAP
         CALL CPL_CALC_RESERVE_PERCENT
      ENDIF

      DO PERIOD_COUNTER = 1, PRODUCTION_COSTING_PERIODS
         CALL CLEAR_EMISSIONS_BY_FUEL_TYPE
         ISEAS = CALCULATION_ORDER(PERIOD_COUNTER)
         CALL STORE_SERVICE_MONTH(ISEAS) 
         MON_ECO_SALES_REV_FROM = 0.
         MON_ECO_SALES_ENRG_FROM = 0.
         MON_ECO_PUCH_COST_FROM = 0.
         MON_ECO_PUCH_ENRG_FROM = 0.
         MONTHLY_ICAP_REVENUES = 0.

         IF(TRANS_OUTAGE_DATA_ACTIVE .OR. UNIT_COMMITMENT_LOGIC) THEN
            THIS_MONTH_TRANS_OUTAGES = 
     +                   MONTHLY_ACTIVE_TRANS_OUTAGES(ISEAS,NUNITS) 
         ELSE
            THIS_MONTH_TRANS_OUTAGES = .FALSE.
         ENDIF
!
         TEMP_L = UPDATE_STATUS_REPORT(ISEAS)         
!
! 11/17/98. GAT. FOR SCENARIO MAKER.
!
         NUCLEAR_AVAIL_MULT = GET_SCENARIO_NUCLEAR_AVAIL(YEAR,ISEAS) 
         COAL_AVAIL_MULT = GET_SCENARIO_COAL_AVAIL(YEAR,ISEAS) 
         GAS_AVAIL_MULT = GET_SCENARIO_GAS_AVAIL(YEAR,ISEAS)
         OIL_AVAIL_MULT = GET_SCENARIO_OIL_AVAIL(YEAR,ISEAS)
         OTHER_AVAIL_MULT = GET_SCENARIO_OTHER_AVAIL(YEAR,ISEAS)
         HYDRO_WATER_YEAR_MULT = 
     +                         GET_SCENARIO_HYDRO_WATER_YEAR(YEAR,ISEAS)
!
! 5/1/99. GAT. FOR SCENARIO MAKER.
!
         FUEL_SCEN_MULT(1) =  GET_SCENARIO_COAL_PRICES(YEAR,ISEAS)
         FUEL_SCEN_MULT(2) =  GET_SCENARIO_GAS_PRICES(YEAR,ISEAS)
         FUEL_SCEN_MULT(3) =  GET_SCENARIO_OIL_PRICES(YEAR,ISEAS)
         FUEL_SCEN_MULT(4) =  GET_SCENARIO_URANIUM_PRICES(YEAR,ISEAS)
         FUEL_SCEN_MULT(5) = 1.
!         FUEL_SCEN_MULT(4) = 1.
!
         CALL UPDATE_SEASON_FOR_REPORTS(ISEAS)
         EL_SO2_PERIOD(ISEAS) = 0.
         IF(PRODUCTION_COSTING_PERIODS == 1) THEN
            PSMO = 1
            PEMO = 12
         ELSE ! IF(PRODUCTION_COSTING_PERIODS == 12) THEN
            PSMO = ISEAS
            PEMO = ISEAS
C         ELSE
C           USER DEFINED SEASONS       REMOVED USE OF PERIODS 10/18/00
C           PSMO = PERIOD(1,ISEAS)
C           PEMO = PERIOD(2,ISEAS)
         ENDIF
         BTU_TAX_ACTIVE = .FALSE.
         HOURS_INCREMENT = 0
!
! 10/29/02. MOVED UP
! 080406. THIS CALL ALLOCATES AND DEALLOCATES EVERY MONTH. COULD
!         BE SET AT BEGINNING OF EVERY YEAR TO CUT DOWN ON DEALLOCATES
!
         CALL  CALC_TOTAL_DELIVERY_COSTS(NUNITS,ISEAS,YEAR,UNITNM)
!
         VOID_LOGICAL = MONTHLY_USER_DATA_RESET()
         VOID_LOGICAL = ! MOVED 2/1/99. GAT.
     +              MONTHLY_ACTIVE_ENERGY_PRODUCTS(ISEAS,CURRENT_YEAR) 
         VOID_LOGICAL = ! MOVED 2/1/99. GAT.
     +              BEGIN_MONTH_FUEL_DERIVATIVES(ISEAS,CURRENT_YEAR)
         VOID_LOGICAL =  ! THIS MAY NEED TO BE ACCUMULATED TO SEASON
     +      MONTHLY_TRANSACTION_LOADS(YEAR,ISEAS,HOURS_IN_PERIOD(ISEAS))
         VOID_LOGICAL = INIT_CAP_MARKET_REVENUE()
         if(cla_bad(int(I))) then
            call end_program("pro_cost:0001 - capacity_market_" //
     + "pointer_acl(" //trim(itos(int(I))) // ") is invalid.")
     
         endif
         
         VOID_LOGICAL =  CALC_CL_CAP_MARKETS(YEAR,ISEAS)
!
! 031507. 
!
         TEMP_R4 = INIT_MONTHLY_LDC_2_HOURS(HOURS_IN_PERIOD(ISEAS))
!
! 072706.
!     
         VOID_LOGICAL = 
     +      MONTHLY_GAS_DEMAND(YEAR,ISEAS,HOURS_IN_PERIOD(ISEAS))
!
! 080806.
! 062107.
! 051109. PUT BACK IN FOR COST ESCALATION OF SUPPLY CURVES
!         AND RESERVE APPRECIATION.
!
         VOID_LOGICAL =  
     +      MONTHLY_GAS_SUPPLY_CURVES(ISEAS,YEAR)

!
         DO I = PSMO, PEMO
!

!      
            HOURS_INCREMENT = HOURS_INCREMENT + HOURS_IN_PERIOD(I)
            BTU_TAX_ACTIVE = BTU_TAX_ACTIVE .OR. 
     +                                      BTU_TAX_ACTIVE_THIS_MONTH(I)
         ENDDO
C
C CHECK FOR UPDATING SERVICE COSTS
C
         IF(SERVICE_TRANSACTIONS_ACTIVE) THEN
            CALL SERVICE_UPDATE_COSTS(ISEAS,YEAR)
            IF(MONTHLY_SERVICE_REPORT_ACTIVE) 
     +                                       CALL INIT_TRANS_SEASON_TYPE
               
C           CALL SERVICE_UPDATE_COSTS(ISEAS,YEAR,ESCALATION_RATES)
         ENDIF
C
C INITIALIZE FUEL ANNUAL FUEL INVENTORIES ADDED 6/18/92
C MODIFIED 12/31/92, 1/2-3/93 FOR MONTHLY INVENTORIES
C 6/15/93. GAT. MOVED ABOVE UNITS LOOP TO TRAP FOR USE_SEC_FUEL
C
         IF(FUEL_INVENTORY_ACTIVE .AND. PERIOD_COUNTER > 1) THEN
            CALL GET_FUEL_INVENTORIES(MMBTU_FUEL_BALANCE,YEAR,
     +                                PERIOD_COUNTER,PSMO,PEMO)
         ENDIF
C
C
         IF(DETAILED_MAINTENANCE_ACTIVE .AND.
     +                            PRODUCTION_COSTING_PERIODS == 12) THEN
            GET_PERIOD_MAINTENANCE = UPDATE_PERIOD_MAINTENANCE(NUNITS,
     +                                            PEMO,MAINTENANCE_RATE)
            GET_PERIOD_CAPACITY = UPDATE_PERIOD_CAPACITY(NUNITS,PEMO) 
         ENDIF
C
! 
! ADDED FOR JONES. 11/19/97. GAT.
!
!
         IF(ISEAS > 4 .AND. ISEAS < 10 ) THEN
            SEASON_IS_NOX_SEASON = .TRUE.
         ELSE
            SEASON_IS_NOX_SEASON = .FALSE.
         ENDIF
!
         DO I = 1, NUNITS 
            IF(SEASON_EMISSIONS_RATES) THEN
               PHASE_I_UNIT_OR_NOT_USA(I) = PHASE_I_UNIT(I) .OR. 
     +                      CURRENT_YEAR  > 1999 .OR. COUNTRY() /= 'U'
!     
               TG = TRANSACTION_GROUP(I)
               IF(TRANS_NOX_SEASON_ACTIVE) THEN
                  IF(TG > 0 .AND. TG <= MAX_TRANS_GROUP_NUMBER) THEN
                     IF(NOX_ACTIVE_IN_TG(TG)) THEN
                        CALCULATE_NOX = SEASON_IS_NOX_SEASON
                     ELSEIF(.NOT. NOX_YEAR_ACTIVE_IN_TG(TG)) THEN
                        CALCULATE_NOX = .FALSE.
                     ELSE
                        CALCULATE_NOX = .TRUE.
                     ENDIF
                  ELSE
                     CALCULATE_NOX = .TRUE.
                     WRITE(4,*) "TRANSACTION GROUP ",TG
                     WRITE(4,*) "IS OUTSIDE OF RANGE"
                  ENDIF
               ELSE
                  CALCULATE_NOX = .TRUE.
               ENDIF
!               
! 11/12/01. THIS IS CHANGED ONLY IF TRUE. OTHERWISE REVERTS BACK TO PREVIOUS LOGIC.
! 03/04/04. END_NOX_YEAR RULES OVER INFORMATION
!
               IF(CURRENT_YEAR <= END_NOX_YEAR(TG)) THEN
                  VOID_LOGICAL = NOX_ACTIVE_FOR_UNIT(I,ISEAS+BASE_DATE,
     +                                            SEASON_IS_NOX_SEASON,
     +                                            CALCULATE_NOX)
               ENDIF
!               
               NOX_CONTROL_FOR_UNIT =  GET_NOX_CONTROL_FOR_UNIT(
     +                                       I,
     +                                       ISEAS+BASE_DATE,
     +                                       NOX_CONTROL_MULT)
!               
               SOX_CONTROL_FOR_UNIT =  GET_SOX_CONTROL_FOR_UNIT(
     +                                       I,
     +                                       ISEAS+BASE_DATE,
     +                                       SOX_CONTROL_MULT)

!               
               CO2_CONTROL_FOR_UNIT =  GET_CO2_CONTROL_FOR_UNIT(
     +                                       I,
     +                                       ISEAS+BASE_DATE,
     +                                       CO2_CONTROL_MULT,
     +                                       CO2_FIRST_CONTROL_MONTH,
     +                                       CO2_FIRST_CONTROL_YEAR,
     +                                       CO2_YEAR_BEFORE_CONTROL)

! 062809
               ji = i
               IF(RETROFIT_ACTIVE_ID(jI) > 0) THEN 
                  TEMP_I2 = RETROFIT_ACTIVE_ID(jI)
                  CALL RETROFIT_CO2_IMPACT(TEMP_I2,TEMP_R4)
                  CO2_CONTROL_MULT = MIN(1.,1.0 - TEMP_R4/100.0)
c                  CO2_CONTROL_MULT = CO2_CONTROL_MULT * 
c     +                                             (1.0 - TEMP_R4/100.0)
               ENDIF
               HG_CONTROL_FOR_UNIT =  GET_HG_CONTROL_FOR_UNIT(
     +                                       I,
     +                                       ISEAS+BASE_DATE,
     +                                       HG_CONTROL_MULT)

!               
               OTHER3_CONTROL_FOR_UNIT =  GET_OTHER3_CONTROL_FOR_UNIT(
     +                                       I,
     +                                       ISEAS+BASE_DATE,
     +                                       OTHER3_CONTROL_MULT)

!     
               CALL GET_SEASON_EMISSIONS_RATES(ISEAS,YEAR,UNITNM(I),
     +                            PHASE_I_UNIT_OR_NOT_USA(I),
     +                            SO2(I),P_SO2(I),NOX(I),P_NOX(I),
     +                            PRIM_NOX_BK2(I),P_NOX_BK2(I),
     +                            PARTICULATES(I),P_PARTICULATES(I),
     +                            EMIS_OTH2(I),P_EMIS_OTH2(I),
     +                            EMIS_OTH3(I),P_EMIS_OTH3(I),
     +                            I,'P',CALCULATE_NOX,
     +                            NOX_CONTROL_MULT,
     +                            SOX_CONTROL_MULT,
     +                            CO2_CONTROL_MULT,
     +                            HG_CONTROL_MULT,
     +                            OTHER3_CONTROL_MULT)
               CALL STORE_FUEL_MIX(I,FUELMX(I))
               CALL GET_SEASON_EMISSIONS_RATES(ISEAS,YEAR,UNITNM(I),
     +                            PHASE_I_UNIT_OR_NOT_USA(I),
     +                            SEC_SO2(I),S_SO2(I),
     +                            SEC_NOX_BK1(I),S_NOX_BK1(I),
     +                            SEC_NOX_BK2(I),S_NOX_BK2(I),
     +                            SEC_CO2(I),S_CO2(I),
     +                            SEC_OTH2(I),S_OTHER2(I),
     +                            SEC_OTH3(I),S_OTHER3(I),
     +                            I,'S',CALCULATE_NOX,
     +                            NOX_CONTROL_MULT,
     +                            SOX_CONTROL_MULT,
     +                            CO2_CONTROL_MULT,
     +                            HG_CONTROL_MULT,
     +                            OTHER3_CONTROL_MULT)
               IF(EMISS_BLENDING_RATE(I) > 0.)THEN
                  CALL GET_SEASON_EMISSIONS_RATES(ISEAS,YEAR,UNITNM(I),
     +                              PHASE_I_UNIT_OR_NOT_USA(I),
     +                              BLEND_SO2,EMISS_FUEL_SO2(I),
     +                              BLEND_NOX_BK1,EMISS_FUEL_NOX_BK1(I),
     +                              BLEND_NOX_BK2,EMISS_FUEL_NOX_BK2(I),
     +                              BLEND_CO2,EMISS_FUEL_CO2(I),
     +                              BLEND_OTH2,EMISS_FUEL_OTHER2(I),
     +                              BLEND_OTH3,EMISS_FUEL_OTHER3(I),
     +                              I,'B',CALCULATE_NOX,
     +                              NOX_CONTROL_MULT,
     +                              SOX_CONTROL_MULT,
     +                              CO2_CONTROL_MULT,
     +                              HG_CONTROL_MULT,
     +                              OTHER3_CONTROL_MULT)
                  B_FUEL = EMISS_BLENDING_RATE(I)
                  CALL STORE_BLENDING_MIX(I,B_FUEL)
                  P_FUEL = 1. -  B_FUEL
                  SO2(I) = P_FUEL * SO2(I) + B_FUEL * BLEND_SO2
                  NOX(I) = P_FUEL * NOX(I) + B_FUEL * BLEND_NOX_BK1
                  PRIM_NOX_BK2(I) = 
     +                       P_FUEL*PRIM_NOX_BK2(I)+B_FUEL*BLEND_NOX_BK2
                  PARTICULATES(I) = 
     +                         P_FUEL*PARTICULATES(I) + B_FUEL*BLEND_CO2
                  EMIS_OTH2(I) = 
     +                       P_FUEL * EMIS_OTH2(I) + B_FUEL * BLEND_OTH2
                  EMIS_OTH3(I) = 
     +                       P_FUEL * EMIS_OTH3(I) + B_FUEL * BLEND_OTH3
               ENDIF
!
! 030207. FOR ODEC.
!
               IF(.NOT. ESCALATE_DISP_ADDER) THEN
                  RTEMP = GET_DISPADJ_SAVE(I)
                  IF(RTEMP < 0.) THEN
                     RTEMP = GET_VAR(RTEMP,YEAR,UNITNM(I))
                     IF(RTEMP < 0.) THEN
                        DISPADJ(I) = GET_VAR(RTEMP,ISEAS,UNITNM(I))
                     ELSE
                        DISPADJ(I) = RTEMP
                     ENDIF
                  ELSE
                     DISPADJ(I) = RTEMP
                  ENDIF
                  RTEMP = GET_DISPADJ2_SAVE(I)
                  IF(RTEMP < 0.) THEN
                     RTEMP = GET_VAR(RTEMP,YEAR,UNITNM(I))
                     IF(RTEMP < 0.) THEN
                        DISPADJ2(I) = GET_VAR(RTEMP,ISEAS,UNITNM(I))
                     ELSE
                        DISPADJ2(I) = RTEMP
                     ENDIF
                  ELSE
                     DISPADJ2(I) = RTEMP
                  ENDIF
               ENDIF
!
! FOR SCOTT JONES. 12/10/97. GAT.
!
               IF(EFOR(I) < 0.) THEN
                  RTEMP = GET_VAR(EFOR(I),YEAR,UNITNM(I))
                  IF(RTEMP < 0.) THEN
                     EAVAIL(I) = 
     +                  (100. - GET_VAR(RTEMP,ISEAS,UNITNM(I)))/100.
                  ELSE
                     EAVAIL(I) = (100. - RTEMP)/100.
                  ENDIF
               ELSE
                  EAVAIL(I) = (100. - EFOR(I))/100.
               ENDIF
               IF(HR_FACTOR(I) < 0.) THEN
                  HEAT_RATE_FACTOR(I) = 
     +                              GET_VAR(HR_FACTOR(I),YEAR,UNITNM(I))
                  IF(HEAT_RATE_FACTOR(I) < 0.) 
     +                HEAT_RATE_FACTOR(I) = 
     +                      GET_VAR(HEAT_RATE_FACTOR(I),ISEAS,UNITNM(I))
               ELSE
                  HEAT_RATE_FACTOR(I) = HR_FACTOR(I)
               ENDIF

            ENDIF
! 
! ADDED FOR JONES. 11/6/97. GAT.
!
! 8/29/02. ALTERED FOR NOX DISPATCH FOR RDI.
!
            TEMP_UNIT_NAME = UNITNM(I)
            RTEMP = 0.0
            RTEMP_2 = 0.0
            IF(NOX_CONTROL_FOR_UNIT .AND. CALCULATE_NOX) THEN
               RTEMP = GET_NOX_VOM(I)
!            
               IF(RTEMP < -0.1) THEN
                  RTEMP=ABS(RTEMP)
                  RTEMP = 
     +               ESCALATED_MONTHLY_VALUE(RTEMP,
     +                                           INT2(RTEMP),
     +                                           YEAR,ISEAS,INT2(1))
               ELSE
                  TEMP_I2 = ESCALATE_ONE_VALUE(RTEMP,TEMP_I2,
     +                         OMESCR(I),
     +                         TEMP_UNIT_NAME,YEAR)
               ENDIF
!               
               RTEMP_2 = GET_NOX_FOM(I)
!            
               IF(RTEMP_2 < -0.1) THEN
                  RTEMP_2 = ABS(RTEMP_2)
                  RTEMP_2 = 
     +               ESCALATED_MONTHLY_VALUE(RTEMP_2,
     +                                           INT2(RTEMP_2),
     +                                           YEAR,ISEAS,INT2(1))
               ELSE
                  TEMP_I2 = ESCALATE_ONE_VALUE(RTEMP_2,TEMP_I2,
     +                         FIXED_COST_ESCALATOR(I),
     +                         TEMP_UNIT_NAME,YEAR)
               ENDIF
            ENDIF
            RTEMP_3 = 0.0
            RTEMP_4 = 0.0
            IF(SOX_CONTROL_FOR_UNIT .AND. 
     +                                  PHASE_I_UNIT_OR_NOT_USA(I)) THEN
               RTEMP_3 = GET_SOX_VOM(I)
!            
               IF(RTEMP_3 < -0.1) THEN
                  RTEMP_3=ABS(RTEMP_3)
                  RTEMP_3 = 
     +               ESCALATED_MONTHLY_VALUE(RTEMP_3,
     +                                           INT2(RTEMP_3),
     +                                           YEAR,ISEAS,INT2(1))
               ELSE
                  TEMP_I2 = ESCALATE_ONE_VALUE(RTEMP_3,TEMP_I2,
     +                         OMESCR(I),
     +                         TEMP_UNIT_NAME,YEAR)
               ENDIF
!               
               RTEMP_4 = GET_SOX_FOM(I)
!            
               IF(RTEMP_4 < -0.1) THEN
                  RTEMP_4 = ABS(RTEMP_4)
                  RTEMP_4 = 
     +               ESCALATED_MONTHLY_VALUE(RTEMP_4,
     +                                           INT2(RTEMP_4),
     +                                           YEAR,ISEAS,INT2(1))
               ELSE
                  TEMP_I2 = ESCALATE_ONE_VALUE(RTEMP_4,TEMP_I2,
     +                         FIXED_COST_ESCALATOR(I),
     +                         TEMP_UNIT_NAME,YEAR)
               ENDIF
            ENDIF
!
! 101309. MODIFIED THIS SECTION FOR FALL REFERENCE 2009.
!            
            RTEMP_5 = 0.0
            RTEMP_6 = 0.0
            RETRO_VOM = 0.0
            RETRO_FOM = 0.0
            CO2_RETRO_HEAT_MULT = 1.0
            CO2_RETRO_CAP_MULT = 1.0

            IF(CO2_CONTROL_FOR_UNIT .OR. RETROFIT_ACTIVE_ID(I) > 0) THEN   ! Hard Wired 
!

! 071209.                
               IF(RETROFIT_ACTIVE_ID(I) > 0) THEN 
                  TEMP_I2 = RETROFIT_ACTIVE_ID(I)
                  CALL RETROFIT_VOM_ADDER(TEMP_I2,RETRO_VOM,YEAR,ISEAS)
                  CALL RETROFIT_FOM_ADDER(TEMP_I2,RETRO_FOM,YEAR,ISEAS)
                  RTEMP_6 = 0.
                  RTEMP_5 = 0.
               ELSE
                  RTEMP_6 = GET_CO2_FOM(I)
                  RTEMP_5 = GET_CO2_VOM(I)
               ENDIF
               IF(CAPACITY_PLANNING_METHOD() == 'MX'  .AND. 
     +                                  GREEN_MRX_METHOD() == 'GX') THEN
                  IF(HardWiredRetrofitProject(I)) THEN
                     IF(HardWiredRetrofitProjectThisYear(I) .AND.
     +                                         GRX_ITERATIONS == 0) THEN
C                      Add writting this report to ghe GRX output     
                     ENDIF
                  ENDIF
               ENDIF
               CO2_RETRO_HEAT_MULT = GET_CO2_RETRO_HEAT_MULT(I)
               CO2_RETRO_CAP_MULT = GET_CO2_RETRO_CAP_MULT(I)
!
!            
               IF(RTEMP_5 < -0.1) THEN
                  RTEMP_5=ABS(RTEMP_5)
                  RTEMP_5 = 
     +                  ESCALATED_MONTHLY_VALUE(RTEMP_5,
     +                                           INT2(RTEMP_5),
     +                                           YEAR,ISEAS,INT2(1))
               ELSE
                  TEMP_I2 = ESCALATE_ONE_VALUE(RTEMP_5,TEMP_I2,
     +                         OMESCR(I),
     +                         TEMP_UNIT_NAME,YEAR)
               ENDIF

!                 
!            
               IF(RTEMP_6 < -0.1) THEN
                  RTEMP_6 = ABS(RTEMP_6)
                  RTEMP_6 = 
     +                  ESCALATED_MONTHLY_VALUE(RTEMP_6,
     +                                           INT2(RTEMP_6),
     +                                           YEAR,ISEAS,INT2(1))
               ELSE
                  TEMP_I2 = ESCALATE_ONE_VALUE(RTEMP_6,TEMP_I2,
     +                         FIXED_COST_ESCALATOR(I),
     +                         TEMP_UNIT_NAME,YEAR)
               ENDIF
!               
! 
               HEAT_RATE_FACTOR(I) = HEAT_RATE_FACTOR(I) * 
     +                                               CO2_RETRO_HEAT_MULT
! THESE ARE THE MW'S USED FOR OPERATIONS FOR THE REST OF THE YEAR.
             IF(GRX_ITERATIONS == 0 .and. .false.) THEN    
               IF(CO2_FIRST_CONTROL_YEAR) THEN !  .AND. .NOT.
!     +                                 HardWiredRetrofitProject(I)) THEN
!                  MW(1,I) = MW(1,I) * CO2_RETRO_CAP_MULT
!                  MW(2,I) = MW(2,I) * CO2_RETRO_CAP_MULT
               ENDIF
               IF(CO2_FIRST_CONTROL_MONTH) THEN ! .and.       GRX_ITERATIONS== 0 .AND.
!     +                                 HardWiredRetrofitProject(I)) THEN
                  IF(INPUT_MW(1,I) < -.01) THEN
! NEED TO 'POKE' A NEW CAPACITY
                  ELSE
                     INPUT_MW(1,I) = INPUT_MW(1,I) * CO2_RETRO_CAP_MULT
                  ENDIF
                  IF(INPUT_MW(2,I) < -.01) THEN
! NEED TO 'POKE' A NEW CAPACITY
                  ELSE
                     INPUT_MW(2,I) = INPUT_MW(2,I) * CO2_RETRO_CAP_MULT
                  ENDIF
               ENDIF
             ENDIF ! GRX_ITERATIONS== 0
!               
            ENDIF
!            
!               
            RTEMP_7 = 0.0
            RTEMP_8 = 0.0
!            IF(SOX_CONTROL_FOR_UNIT .AND. 
!     +                                  PHASE_I_UNIT_OR_NOT_USA(I)) THEN
            IF(HG_CONTROL_FOR_UNIT) THEN
               RTEMP_7 = GET_HG_VOM(I)
!            
               IF(RTEMP_7 < -0.1) THEN
                  RTEMP_7=ABS(RTEMP_7)
                  RTEMP_7 = 
     +               ESCALATED_MONTHLY_VALUE(RTEMP_7,
     +                                           INT2(RTEMP_7),
     +                                           YEAR,ISEAS,INT2(1))
               ELSE
                  TEMP_I2 = ESCALATE_ONE_VALUE(RTEMP_7,TEMP_I2,
     +                         OMESCR(I),
     +                         TEMP_UNIT_NAME,YEAR)
               ENDIF
!               
               RTEMP_8 = GET_HG_FOM(I)
!            
               IF(RTEMP_8 < -0.1) THEN
                  RTEMP_8 = ABS(RTEMP_8)
                  RTEMP_8 = 
     +               ESCALATED_MONTHLY_VALUE(RTEMP_8,
     +                                           INT2(RTEMP_8),
     +                                           YEAR,ISEAS,INT2(1))
               ELSE
                  TEMP_I2 = ESCALATE_ONE_VALUE(RTEMP_8,TEMP_I2,
     +                         FIXED_COST_ESCALATOR(I),
     +                         TEMP_UNIT_NAME,YEAR)
               ENDIF
            ENDIF

            RTEMP_9 = 0.0
            RTEMP_10 = 0.0

            IF(OTHER3_CONTROL_FOR_UNIT) THEN
               RTEMP_9 = GET_OTHER3_VOM(I)
!            
               IF(RTEMP_9 < -0.1) THEN
                  RTEMP_9=ABS(RTEMP_9)
                  RTEMP_9 = 
     +               ESCALATED_MONTHLY_VALUE(RTEMP_9,
     +                                           INT2(RTEMP_9),
     +                                           YEAR,ISEAS,INT2(1))
               ELSE
                  TEMP_I2 = ESCALATE_ONE_VALUE(RTEMP_9,TEMP_I2,
     +                         OMESCR(I),
     +                         TEMP_UNIT_NAME,YEAR)
               ENDIF
!               
               RTEMP_10 = GET_OTHER3_FOM(I)
!            
               IF(RTEMP_10 < -0.1) THEN
                  RTEMP_10 = ABS(RTEMP_10)
                  RTEMP_10 = 
     +               ESCALATED_MONTHLY_VALUE(RTEMP_10,
     +                                           INT2(RTEMP_10),
     +                                           YEAR,ISEAS,INT2(1))
               ELSE
                  TEMP_I2 = ESCALATE_ONE_VALUE(RTEMP_10,TEMP_I2,
     +                         FIXED_COST_ESCALATOR(I),
     +                         TEMP_UNIT_NAME,YEAR)
               ENDIF
            ENDIF
!
!            ENDIF
!

! 
! 3/20/10 retor_vom and retro_fom missing from these equations MSG
           
            VCPMWH(I) = ESCALATE_THERMAL_VOM(YEAR,ISEAS,I) + RETRO_VOM +
     +                  RTEMP + RTEMP_3 + RTEMP_5 + RTEMP_7 + RTEMP_9
            FIXED_COST(I) = 
     +            ESCALATE_THERMAL_FOM(YEAR,ISEAS,I) + RETRO_FOM +
     +                  RTEMP_2 + RTEMP_4 + RTEMP_6 + RTEMP_8 + RTEMP_10

            IF(.NOT. DETAILED_MAINTENANCE_ACTIVE .OR.
     +                             PRODUCTION_COSTING_PERIODS == 1) THEN
               IF(DETAILED_MAINTENANCE_ACTIVE) THEN
                  MAINTENANCE_RATE(I) = UNSCHEDULED_MAINT_HOURS(I)
               ELSE
                  MAINTENANCE_RATE(I) = 0.
               ENDIF
               DO J = PSMO, PEMO
C            
C                 TEST WHETHER THE UNIT IS ONLINE DURING THE YEAR.
C
                  DATE1 = BASE_DATE + J
                  IF(ONLINE(I) <= DATE1 .AND. OFLINE(I) >= DATE1) THEN
                     IF(MNRATE(I,J) < 0.) THEN
                        IF(OFFSET_MAINTENANCE_VECTORS() .AND.
     +                              I > NUM_UNITS_BEFORE_ADDITIONS) THEN
                           GET_YR = 
     +                           YEAR-(ONLINE(I)/100+1900 - BASE_YEAR)+1
                        ELSE
                           GET_YR = YEAR
                        ENDIF
                        MN_RATE = GET_VAR(MNRATE(I,J),GET_YR,UNITNM(I))
                        MAINTENANCE_RATE(I) = MAINTENANCE_RATE(I) + 
     +                     HOURS_IN_PERIOD(J) * MIN(100.,MN_RATE)
                     ELSE
                        MAINTENANCE_RATE(I) = MAINTENANCE_RATE(I) +
     +                        HOURS_IN_PERIOD(J) * MIN(100.,MNRATE(I,J))
                     ENDIF
                  ELSE
                     MAINTENANCE_RATE(I) = MAINTENANCE_RATE(I) +
     +                                         HOURS_IN_PERIOD(J) * 100.
                  ENDIF
               ENDDO
               MAINTENANCE_RATE(I) = MAINTENANCE_RATE(I) / 
     +                                            (100.*HOURS_INCREMENT)
            ENDIF
C 6/15/93. GAT.
            FUEL_ID = FUEL_INVENTORY_ID(THIS_YEARS_FUEL_SUPPLY_ID(I))
            IF(MONTHLY_INVENTORY_ACTIVE .AND. 
     +                  (USE_SECONDARY_FUEL(I) .OR.
     +                        I < SHADOW_UNIT_NUMBER(I)) .AND.
c the following 2 lines replace the commented out line 10/22/01 msg FUEL_ID can be zero
     +                   FUEL_ID > 0 .AND.
     +                   MMBTU_FUEL_BALANCE(FUEL_ID) > 0.0 .AND.

     +               J /= 1) THEN
               USE_SECONDARY_FUEL(I) = .FALSE.
               IF(FUELMX(I) < 0.) THEN
                  ANNUAL_DISP_BTU_COST(I) = SBTUCT(I)
               ELSE
                  ANNUAL_DISP_BTU_COST(I) = ANNUAL_FUEL_BTU_COST(I)
               ENDIF
            ENDIF
C
C SET NUC PLANT COSTS BASED ON NUCLEAR FUEL FILE. 7/19/96
C
            IF(LDTYPE(I) == 'N' .AND.
     +                           NUC_FUEL_PRICE_SOURCE_IS_NFILE(I)) THEN
               CALL RETURN_NUC_FUEL_PRICES(I,PSMO,SAVE_YEAR,
     +                                LEASOR_MARK_UP,NUC_GEN_UNIT_FOUND)
               IF(NUC_GEN_UNIT_FOUND) THEN
                  FUEL_ADDER_ADJUSTMENT(I) = FUELADJ(I) + LEASOR_MARK_UP
                  ANNUAL_BLENDED_BTU_COST(I) = PBTUCT(I)
                  ANNUAL_FUEL_BTU_COST(I) = ANNUAL_BLENDED_BTU_COST(I)
                  ANNUAL_DISP_BTU_COST(I) = ANNUAL_FUEL_BTU_COST(I)
               ELSE
                  FUEL_ADDER_ADJUSTMENT(I) = FUELADJ(I)
               ENDIF
            ELSE
               FUEL_ADDER_ADJUSTMENT(I) = FUELADJ(I)
            ENDIF
!
! 5/1/99. GAT.
! MONTHLY FUEL PRICES HAVE BEEN CALCULATED AT THIS POINT
!
            FT = GET_PRIMARY_MOVER(I)
!            
! OUTAGES ADDED 5/22/99. GAT.
!
            IF(FT == 1) THEN
               EAVAIL(I) = MIN(EAVAIL(I) * COAL_AVAIL_MULT,1.0)
            ELSEIF(FT == 2) THEN
               EAVAIL(I) = MIN(EAVAIL(I) * GAS_AVAIL_MULT,1.0)
            ELSEIF(FT ==3) THEN
               EAVAIL(I) = MIN(EAVAIL(I) * OIL_AVAIL_MULT,1.0)
            ELSEIF(FT == 4) THEN 
               EAVAIL(I) = MIN(EAVAIL(I) * NUCLEAR_AVAIL_MULT,1.0)
            ELSEIF(FT == 5) THEN 
!
               TEMP_HYDRO_ENERGY = 1.0
               IF(IS_REGIONAL_HYDRO_PARAM_ACTIVE) THEN
!                  TG = HYDRO_TRANS_GROUP(I)
                  TEMP_HYDRO_ENERGY = GET_PARAM_HYDRO(YEAR,ISEAS,TG)
               ENDIF
!
               EAVAIL(I) = EAVAIL(I) * HYDRO_WATER_YEAR_MULT * 
     +                                                 TEMP_HYDRO_ENERGY
            ELSEIF(FT == 6) THEN
               EAVAIL(I) = MIN(EAVAIL(I) * OTHER_AVAIL_MULT,1.0)
            ENDIF
!
! REGIONAL OUTAGES ADDED 10/18/01.
!
            IF(YES_REGIONAL_OUTAGES_ACTIVE) THEN
               TG = TRANSACTION_GROUP(I)
               EAVAIL(I) = MIN(1.0, 
     +                 EAVAIL(I) * 
     +                    GET_MONTHLY_REGIONAL_OUTAGE(YEAR,ISEAS,TG,FT))
            ENDIF
!            
            IF(FT > 4 .OR. FT < 1) FT = 5
!            
! NEED TO RE-WRITE FOR INVENTORY LOGIC.
!         PBTUCT(I) = PBTUCT(I) * FUEL_SCEN_MULT(FT)
!         SBTUCT(I) = SBTUCT(I) * FUEL_SCEN_MULT(FT)
!
! ADDED 7/25/99. GAT.
!
            RTEMP = GET_MONTHLY_FUEL_INDEX(I,ISEAS)
!            
            CALL GET_TOTAL_DELIVERY_COST(P_DELIVERY_COST,I)
            CALL GET_TOTAL_S_DELIVERY_COST(S_DELIVERY_COST,I)
!
! 6/26/00. MOVED CALCULATION OF FUEL PRICES INSIDE UNITS LOOP.
!          THIS PERMITS SCENARIO MAKER TO BE ACTIVE FOR THE FUEL
!          PRICE FILE.
            IF(FUEL_PRICE_DATA_AVAILABLE) THEN
!            IF(FUEL_PRICE_DATA_AVAILABLE .AND.
!     +                   (.NOT. COAL_MODEL_RAN_LAST_ITERATION .OR.
!     +                                  GET_PRIMARY_MOVER(I) /= 1)) THEN
               CALL GET_FUEL_PRICES_BY_UNIT(I,PSMO,PEMO,SAVE_YEAR,
     +                            PBTUCT,SBTUCT,FUEL_BTU_COST,FUELMX,
     +                            DISP_BTU_COST,MMBTU_FUEL_BALANCE,
     +                            FUEL_INVENTORY_ID,
     +                            FUEL_INVENTORY_ACTIVE,
     +                            EMISS_FUEL_COST,EMISS_FUEL_ESCAL,
     +                            EMISS_BLENDING_RATE,BLENDED_BTU_COST,
     +                            THIS_YEARS_FUEL_SUPPLY_ID,UNITNM,
     +                            FUEL_POINTERS_USED)
!     +                            FUEL_SCEN_MULT(FT),RTEMP)
!
!
               IF(FUEL_POINTERS_USED) THEN
!               
! 08/30/02. THESE EMBED THE PRIMARY AND SECONDARY DELIVERY COMPONENTS
!
                  FUEL_BTU_COST(I) = 
!     +               (FUEL_BTU_COST(I) + P_DELIVERY_COST) *
     +               FUEL_BTU_COST(I) *
     +                                        FUEL_SCEN_MULT(FT) * RTEMP
                  DISP_BTU_COST(I) = 
!     +               (DISP_BTU_COST(I) + P_DELIVERY_COST) * 
     +               DISP_BTU_COST(I) * 
     +                                        FUEL_SCEN_MULT(FT) * RTEMP
                  BLENDED_BTU_COST(I) = 
!     +               (BLENDED_BTU_COST(I) + P_DELIVERY_COST) * 
     +               BLENDED_BTU_COST(I) * 
     +                                        FUEL_SCEN_MULT(FT) * RTEMP
               ELSE
!
                  FUEL_BTU_COST(I) = 
     +               (ANNUAL_FUEL_BTU_COST(I) + P_DELIVERY_COST ) * 
     +                                        FUEL_SCEN_MULT(FT) * RTEMP
                  DISP_BTU_COST(I) = 
     +               (ANNUAL_DISP_BTU_COST(I) + P_DELIVERY_COST ) * 
     +                                        FUEL_SCEN_MULT(FT) * RTEMP
                  BLENDED_BTU_COST(I) = 
     +               (ANNUAL_BLENDED_BTU_COST(I) + P_DELIVERY_COST) * 
     +                                        FUEL_SCEN_MULT(FT) * RTEMP
               ENDIF
            ELSE
!
               FUEL_BTU_COST(I) = 
     +               (ANNUAL_FUEL_BTU_COST(I) + P_DELIVERY_COST ) * 
     +                                        FUEL_SCEN_MULT(FT) * RTEMP
               DISP_BTU_COST(I) = 
     +               (ANNUAL_DISP_BTU_COST(I) + P_DELIVERY_COST ) * 
     +                                        FUEL_SCEN_MULT(FT) * RTEMP
               BLENDED_BTU_COST(I) = 
     +               (ANNUAL_BLENDED_BTU_COST(I) + P_DELIVERY_COST) * 
     +                                        FUEL_SCEN_MULT(FT) * RTEMP
            ENDIF
!            
! 121406. PROVIDE LINKAGE FROM GAS MODEL TO POWER MODEL.
!            
            IF(FT == 2 .AND. GAS_MODEL_ACTIVE .AND. 
     +                                  .NOT. HH_ONLY .AND.
     +                                          GAS_DATA_AVAILABLE) THEN
!
! INCLUDE DELIVERY ADDERS?
! INCLUDE MONTHLY FUEL INDEX?
! INCLUDE STOCHASTIC MULTIPIERS?
! CONVERT FROM $/MCF TO $/MMBTU
!
               GSP = MIN(MAX(0,GET_UNIT_GAS_REGION_INDEX(I)),
     +                                                MAX_GAS_REGION_NO)
!
!               IF(GSP == 69) THEN
!                  GSP = GSP
!               ENDIF     
!
! TEMP. TO CAPTURE ALL PA UNITS IN THE GAS MODEL.
!
!               IF(ISEAS == 2 .AND. GSP == 39) THEN
!                  WRITE(4,*) UNITNM(I)
!               ENDIF
!
               TEMP_R4 = GET_MONTHLY_GAS_PRICE_BY_STATE(GSP,ISEAS)
!
! 081308. FIXED BAD ASSIGNMENT. DEFAULT TO INITIAL PRICE.
!               
               IF(TEMP_R4 < -1.0) THEN
!               IF(TEMP_R4 < 0.01) THEN
                  WRITE(4,*) "GAS PRICE NOT FOUND FOR UNIT",UNITNM(I)
               ELSE
                  FUEL_BTU_COST(I) = TEMP_R4
                  DISP_BTU_COST(I) = TEMP_R4
                  BLENDED_BTU_COST(I) = TEMP_R4
               ENDIF
            ENDIF
!
!
! 05/09/03. IF TRUE THIS ALTERS BLKNO = 0 (MUST RUN CONDITION) ON A MONTHLY BASIS
!
            VOID_LOGICAL = TEST_MONTHLY_MUST_RUN(I,ISEAS)
!
! REPORT COST VALUES
           if(.false.) then
            IF(YEAR ==1 .AND. GRX_ITERATIONS == 0 .AND.
     +                                      I ==1 .and. iseas == 1) THEN
               WRITE(16742,"(1X,A)")
     +                "Year,Iters,UnitName,PrimFuel,DispCost,SecFuel,"//
     +                      "FuelAdder,FixedCost,VarCost,EmissFuel"
            ENDIF
            IF((I < 4 .OR. (I > GRX_NUNITS .AND. i < GRX_NUNITS+3)).AND.
     +                                                       ISEAS == 1)
     +         WRITE(16742,"(1X,I4,',',I2,',',20(A,','))") CURRENT_YEAR,
     +                  GRX_ITERATIONS,
     +                  trim(CONVERT_2_STR(UNITNM(I)//'-'//
     +                                               CONVERT_2_STR(I))),
     +                  CONVERT_2_STR(PBTUCT(I)),             
     +                  CONVERT_2_STR(DISP_BTU_COST(I)),             
     +                  CONVERT_2_STR(SBTUCT(I)),            
     +                  CONVERT_2_STR(FUEL_ADDER_ADJUSTMENT(I)),            
     +                  CONVERT_2_STR(FIXED_COST(I)),           
     +                  CONVERT_2_STR(VCPMWH(I)),
     +                  CONVERT_2_STR(EMISS_FUEL_COST(I))            
!     +                  CONVERT_2_STR(), 
            endif           
            
         ENDDO ! NUNITS
C
      IF(COAL_MODEL_RAN_LAST_ITERATION) THEN
         CALL COAL_PRICES_TRANSFERRED_MIDAS(ISEAS,CURRENT_YEAR,
     +                                         END_POINT,
     +                                         PBTUCT,
     +                                         FUEL_BTU_COST,
     +                                         DISP_BTU_COST,
     +                                         BLENDED_BTU_COST,
     +                                         SO2)
      ENDIF
!
! 6/26/00. 
!
         IF(FUEL_PRICE_DATA_AVAILABLE .AND. NUNITS <= 0) THEN
               WRITE(4,*) "Fuel Price file active when there are no"
               WRITE(4,*) "generating units.  Fuel prices are bypassed."
         ENDIF

         IF(KEPCO) THEN
            DATE1 = BASE_DATE + PSMO
            DATE2 = BASE_DATE + PEMO
            DO I = 1, NUNITS
               IF(ONLINE(I) > DATE2 .OR. OFLINE(I) < DATE1) CYCLE
               IF(LDTYPE(I) == 'N' .AND. REALLY_KEPCO) THEN
                  WOLF_CREEK_ENRG_COST = (PBTUCT(I) * 
     +                                       HEAT_RATE_FACTOR(I) *
     +                                       COEFF(1,I))/1000.+VCPMWH(I)
               ENDIF
               IF(WABASH_VALLEY) THEN
                  CALL UPC(UNITNM(I),TEMP_UNIT_NAME)
                  IF(INDEX(TEMP_UNIT_NAME,'GIB') /= 0) THEN
                     IF(INDEX(TEMP_UNIT_NAME,'BACK') /= 0 .OR.
     +                         INDEX(TEMP_UNIT_NAME,'REPLACE') /=0) THEN
                        GIBSON_BACKUP_POINTER = I
                     ELSE
                        GIBSON_POINTER = I
                     ENDIF
                  ELSEIF(INDEX(TEMP_UNIT_NAME,'MARK') /= 0 .AND.
     +                           INDEX(TEMP_UNIT_NAME,'PURC') /= 0) THEN
                     MARKET_PURCHASE_POINTER = I
                  ELSEIF(INDEX(TEMP_UNIT_NAME,'PSI') /= 0 .AND.
     +                      (INDEX(TEMP_UNIT_NAME,'SEA') /= 0 .OR.
     +                          INDEX(TEMP_UNIT_NAME,'SUPP') /= 0)) THEN
                     PSI_AREA_LAST_RESOURCE_POINTER = I
                  ELSE
                     IF(WABASH_IM_NIPSCO) THEN
C
C IF PSI IS A STAND ALONE AREA AND THIS UNIT IS ALLOCATED TO THAT AREA
C
                        POINTER = CL_ALLOCATE_POINTR(CL_RESOURCE_ID(I))
                        IF(AREA_CAP_ALLOCATORS(3,ISEAS,POINTER) /= 0.)
     +                                PSI_AREA_LAST_RESOURCE_POINTER = I
                     ENDIF
                  ENDIF
               ENDIF
            ENDDO
         ENDIF ! KEPCO OR WABASH
C
         RESOURCE_CAP = 0.
         DO I = 1, NUNITS
            IF(WABASH_VALLEY .AND. I == GIBSON_BACKUP_POINTER .AND.
     +                                         GIBSON_POINTER /= 0) THEN
               MW(1,I) = MW(1,GIBSON_POINTER)
               MW(2,I) = MW(2,GIBSON_POINTER)
               MAINTENANCE_RATE(I) = 1.-MAINTENANCE_RATE(GIBSON_POINTER)
               CYCLE
            ENDIF
C
            IF(.NOT. DETAILED_MAINTENANCE_ACTIVE .OR.
     +                             PRODUCTION_COSTING_PERIODS == 1) THEN
C            
               IF(DETAILED_MAINTENANCE_ACTIVE) THEN
                  MAINTENANCE_RATE(I) = UNSCHEDULED_MAINT_HOURS(I)
               ELSE
                  MAINTENANCE_RATE(I) = 0.
               ENDIF
C
               IF(MONTHLY_CAPACITY_POINTER(I) /= 0) THEN
                  MW(1,I) = 0.
                  MW(2,I) = 0.
               ENDIF
               WEIGHTED_HOURS = 0.
               DO J = PSMO, PEMO
          
                  IF(MONTHLY_CAPACITY_POINTER(I) /= 0) THEN
                     IF(CL_CAP_AREA_LINKED(I)) THEN
                        PERIOD_RATE =GET_CLASS_PEAK_NET_DSM(J,UNITNM(I),
     +                                 ABS(MONTHLY_CAPACITY_POINTER(I)))
                     ELSE
                        PERIOD_RATE = GET_VAR(FLOAT(
     +                    ABS(MONTHLY_CAPACITY_POINTER(I))),J,UNITNM(I))
                     ENDIF
                     DO M = 2 , 1, -1
                        IF(INPUT_MW(M,I) < 0.) THEN
                           MW_CAPACITY = GET_VAR(INPUT_MW(M,I),YEAR,
     +                                                        UNITNM(I))
                           IF(MW_CAPACITY < 0.) THEN
                              MW_CAPACITY = GET_VAR(MW_CAPACITY,
     +                                                      J,UNITNM(I))
                           ENDIF
                        ELSE
                           MW_CAPACITY = INPUT_MW(M,I)
                        ENDIF
                        IF(PERIOD_RATE > 2.) THEN
                           IF(MW_CAPACITY > 0.) THEN
                              PERIOD_RATE = PERIOD_RATE/MW_CAPACITY
                           ELSE
                              MW_CAPACITY = PERIOD_RATE
                              PERIOD_RATE = 1.
                           ENDIF
                        ENDIF
                        IF(MW_CAPACITY < 1. .AND. M == 1) THEN
                           RTEMP = MW_CAPACITY * UNIT_CAPACITY
                        ELSE
                           RTEMP = MW_CAPACITY * CAP_FRAC_OWN(I)/100. *
     +                                    PERIOD_RATE*HOURS_IN_PERIOD(J)
                        ENDIF
                        IF(M == 2) UNIT_CAPACITY = RTEMP
                        MW(M,I) = MW(M,I) + RTEMP
                     ENDDO
                  ELSE
                     UNIT_CAPACITY = MW(2,I) * HOURS_IN_PERIOD(J)
                  ENDIF
                  WEIGHTED_HOURS = WEIGHTED_HOURS + UNIT_CAPACITY
C           
                  DATE1 = BASE_DATE + J
                  IF(ONLINE(I) <= DATE1 .AND. OFLINE(I) >= DATE1) THEN
C           
C                    NEED TO WEIGHT MAINTENANCE BY HOURS AND CAPACITY
C           
                     IF(MNRATE(I,J) < 0.) THEN
                        IF(OFFSET_MAINTENANCE_VECTORS() .AND.
     +                              I > NUM_UNITS_BEFORE_ADDITIONS) THEN
                           GET_YR=YEAR-(ONLINE(I)/100+1900-BASE_YEAR)+1
                        ELSE
                           GET_YR = YEAR
                        ENDIF
                        MN_RATE = GET_VAR(MNRATE(I,J),GET_YR,UNITNM(I))
                        MAINTENANCE_RATE(I) = MAINTENANCE_RATE(I) + 
     +                                MIN(100.,MN_RATE) * UNIT_CAPACITY
                     ELSE
                        MAINTENANCE_RATE(I) = MAINTENANCE_RATE(I) +
     +                             MIN(100.,MNRATE(I,J)) * UNIT_CAPACITY
                     ENDIF
                  ELSE
                     MAINTENANCE_RATE(I) = MAINTENANCE_RATE(I) +
     +                                              100. * UNIT_CAPACITY
                  ENDIF
               ENDDO
               IF(WEIGHTED_HOURS > 0.0) THEN
                  MAINTENANCE_RATE(I) = MAINTENANCE_RATE(I) / 
     +                                       (100.*WEIGHTED_HOURS)
               ENDIF
               IF(MONTHLY_CAPACITY_POINTER(I) /= 0) THEN
                  MW(1,I) = MW(1,I)/HOURS_INCREMENT
                  MW(2,I) = MW(2,I)/HOURS_INCREMENT
               ENDIF
            ENDIF
C
            IF(WABASH_VALLEY) THEN
               DATE1 = BASE_DATE + PSMO
               DATE2 = BASE_DATE + PEMO
               IF(ONLINE(I) <= DATE1 .AND. OFLINE(I) >= DATE2  .AND.
     +               MAINTENANCE_RATE(I) < 1. .AND. EAVAIL(I) > 0.) THEN
                  ARRAY_POINTR = CL_ALLOCATE_POINTR(CL_RESOURCE_ID(I))
                  UNIT_CAPACITY = MW(2,I)
                  TOTAL_AREA_CAP_ALLOCATORS = 0.
                  TOTAL_AREA_LOSSES = 0.
                  DO AREA = 1, NUMBER_OF_AREAS
C
C ALLOCATE CAPACITY FIRST
C
                     CAP_ALLOCATOR =
     +                      AREA_CAP_ALLOCATORS(AREA,ISEAS,ARRAY_POINTR)
                     IF(CAP_ALLOCATOR < 0.) CAP_ALLOCATOR = 
     +                             GET_VAR(CAP_ALLOCATOR,YEAR,UNITNM(I))
                     IF(CAP_ALLOCATOR <= 1. .AND.
     +                          .NOT. CAPACITY_ALLOCATION_ABSOLUTE) THEN
                        CAP_ALLOCATOR = CAP_ALLOCATOR * UNIT_CAPACITY
                     ENDIF
                     TOTAL_AREA_CAP_ALLOCATORS = CAP_ALLOCATOR +
     +                                         TOTAL_AREA_CAP_ALLOCATORS
                     TOTAL_AREA_LOSSES = TOTAL_AREA_LOSSES +
     +                                    CAP_ALLOCATOR/
     +                (1.-AREA_CAPACITY_LOSSES(AREA,ISEAS,ARRAY_POINTR))
                     IF(.NOT. CL_CAP_AREA_LINKED(I)) THEN
                        RESOURCE_CAP(AREA) = RESOURCE_CAP(AREA) + 
     +                                                   CAP_ALLOCATOR * 
     +                (1.-AREA_CAPACITY_LOSSES(AREA,ISEAS,ARRAY_POINTR))
                     ENDIF
                  ENDDO
                  IF(CL_CAP_AREA_LINKED(I)) THEN
                     IF(TOTAL_AREA_CAP_ALLOCATORS /= 0.) THEN
                        UNIT_CAPACITY = MW(2,I) * TOTAL_AREA_LOSSES/
     +                                    TOTAL_AREA_CAP_ALLOCATORS
                        MW(1,I) = MW(1,I)*UNIT_CAPACITY/MW(2,I)
                        MW(2,I) = UNIT_CAPACITY
                     ENDIF
                  ENDIF
               ENDIF
            ENDIF
         ENDDO ! end thermal units
C
C
         DO I = 1, HYDRO_UNITS
            HYDRO_MONTHLY_ENRG(I) = 0. D0
            HYDROCAPMO(I) = 0. D0
            DO J = PSMO, PEMO
               IF(IN_CAPMO(J,I) .LT. 0) THEN
                  TEMP_HYDRO_CAP = HOURS_IN_PERIOD(J) *
     +                     GET_VAR(IN_CAPMO(J,I),YEAR,
     +                            'from the Energy Limited File')
               ELSE
                  TEMP_HYDRO_CAP = HOURS_IN_PERIOD(J) * IN_CAPMO(J,I)
               ENDIF
               HYDROCAPMO(I) = HYDROCAPMO(I) + TEMP_HYDRO_CAP
C
               IF(ENRGMO(J,I) .LT. 0.) THEN
                  TEMP_HYDRO_ENERGY =  GET_VAR(ENRGMO(J,I),YEAR,
     +                                   'from the Energy Limited File')
               ELSE
                  TEMP_HYDRO_ENERGY = ENRGMO(J,I)
               ENDIF
!
               TEMP_HYDRO_ENERGY = TEMP_HYDRO_ENERGY * 
     +                                             HYDRO_WATER_YEAR_MULT
!
               IF(IS_REGIONAL_HYDRO_PARAM_ACTIVE) THEN
                  TG = HYDRO_TRANS_GROUP(I)
                  TEMP_HYDRO_ENERGY = TEMP_HYDRO_ENERGY * 
     +                                    GET_PARAM_HYDRO(YEAR,ISEAS,TG)
               ENDIF
!
               IF(TEMP_HYDRO_ENERGY < 1.0) THEN
                  IF(TEMP_HYDRO_ENERGY < 0.) TEMP_HYDRO_ENERGY = 0.
                  HYDRO_MONTHLY_ENRG(I) = HYDRO_MONTHLY_ENRG(I) +
     +                                  TEMP_HYDRO_ENERGY*TEMP_HYDRO_CAP
               ELSE
                  HYDRO_MONTHLY_ENRG(I) = HYDRO_MONTHLY_ENRG(I) + 
     +                                                 TEMP_HYDRO_ENERGY
               ENDIF
C
            ENDDO
            HYDROCAPMO(I) = HYDROCAPMO(I)/HOURS_INCREMENT
         ENDDO
C
C CONTRACTS
C
         DATE1 = BASE_DATE + PSMO
         DATE2 = BASE_DATE + PEMO
         DO I = 1, NUMBER_OF_CONTRACTS
! TEST THE MONTHLY ESCALATION FILE          
            CT_FIRST_ENERGY_PRICE(I) = ESCALATED_MONTHLY_VALUE(
     +                        CT_FIRST_ENERGY_PRICE(I),CNTR_ENER_ESC(I),
     +                        YEAR,ISEAS,UPDATE_MONTH(I))
            CT_SECOND_ENERGY_PRICE(I) = ESCALATED_MONTHLY_VALUE(
     +                                        CT_SECOND_ENERGY_PRICE(I),
     +                                    CT_SECOND_ENERGY_ESCALATOR(I),
     +                                       YEAR,ISEAS,UPDATE_MONTH(I))
            CT_ENERGY_COST_ADDER(I) =  ESCALATED_MONTHLY_VALUE(
     +                                          CT_ENERGY_COST_ADDER(I),
     +                               CT_ENERGY_COST_ADDER_ESC_VECTOR(I),
     +                                       YEAR,ISEAS,UPDATE_MONTH(I))
            MIN_CONTRACT_FIXED_COST(I) = ESCALATED_MONTHLY_VALUE(
     +                                       MIN_CONTRACT_FIXED_COST(I),
     +                                              CNTR_MIN_CAP_ESC(I),
     +                                       YEAR,ISEAS,UPDATE_MONTH(I))
            CONTRACT_FIXED_COST(I) = ESCALATED_MONTHLY_VALUE(
     +                                           CONTRACT_FIXED_COST(I),
     +                                                  CNTR_CAP_ESC(I),
     +                                       YEAR,ISEAS,UPDATE_MONTH(I))
            CT_ANNUAL_FIXED_COST(I) = ESCALATED_MONTHLY_VALUE(
     +                                          CT_ANNUAL_FIXED_COST(I),
     +                                      CT_ANNUAL_FIXED_COST_ESC(I),
     +                                       YEAR,ISEAS,UPDATE_MONTH(I))
            CT_MONTHLY_1ST_ENERGY_PRICE(I) = CT_FIRST_ENERGY_PRICE(I)
            ANNUAL_CONTRACT_FIXED_COST(I)=ANNUAL_CONTRACT_FIXED_COST(I)+ 
     +                                       CT_ANNUAL_FIXED_COST(I)/12.
            IF(CNTR_ENERGY_SWITCH(I)== 'T') THEN
               CONTRACT_VARIABLE_COST(I)= CT_MONTHLY_1ST_ENERGY_PRICE(I)
            ELSEIF(CT_ENERGY_COST_WEIGHTING_FACTOR(I) /= 0.) THEN
               RTEMP = CT_ENERGY_COST_WEIGHTING_FACTOR(I)
               CONTRACT_VARIABLE_COST(I)=RTEMP*
     +                  CT_MONTHLY_1ST_ENERGY_PRICE(I)+
     +                              (1.-RTEMP)*CT_SECOND_ENERGY_PRICE(I)               
            ELSE
               CONTRACT_VARIABLE_COST(I) = 
     +            CT_MONTHLY_1ST_ENERGY_PRICE(I) +
     +                                         CT_SECOND_ENERGY_PRICE(I)
            ENDIF
            IF(WKP_ACTIVE .OR. REALLY_KEPCO) THEN
               IF(ISEAS == UPDATE_MONTH(I) .OR. 
     +                       (YEAR == 1 .AND. PERIOD_COUNTER == 1)) THEN
                  IF(UPDATE_MONTH(I) == 1 .OR.
     +               (YEAR == 1 .AND. PERIOD_COUNTER == 1) .OR.
     +               (ISEAS == UPDATE_MONTH(I)) .AND. 
     +                                YEAR == MAX_SIMULATION_YEARS) THEN
                     J = YEAR
                  ELSE
                     J = YEAR+1
                  ENDIF
                  IF(MAX_ANNUAL_ENERGY(I) < 0.) THEN
                     REMAIN_ANN_ENRG(I) = GET_VAR(
     +                                 MAX_ANNUAL_ENERGY(I),J,CNTRNM(I))
                  ELSE
                     REMAIN_ANN_ENRG(I) = MAX_ANNUAL_ENERGY(I)
                  ENDIF
                  IF(MAX_ANNUAL_CAPACITY(I) < 0.) THEN
                     MAXIMUM_ANNUAL_CAPACITY(I) = GET_VAR(
     +                               MAX_ANNUAL_CAPACITY(I),J,CNTRNM(I))
                  ELSE
                     MAXIMUM_ANNUAL_CAPACITY(I) = MAX_ANNUAL_CAPACITY(I)
                  ENDIF
                  IF(REALLY_KEPCO)
     +                        CT_TARGET_ANN_ENRG(I) = REMAIN_ANN_ENRG(I)
               ENDIF
            ELSE
               IF(PERIOD_COUNTER == 1) THEN
                  IF(MAX_ANNUAL_ENERGY(I) < 0.) THEN
                     REMAIN_ANN_ENRG(I) = GET_VAR(
     +                              MAX_ANNUAL_ENERGY(I),YEAR,CNTRNM(I))
                  ELSE
                     REMAIN_ANN_ENRG(I) = MAX_ANNUAL_ENERGY(I)
                  ENDIF
                  CT_TARGET_ANN_ENRG(I) = REMAIN_ANN_ENRG(I)
                  IF(MAX_ANNUAL_CAPACITY(I) < 0.) THEN
                     MAXIMUM_ANNUAL_CAPACITY(I) = GET_VAR(
     +                   MAX_ANNUAL_CAPACITY(I),YEAR,CNTRNM(I))
                  ELSE
                     MAXIMUM_ANNUAL_CAPACITY(I) = MAX_ANNUAL_CAPACITY(I)
                  ENDIF
               ENDIF
            ENDIF
            IF(CT_ENERGY_PATTERN_VECTOR(I) /= 0) THEN
               RTEMP = FLOAT(CT_ENERGY_PATTERN_VECTOR(I))
               MAX_ENERGY(I) = GET_VAR(RTEMP,ISEAS,CNTRNM(I))
               IF(CT_PATTERN_SUM(I) /= 0.) THEN
                  MAX_ENERGY(I) =  CT_TARGET_ANN_ENRG(I) *
     +                                (MAX_ENERGY(I)/CT_PATTERN_SUM(I))
               ENDIF
               MIN_ENERGY(I) = 0.
            ENDIF
C
C WABASH AREA ALLOCATION
C
            IF(WABASH_VALLEY .AND. 
     +                      INDEX('123456EMSRKL',CNTRTYPE(I)) == 0) THEN
               IF(CNTR_ON_LI(I) <= DATE1 .AND. 
     +                                     CNTR_OFF_LI(I) >= DATE2) THEN
                  ARRAY_POINTR=CT_ALLOCATE_POINTR(CT_RESOURCE_ID(I))
                  UNIT_CAPACITY = MAXIMUM_ANNUAL_CAPACITY(I)
                  DO AREA = 1, NUMBER_OF_AREAS
C
C ALLOCATE CAPACITY FIRST
C
                     CAP_ALLOCATOR =
     +                      AREA_CAP_ALLOCATORS(AREA,ISEAS,ARRAY_POINTR)
                     IF(CAP_ALLOCATOR < 0.) CAP_ALLOCATOR = 
     +                             GET_VAR(CAP_ALLOCATOR,YEAR,UNITNM(I))
                     IF(CAP_ALLOCATOR <= 1. .AND.
     +                          .NOT. CAPACITY_ALLOCATION_ABSOLUTE) THEN
                        CAP_ALLOCATOR = CAP_ALLOCATOR * UNIT_CAPACITY
                     ENDIF
                     RESOURCE_CAP(AREA) = RESOURCE_CAP(AREA) + 
     +                                                   CAP_ALLOCATOR * 
     +                (1.-AREA_CAPACITY_LOSSES(AREA,ISEAS,ARRAY_POINTR))
                  ENDDO
               ENDIF
            ENDIF
         ENDDO
C
C WABASH DYNAMIC RESOURCE ALLOCATION
C
         IF(WABASH_VALLEY) THEN
C
            LAST_CLASS_IN_AREA1 = 2
            IF(WABASH_IM_NIPSCO_PSI) LAST_CLASS_IN_AREA1 = 3
            CONTROL_AREA_1_NEEDS = GET_AREA1_PEAK_NET_DSM(ISEAS,INT2(1))
            CALL GET_CLASS_MW_RESERVE_ALLOC(ISEAS,
     +                                      DSM_PEAK_RESERVE_ALLOCATION)
            RTEMP = 0.
            CALL GET_CLASS_IN_AREA(CLASS_IN_AREA_1,INT2(1))
C
            FOUND_CLASS_FORECAST = GET_PEAK_ENERGY_AFTER_LOSSES(ISEAS,
     +                                          CLASS_PEAK_AFTER_LOSSES,
     +                                        CLASS_ENERGY_AFTER_LOSSES)
            DO AREA = 1, MAX_LOAD_CLASSES
               IF(.NOT. CLASS_IN_AREA_1(AREA)) CYCLE
!
! 7/31/98. GAT. PER STEININGER.
!
               IF(CLASS_RESERVE_MARGIN(AREA) >= 0.) THEN
                  LOCAL_CLASS_RESERVE_MARGIN = 
     +                                   CLASS_RESERVE_MARGIN(AREA)/100.
               ELSE
                  LOCAL_CLASS_RESERVE_MARGIN = 
     +               GET_VAR(CLASS_RESERVE_MARGIN(AREA),ISEAS,
     +                              'from the Class Reserves WVPA')/100.
               ENDIF
!            
               RTEMP = RTEMP + MAX(0.,
C PLUS RESERVE MARGIN NEEDS
     +              LOCAL_CLASS_RESERVE_MARGIN *
     +                 CLASS_COIN_FACTOR(AREA) *
     +                     MAX(CLASS_PEAK_AFTER_LOSSES(1,AREA),
     +                         CLASS_PEAK_AFTER_LOSSES(2,AREA)) +
C MINUS RESERVES PROVIDED BY DSM NOTE THE DSM VALUES ARE NEGATIVE
     +              DSM_PEAK_RESERVE_ALLOCATION(2,AREA) +
     +              DSM_PEAK_RESERVE_ALLOCATION(3,AREA))
            ENDDO
            CONTROL_AREA_1_NEEDS = CONTROL_AREA_1_NEEDS + RTEMP
            DO AREA = 2, MAX_LOAD_CLASSES
               IF(.NOT. CLASS_IN_AREA_1(AREA)) CYCLE
               RESOURCE_CAP(1) = RESOURCE_CAP(1) + RESOURCE_CAP(AREA)
            ENDDO
            CALL GET_CLASS_EXISTS(CLASS_EXISTS)
            DO AREA = MAX_LOAD_CLASSES, 1, -1
               IF(.NOT. CLASS_EXISTS(AREA)) CYCLE
               DO I = 1, NUNITS
                  IF(ABS(MONTHLY_CAPACITY_POINTER(I)) /= AREA .OR.
     +                                .NOT. CL_CAP_AREA_LINKED(I)) CYCLE
                  IF(ONLINE(I) > DATE2 .OR. OFLINE(I) < DATE1) CYCLE
                  ARRAY_POINTR = CL_ALLOCATE_POINTR(CL_RESOURCE_ID(I))
                  LOSSES = (1. - 
     +                    AREA_CAPACITY_LOSSES(AREA,ISEAS,ARRAY_POINTR))
                  IF(MW(2,I) /= 0.) THEN
                     RTEMP = MW(1,I)/MW(2,I)
                  ELSE
                     RTEMP = 0.
                  ENDIF
                  IF(AREA == 1) THEN
                     MW(2,I) = CONTROL_AREA_1_NEEDS
                  ELSE
                     MW(2,I) = MW(2,I) * LOSSES
                  ENDIF
                  MW(2,I) = MAX(0.,MW(2,I) - RESOURCE_CAP(AREA))
                  IF(INPUT_MW(2,I) < 0.) THEN
                     AVAILABLE_MWS = 
     +                             GET_VAR(INPUT_MW(2,I),YEAR,UNITNM(I))
                  ELSE
                     AVAILABLE_MWS = INPUT_MW(2,I)
                  ENDIF
                  AVAILABLE_MWS = AVAILABLE_MWS * LOSSES *
     +                                              CAP_FRAC_OWN(I)/100.
                  IF(I /= PSI_AREA_LAST_RESOURCE_POINTER)
     +                              MW(2,I) = MIN(MW(2,I),AVAILABLE_MWS)
                  MW(1,I) = RTEMP * MW(2,I)
                  IF(AREA > 1) RESOURCE_CAP(AREA) = RESOURCE_CAP(AREA) +
     +                                                           MW(2,I)
                  IF(CLASS_IN_AREA_1(AREA)) THEN
                     RESOURCE_CAP(1) = RESOURCE_CAP(1) + MW(2,I)
                  ENDIF
                  MW(2,I) = MW(2,I)/LOSSES
                  MW(1,I) = MW(1,I)/LOSSES
C                 EXIT
               ENDDO
            ENDDO
         ENDIF ! WVPA
C
C ---- CAPEX
         IF(SP_CAPEX_ACTIVE() ) THEN
            CALL SP_CAPEX_OUTPUT(ISEAS,
     +                           HEAT_RATE_FACTOR,
     +                           MAINTENANCE_RATE,
     +                           DISP_BTU_COST,
     +                           USE_SECONDARY_FUEL,
     +                           BLENDED_BTU_COST)
            CYCLE
         ELSEIF(NEW_SUPPLY_CURVE_REPORT()) THEN
            CALL SP_CAPEX_OUTPUT(ISEAS,
     +                           HEAT_RATE_FACTOR,
     +                           MAINTENANCE_RATE,
     +                           DISP_BTU_COST,
     +                           USE_SECONDARY_FUEL,
     +                           BLENDED_BTU_COST)
         ENDIF
C ---- CAPEX

         IF(.NOT. TESTING_PLAN .AND. DISPATCH_REPORT() .AND. ! DISPATCH_REPORT MEANS ANNAUL REPORT
     +                                         PERIOD_COUNTER == 1) THEN
            DATE1 = BASE_DATE + 1
            DATE2 = BASE_DATE + 12
            CALL_DISPATCH_REPORT = .TRUE. ! THIS MEANS TO PRODUCE AN ANNUAL REPORT
            DISPAT_BTU_TAX_ACTIVE = BTU_TAX_ACTIVE_DISP_RPT .AND. 
     +                                         INCLUDE_IN_DISPATCH_ORDER
            CALL DISPAT(SEASONAL_SYSTEM_CAP,HEAT_RATE_FACTOR,
     +                  MAINTENANCE_RATE,CALL_DISPATCH_REPORT,
     +                  DISP_BTU_COST,DISP_BTU_TAX_ADDER,
     +                  DISPAT_BTU_TAX_ACTIVE,
     +                  FUEL_INVENTORY_ACTIVE,
     +                  USE_SECONDARY_FUEL,ISEAS)
         ENDIF
         CALL_DISPATCH_REPORT = .FALSE.
         DATE1 = BASE_DATE + PSMO
         DATE2 = BASE_DATE + PEMO
         CALL DISPAT(SEASONAL_SYSTEM_CAP,HEAT_RATE_FACTOR,
     +               MAINTENANCE_RATE,CALL_DISPATCH_REPORT,
     +               DISP_BTU_COST,DISP_BTU_TAX_ADDER,
     +               BTU_TAX_ACTIVE .AND. INCLUDE_IN_DISPATCH_ORDER,
     +               FUEL_INVENTORY_ACTIVE,
     +               USE_SECONDARY_FUEL,ISEAS)
         SYSCAP = MAX(SYSCAP,NINT(SEASONAL_SYSTEM_CAP))

         IF(CAP_PLANNING_METHOD_ANNDECOMP) THEN
            CALL LOCATEW(7,0,32)
            WRITE(CHR_ISEAS,"(I2)") ISEAS
            CALL PRINTW(7,CHR_ISEAS)
         ELSE ! IF(.NOT. YES_GAS_MODEL_ONLY) THEN
            IF(LAHEY_LF95()) THEN
               IF(NUNITS > 0) THEN
                  IF(HYDRO_UNITS > 0) THEN
                     WRITE(SCREEN_MESSAGES,"(A,I3,A,I4,A,I5,A,I4,A)")
     +                    'EndPt:',INT(PRT_ENDPOINT()),' ',CURRENT_YEAR,
     +                             ', '//trim(MONTH_NAME(ISEAS))//' ',
     +                             NUNITS,'-thermal units. ',
     +                             HYDRO_UNITS,'-hydro units.'
                  ELSE
                     WRITE(SCREEN_MESSAGES,"(A,I3,A,I4,A,I5,A)")
     +                    'EndPt:',INT(PRT_ENDPOINT()),' ',CURRENT_YEAR,
     +                             ', '//trim(MONTH_NAME(ISEAS))//' ',
     +                             NUNITS,'-thermal units. '
                  ENDIF
                  CALL MG_LOCATE_WRITE(20,70,trim(SCREEN_MESSAGES),
     +                                                   ALL_VERSIONS,0)
               ELSEIF(HYDRO_UNITS > 0) THEN
                  WRITE(SCREEN_MESSAGES,"(A,I3,A,I4,A,I4,A)")
     +                    'EndPt:',INT(PRT_ENDPOINT()),' ',CURRENT_YEAR,
     +                             ', '//trim(MONTH_NAME(ISEAS))//' ',
     +                             HYDRO_UNITS,'-hydro units.'
                  CALL MG_LOCATE_WRITE(20,70,trim(SCREEN_MESSAGES),
     +                                                   ALL_VERSIONS,0)
               ENDIF
            ELSE
c               IF(TRANSACT_ANALYST_ONLY() .AND.
c     +                                 .NOT. INIT_FILE_IS_ACTIVE()) THEN
               IF(.NOT. INIT_FILE_IS_ACTIVE()) THEN
                  WRITE(SCREEN_MESSAGES,"(I4)") NUNITS
                  CALL MG_LOCATE_WRITE(15,70,trim(SCREEN_MESSAGES),
     +                                                   ALL_VERSIONS,0)
                  WRITE(SCREEN_MESSAGES,"(I4)") HYDRO_UNITS
                  CALL MG_LOCATE_WRITE(17,70,trim(SCREEN_MESSAGES),
     +                                                   ALL_VERSIONS,0)
                  WRITE(SCREEN_MESSAGES,"(I4)")
     +                                     GET_NUMBER_OF_ACTIVE_GROUPS()
                  CALL MG_LOCATE_WRITE(18,70,trim(SCREEN_MESSAGES),
     +                                                   ALL_VERSIONS,0)
               ELSE
                  WRITE(SCREEN_MESSAGES,"(I4)") NUNITS+HYDRO_UNITS
                  CALL MG_LOCATE_WRITE(20,70,trim(SCREEN_MESSAGES),
     +                                                   ALL_VERSIONS,0)
               ENDIF
               WRITE(SCREEN_MESSAGES,"(I2)") ISEAS
               CALL MG_LOCATE_WRITE(11,30,trim(SCREEN_MESSAGES),
     +                                                   ALL_VERSIONS,0)
            ENDIF


         ENDIF
         DO J = 1 , 2
            P_CLASS_ASSIGNED_ENERGY(J) = 0.
            P_CLASS_ASSIGNED_COST(J) = 0.
            P_CLASS_ASSIGNED_FIXED_COST(J) = 0.
         ENDDO
         BEFORE_LOAD_CURVE = .TRUE.
         DYN_STORAGE_PUMP_ENRG = 0. D0
         DYN_STORAGE_GEN_ENRG = 0. D0

         TRANS_HYDRO = TF_FILE_EXISTS .AND.
     +                                 YES_USE_TRANSACT_LOADS()
!     +               YES_USE_TF_FILE_FOR_MULTIAREA() .AND. 
         IF(.NOT. TRANS_HYDRO .AND. 
     +               (YES_RUN_MULTIAREA_TRANSACT() .OR.
     +                                  YES_STRICT_MARKET_PRICE())) THEN
!     
            NUMBER_OF_ACTIVE_TRANS_GROUPS = 
     +                                     GET_NUMBER_OF_ACTIVE_GROUPS()
            CALL INIT_TRANS_ROR_CAPACITY(NUMBER_OF_ACTIVE_TRANS_GROUPS)
!            
            CALL GET_MAX_TRANS_LOAD_GROUPS(MAX_TRANS_LOAD_GROUPS)
            VOID_LOGICAL = 
     +                   INIT_TRANS_LOAD_AFTER_EL(MAX_TRANS_LOAD_GROUPS,
     +                                                  HOURS_INCREMENT)
         ENDIF
!     +                                  YES_CENTRAL_DISPATCH_TRANSACT()) 
!
         IF(TRANS_HYDRO .OR. TRANSACT_ANALYST_ONLY()) THEN
!
            NUMBER_OF_ACTIVE_TRANS_GROUPS = 
     +                                     GET_NUMBER_OF_ACTIVE_GROUPS()
!     
            NUMBER_OF_HYDRO_LOAD_GROUPS = 
     +                                    GET_NUMBER_OF_HYDRO_GROUPS()
            IF(ALLOCATED(FIRST_HYDRO_LOAD_NO)) 
     +                                   DEALLOCATE(FIRST_HYDRO_LOAD_NO,
     +                                                   HYDRO_AG_IPNTX)
            ALLOCATE(FIRST_HYDRO_LOAD_NO(0:NUMBER_OF_HYDRO_LOAD_GROUPS),
     +                    HYDRO_AG_IPNTX(0:NUMBER_OF_HYDRO_LOAD_GROUPS))
            FIRST_HYDRO_LOAD_NO = 0
            HYDRO_AG_IPNTX = 79
!
            CALL INIT_TRANS_ROR_CAPACITY(NUMBER_OF_ACTIVE_TRANS_GROUPS)
!
            CALL GET_MAX_TRANS_LOAD_GROUPS(MAX_TRANS_LOAD_GROUPS)
            VOID_LOGICAL = 
     +                   INIT_TRANS_LOAD_AFTER_EL(MAX_TRANS_LOAD_GROUPS,
     +                                                  HOURS_INCREMENT)
            DO TRANS = 1, MAX_TRANS_LOAD_GROUPS
!
! HYDRO LOAD AGGREGATION CASES
!
               HYDRO_LOAD_NO = GET_TRANS_LOAD_AGGREGATION(TRANS)
!
! GET TRANSACTION LDC'S               
!
               IF(HYDRO_LOAD_NO <= 0) THEN  
                  LPROB_100 = 0.
                  LODDUR_100 = 0.
                  CALL GET_TRANS_LOAD_PROB(TRANS_DEMAND,DX,
     +                                     TRANS_PEAK,LODDUR(1),
     +                                     LPROB_100,LODDUR_100,IPNTX,
     +                                     TRANS)
               ELSE
                  IF(FIRST_HYDRO_LOAD_NO(HYDRO_LOAD_NO) == 0) THEN
                     LPROB_100 = 0.
                     LODDUR_100 = 0.
                     FIRST_HYDRO_LOAD_NO(HYDRO_LOAD_NO) = 1
                  ELSE
                     IPNTX = HYDRO_AG_IPNTX(HYDRO_LOAD_NO)
                  ENDIF
                  CALL PUT_TARGET_TRANS_GROUP(TRANS) ! TO SET TRANS FOR ENRGLIMT
                  CALL GET_HYDRO_LOAD_PROB(TRANS_DEMAND,DX,
     +                                     TRANS_PEAK,LODDUR(1),
     +                                     LPROB_100,LODDUR_100,IPNTX,
     +                                     HYDRO_LOAD_NO)
               ENDIF
!
               TRANS_EL_GENERATION = TRANS_DEMAND
               TRANS_EL_CAPACITY = TRANS_PEAK
!                  
! OPERATE ON HYDRO FOR EACH LDC
!
         IF(YEAR == 17 .AND. ISEAS == 9) THEN
            ISEAS = ISEAS
         ENDIF
!
         IF(DEBUG_ON()) CALL write_scroll_line_RW('ENRGLIMT',2)
               IF(HYDRO_UNITS > 0 .AND. PROCMETH() /= 4) THEN
                  CALL ENRGLIMT(
     +               LPROB,LODDUR,DX,TRANS_PEAK,HYDRO_MONTHLY_ENRG,
     +               HYDROCAPMO,
     +               EL_SO2_PERIOD(ISEAS),EL_SO2,
     +               TRANS_DEMAND,SALES_ENERGY,
     +               SALES_ENERGY_NOT_IN_FORECAST,
     +               ENRG_LIMITED_PURCHASE_ENERGY,
     +               YEAR,ISEAS,IPNTX,HOURS_INCREMENT,
     +               PERIOD_COUNTER,
     +               BTU_TAX_ACTIVE,
     +               ANNUAL_EL_MWH_H12,
     +               ANNUAL_EL_MWH_FOR_BTU_TAX_H12)
!
               ENDIF
               TRANS_EL_GENERATION = TRANS_EL_GENERATION - 
     +                                                      TRANS_DEMAND
               TRANS_EL_CAPACITY = TRANS_EL_CAPACITY - TRANS_PEAK
               DEMAND = DEMAND + TRANS_DEMAND
               PEAK = PEAK + TRANS_PEAK
! CREATE AND SAVE AFTER HYDRO HOURLY LOADS FROM AFTER HYDRO LDC'S
               IF(HYDRO_LOAD_NO <= 0) THEN  
                  RTEMP = 
     +                TRANS_LOAD_PROB_2_HOURS(LPROB,LODDUR,        
     +                                        TRANS_DEMAND,
     +                                        TRANS_EL_GENERATION,
     +                                        TRANS_EL_CAPACITY,
     +                                        TRANS_PEAK,
     +                                        ISEAS,
     +                                        HOURS_INCREMENT,
     +                                        TRANS,
     +                                        IPNTX)
               ELSE
                  HYDRO_AG_IPNTX(HYDRO_LOAD_NO) = IPNTX
                  CALL PUT_HYDRO_LOAD_PROB(TRANS_DEMAND,DX,
     +                                     TRANS_PEAK,LODDUR(1),
     +                                     LPROB_100,LODDUR_100,IPNTX,
     +                                     HYDRO_LOAD_NO)
!
! FANCY ROUTINE
!
! DETERMINE CHANGE IN HOURLY LOADS DUE TO HYDRO AND APPLY IT TO 
! THE TRANSACTION GROUP. ALLOW FOR NEGATIVE VALUES.
!
                  RTEMP = 
     +                HYDRO_LOAD_PROB_2_HOURS(LPROB,LODDUR,        
     +                                        TRANS_DEMAND,
     +                                        TRANS_EL_GENERATION,
     +                                        TRANS_EL_CAPACITY,
     +                                        TRANS_PEAK,
     +                                        ISEAS,
     +                                        HOURS_INCREMENT,
     +                                        TRANS,
     +                                        IPNTX,
     +                                        HYDRO_LOAD_NO)
               ENDIF
            ENDDO
            IF(HYDRO_UNITS > 0 .AND. PROCMETH() /= 4) THEN
               IF(SERVICE_TRANSACTIONS_ACTIVE) 
     +            CALL EL_SERVICE_TRANS_CALCULATIONS(HYDRO_UNITS,
     +                                               HYDRO_MONTHLY_ENRG,
     +                                               HYDROCAPMO,
     +                                               ON_LINE,OFF_LINE,
     +                                               DATE1,DATE2,ISEAS)
               ENRG_LIMITED_CAPACITY = MAX(ENRG_LIMITED_CAPACITY,
     +                              SEASONAL_ENRG_LIMITED_CAPACITY)
               TOTAL_SALES_ENERGY = TOTAL_SALES_ENERGY + SALES_ENERGY
            ENDIF
         ELSE
C
C MOVED ITEMS
C
            READ(8800,REC=ISEAS) DEMAND,DX,PEAK,LODDUR(1),LPROB_100,
     +                           LODDUR_100,IPNTX,AVE_RUNNING_RATE
            IPNTX = SET_CURRENT_IPNT(IPNTX)
            IF(ECON_SWITCH()) THEN
               DO I = 1, LOAD_CURVE_POINTS
                  RR_OBS(I) = LPROB_100(I)
               ENDDO
            ENDIF
            IF(LOAD_PROB_PLOT() .AND. .NOT. TESTING_PLAN) THEN
               PLOT_PTS = IPNTX+1 
               CALL LPPLOT(LODDUR,LPROB,PLOT_PTS,ISEAS,
     +                       END_POINT,CURRENT_YEAR,BEFORE_LOAD_CURVE)
            ENDIF
            BASE_AFTER_DSM = LODDUR(1)
            PEAK_AFTER_DSM = PEAK
            BASE_TO_PEAK_RATIO = BASE_AFTER_DSM/PEAK_AFTER_DSM
            DEMAND_AFTER_DSM_BEFORE_EL = DEMAND
C END MOVED ITEMS
            IF(HYDRO_UNITS > 0 .AND. PROCMETH() /= 4) THEN
               IF(DEBUG_ON()) CALL write_scroll_line_RW('ENRGLIMT 2',2)
               CALL ENRGLIMT(
C REAL*4
     +             LPROB,LODDUR,DX,PEAK,HYDRO_MONTHLY_ENRG,HYDROCAPMO,
     +             EL_SO2_PERIOD(ISEAS),EL_SO2,
C REAL*8
     +             DEMAND,SALES_ENERGY,SALES_ENERGY_NOT_IN_FORECAST,
     +             ENRG_LIMITED_PURCHASE_ENERGY,
C INTEGER*2
     +             YEAR,ISEAS,IPNTX,HOURS_INCREMENT,
     +             PERIOD_COUNTER,
C LOGICAL*1
     +             BTU_TAX_ACTIVE,
C REAL*8
     +             ANNUAL_EL_MWH_H12,
     +             ANNUAL_EL_MWH_FOR_BTU_TAX_H12)
               IF(SERVICE_TRANSACTIONS_ACTIVE) 
     +            CALL EL_SERVICE_TRANS_CALCULATIONS(HYDRO_UNITS,
     +                                               HYDRO_MONTHLY_ENRG,
     +                                               HYDROCAPMO,
     +                                               ON_LINE,OFF_LINE,
     +                                               DATE1,DATE2,ISEAS)
               ENRG_LIMITED_CAPACITY = MAX(ENRG_LIMITED_CAPACITY,
     +                              SEASONAL_ENRG_LIMITED_CAPACITY)
               TOTAL_SALES_ENERGY = TOTAL_SALES_ENERGY + SALES_ENERGY
            ENDIF
         ENDIF
!
         DEMAND_AFTER_DSM_AFTER_EL = DEMAND
         PEAK_AFTER_EL = PEAK
         EL_SO2_ANNUAL = EL_SO2_ANNUAL + EL_SO2_PERIOD(ISEAS)
C
         IF(IPNTX > 0 .AND. IPNTX < 1000) THEN
            LPROB(IPNTX+1) = 0.
            LODDUR(IPNTX+1) = LODDUR(IPNTX) + DX
         ELSE
!            WRITE(4,*) 'NO DEMAND IN PRICE POINT',DEMAND,IPNTX
         ENDIF
         BEFORE_LOAD_CURVE = .FALSE.
         IF(HYDRO_UNITS > 0 .AND. PROCMETH() /= 4 .AND.
     +                   LOAD_PROB_PLOT() .AND. .NOT. TESTING_PLAN) THEN 
            PLOT_PTS = IPNTX+1 
            CALL LPPLOT(LODDUR,LPROB,PLOT_PTS,ISEAS,
     +                       END_POINT,CURRENT_YEAR,BEFORE_LOAD_CURVE)
         ENDIF
!
!         SCREEN_MESSAGES = 'Before DR_Booth'
!         CALL MG_LOCATE_WRITE(12,26,
!     +                           trim(SCREEN_MESSAGES),ALL_VERSIONS,2)
C
         IF(END_POINT >= 20 .AND. YEAR+BASE_YEAR >= 2052) THEN
            VOID_INT2 = 0
         ENDIF   
         IF(PROCMETH() <= 3 .AND. .NOT. YES_GAS_MODEL_ONLY) THEN
            IF(DEBUG_ON()) CALL write_scroll_line_RW('BOOTH',2)
            CALL DR_BOOTH(YEAR,ISEAS,FUELCOST(YEAR),TENRG(YEAR),
     +                 TMMBTUS(YEAR),
     +                 VARCOST(YEAR),HOURS_INCREMENT,LPROB,LODDUR,PEAK,
     +                 DEMAND,DX,
     +                 MAINTENANCE_RATE,HEAT_RATE_FACTOR,
     +                 IPNTX,
     +                 SEASONAL_SYSTEM_CAP,
     +                 AVE_RUNNING_RATE,RR_OBS,
     +                 PEAK_MONTH(YEAR),REMAIN_ANN_ENRG,
     +                 MAXIMUM_ANNUAL_CAPACITY,
     +                 PERIOD_COUNTER,
     +                 MMBTU_FUEL_BALANCE,
     +                 FUEL_INVENTORY_ACTIVE,
     +                 DISP_BTU_COST,USE_SECONDARY_FUEL,
     +                 TRANSACTION_BUY_SPREAD,TRANSACTION_SELL_SPREAD,
     +                 CNTR_WEIGHTED_CAPACITY,
     +                 SERVICE_TRANSACTIONS_ACTIVE,
     +                 WOLF_CREEK_ENRG_COST,
     +                 BLENDED_BTU_COST,
     +                 FUEL_INVENTORY_ID,
     +                 POOLING_VARIABLE_COST_SWITCH,
     +                 ANNUAL_BTUS_GOCN12,
     +                 ANNUAL_BTUS_FOR_BTU_TAX_GOCN12,
     +                 BTU_TAX_ACTIVE,
     +                 TIE_GROUP_LIMIT)
            CALL DISPLAY_TIME
            CALL FLUSH(4)
            IF(DEBUG_ON()) CALL write_scroll_line_RW('EXIT BOOTH',2)
         ENDIF
         IF(END_POINT >= 20 .AND. YEAR+BASE_YEAR >= 2052) THEN
            VOID_INT2 = 0
         ENDIF   
!
c         IF( BASE_DATE + ISEAS >= HISTORICAL_PRODUCTION_DATE() .AND.
c     +         (.NOT. TRANSACT_ANALYST_ONLY() .OR.
c     +                                      INIT_FILE_IS_ACTIVE())) THEN
         IF( BASE_DATE + ISEAS >= HISTORICAL_PRODUCTION_DATE() .AND.
     +                                       INIT_FILE_IS_ACTIVE()) THEN
            VOID_INT2 = MON_MDS_CL_EXP_2_AC(ISEAS)
            CALL CALC_EL_MON_MDS_ASSET_CLASS(ISEAS)
         ENDIF
!
!
! 2/21/97. GAT. MOVED CAL_HOURLY_MC_AFTER_EL INSIDE DR_BOOTH. 
!
         IF(WABASH_VALLEY) THEN
            ENERGY(YEAR) = ENERGY(YEAR) + DEMAND_AFTER_DSM_BEFORE_EL +
     +                                DEMAND - DEMAND_AFTER_DSM_AFTER_EL
            PEAK_AFTER_DSM = PEAK_AFTER_DSM + PEAK - PEAK_AFTER_EL
            BASE_AFTER_DSM = PEAK_AFTER_DSM * BASE_TO_PEAK_RATIO
         ELSE
            ENERGY(YEAR) = ENERGY(YEAR) + DEMAND_AFTER_DSM_BEFORE_EL
         ENDIF
!         
         ANNUAL_PEAK = MAX(ANNUAL_PEAK,PEAK_AFTER_DSM)
         ANNUAL_BASE = MIN(ANNUAL_BASE,BASE_AFTER_DSM)
         CAP_LIMITED_DEMAND = CAP_LIMITED_DEMAND + DEMAND
         IF(POOLING_TRANSACTIONS()) 
     +         CALL POOLING(YEAR,PSMO,PEMO,ENERGY_EXCHANGE_ADJUSTMENT,
     +                      DEMAND_AFTER_DSM_BEFORE_EL,
     +                      POOL_PRICING_SWITCH,
     +                      POOL_NATIVE_MULT,
     +                      POOL_OTHER_MULT)
!
! 051609. 
!
         CALL WRITE_STATE_RPS_REPORT(YEAR,ISEAS)
!      
! MOVED FROM INSIDE ENRGLIMT FOR DYNAMIC STORAGE RECORD
!
         CALL ANNUAL_EL_REPORT
!
         IF(GAS_MODEL_ACTIVE) THEN
            TEMP_L = WRITE_MONTHLY_GAS_DEMAND_CLASS_SUMMARY(YEAR,ISEAS)
            WRITE(SCREEN_MESSAGES,"(A,I3,A,I4,A,I5,A,I4,A)")
     +                    'EndPt:',INT(PRT_ENDPOINT()),' ',CURRENT_YEAR,
     +                    ', '//trim(MONTH_NAME(ISEAS))//' ',
     +                    NUM_GAS_NODES,'-gas nodes. ',
     +                    NUM_GAS_LINKS,'-gas links.'
            CALL MG_LOCATE_WRITE(20,70,trim(SCREEN_MESSAGES),
     +                                                   ALL_VERSIONS,0)
         ENDIF
! 121006. MOVED BELOW WRITE_... 
!         SO THAT THE GAS POWER DEMAND 
!         CAN BE USED IN PRICING
! 121406. REDEFINED AS A FUNCTION
!
         if(gas_lp_active) then
            HH_ADJ = MONTHLY_HH_BASIS(YEAR,ISEAS)
            IF(HH_ONLY) THEN
               CALL PUT_A_FUEL_PRICE(YEAR,ISEAS,HH_VECTOR,HH_ADJ)
            ENDIF
            LOWER_48_BASIN_ADD = UPDATE_HH_PRICE(YEAR,ISEAS)
            GAS_DATA_AVAILABLE = 
     +         monthly_lp_gas_pricing(YEAR,ISEAS,HOURS_IN_PERIOD(ISEAS),
     +                                HH_ADJ,LOWER_48_BASIN_ADD)

         ELSE ! 040109.
            GAS_DATA_AVAILABLE = .FALSE.
         endif
! 092310.
         VOID_LOGICAL = WRITE_MARGINAL_UNIT_REPORT()      
!
         IF(SERVICE_TRANSACTIONS_ACTIVE) THEN
            CALL SERVICE_TRANS_CALCULATIONS(ISEAS,YEAR,DATE1,DATE2)
            IF(.NOT. TESTING_PLAN .AND. MONTHLY_SERVICE_REPORT_ACTIVE)
     +                               CALL WRITE_TRANS_SEASON_TYPE(ISEAS)
         ENDIF
         VOID_LOGICAL = DEALLO_MONTH_MARG_COST_ARRAYS() ! INSIDE CAL_MARGINAL_COST
         VOID_LOGICAL = END_MONTH_FUEL_DERIVATIVES(ISEAS,CURRENT_YEAR)
      ENDDO !PRODUCTION_COSTING_PERIODS
C      
C     9/5/95. GAT. MOVED FROM DR_BOOTH FOR WVPA.
C
! moved 4/11/10 to put convergenc check on reports written below.
      SYS_CO2_EMISSIONS = CALCULATE_CO2_EMISS_FOR_SYSTEM()
      TEMP_L4 = CHECK_FOR_GRX_ABATEMENT_CONVERG(0_2)
C ---- CAPEX
      IF(.NOT. SP_CAPEX_ACTIVE()) THEN
C ---- CAPEX
      IF(WABASH_VALLEY .AND.
     +                   INDEX('B,A',WABASH_POWER_COST_RPT()) /= 0) THEN
         CALL WABASH_ANNUAL_POWER_COSTS(YEAR,UNITNM)
      ENDIF
C      
      IF(SERVICE_TRANSACTIONS_ACTIVE) THEN
         IF(.NOT. TESTING_PLAN .AND. MONTHLY_SERVICE_REPORT_ACTIVE)
     +                                      CALL WRITE_TRANS_ANNUAL_TYPE
      ENDIF
!      
      if(gas_lp_active) then
         VOID_LOGICAL = GasModulePipeExpansion(END_POINT,YEAR,
     +                                         GRX_ITERATIONS)
      Endif
! COAL LP ACTIVE
!      if(.true.) then
      IF(RUN_COAL_MODEL() .AND. CoalLPActive) THEN
!         IF(GRX_CONVERGED .AND. COAL_MODEL_RAN_LAST_ITERATION) 
!     +             CALL COAL_MODEL_REPORTS(CURRENT_YEAR,YEAR,END_POINT)
         CALL COAL_DEMAND_EXPANSION_UNITS(YEAR,nUnits,
     +                                    ANNUAL_CL_UNIT_MMBTUS,
     +                                    ANNUAL_CL_UNIT_CAPACITY,
     +                                    ANNUAL_CL_UNIT_ENERGY)
         CALL COAL_DEMAND_TRANSFERRED_MIDAS(YEAR,
     +                                          GRX_ITERATIONS,
     +                                          ANNUAL_CL_UNIT_MMBTUS,
     +                                          ANNUAL_CL_UNIT_CAPACITY,
     +                                          ANNUAL_CL_UNIT_ENERGY)
         IF(RUN_COAL_MODEL() .AND. CoalLPActive) THEN
            COAL_MODEL_RAN_LAST_ITERATION = GRX_CONVERGED .OR. 
     +                          GRX_ITERATIONS == GRX_MAXIMUM_ITERATIONS
            IF(.NOT. COAL_MODEL_RAN_LAST_ITERATION) THEN
                CALL RESET_SCRUBBERS_FROM_COAL_LP()  ! MUST RUN B4 LP because LP generates new scrubber list 
            ENDIF   
            CALL write_scroll_line_RW('Running Coal LP',4)
            CALL GregsCnwRoutine(BASE_YEAR,YEAR,.TRUE.)
!     +                              .NOT. COAL_MODEL_RAN_LAST_ITERATION) ! YEAR==1) ! owner of interface arrays
            CALL COAL_MODEL_REPORTS(CURRENT_YEAR,YEAR,END_POINT,
     +                              COAL_MODEL_RAN_LAST_ITERATION)
            COAL_MODEL_RAN_LAST_ITERATION = .TRUE.
         ENDIF
 !
      ENDIF   
C
C ADDED 10/3/92
      DO I = 0, MAX_REPORTING_GROUPS
         GROUP_CAPACITY(I) = ANN_EL_CAPACITY(I) + ANN_CL_CAPACITY(I)
      ENDDO
C
C PUT EL_SO2_ANNUAL TO TONS OR METRIC TONS
C
      IF(COUNTRY() == 'C') THEN
         DIVIDE_BY = 1000.
      ELSE
         DIVIDE_BY = 2000.
      ENDIF
      EL_SO2_ANNUAL = EL_SO2_ANNUAL/DIVIDE_BY
      DO ISEAS = 1, PRODUCTION_COSTING_PERIODS
         EL_SO2_PERIOD(ISEAS) = EL_SO2_PERIOD(ISEAS)/DIVIDE_BY
      ENDDO
      TOTAL_ENRG_LIMITED_VAR_COST = ENRG_LIMITED_VAR_COST(1) + 
     +                              ENRG_LIMITED_VAR_COST(2) +
     +                              ENRG_LIMITED_VAR_COST(3) +
     +                              ENRG_LIMITED_VAR_COST(4) 
      TOTAL_ENRG_LIMITED_FIXED_COST = ENRG_LIMITED_FIXED_COST(1) +
     +                                ENRG_LIMITED_FIXED_COST(2) +
     +                                ENRG_LIMITED_FIXED_COST(3) +
     +                                ENRG_LIMITED_FIXED_COST(4)
      IF(PROCMETH() /= 4) THEN
         IF(SERVICE_TRANSACTIONS_ACTIVE) THEN
            DATE1 = BASE_DATE + 1
            DATE2 = BASE_DATE + 12
            CALL ANNUAL_SERVICE_TRANSACTIONS(YEAR,ANNUAL_PEAK,
     +                                                      DATE1,DATE2)
            IF(.NOT. TESTING_PLAN .AND. REALLY_KEPCO .AND.
     +             INDEX('B,A',KEPCO_REPORTS()) /= 0)
     +                     CALL SERVICE_COST_ANNUAL_REPORT(REALLY_KEPCO)
         ENDIF
         CALL RETURN_P_SALES_REVENUE_ENERGY(CNTR_SALES_REVENUE,
     +                                      CNTR_SALES_ENERGY)
         TOTAL_SALES_REVENUE = ENRG_LIMITED_SALES_REVENUE(1) + 
     +                         ENRG_LIMITED_SALES_REVENUE(2) +
     +                         ENRG_LIMITED_SALES_REVENUE(3) +
     +                         CNTR_SALES_REVENUE
         TOTAL_SALES_ENERGY = TOTAL_SALES_ENERGY + CNTR_SALES_ENERGY
         SALES_ENERGY_NOT_IN_FORECAST = SALES_ENERGY_NOT_IN_FORECAST +
     +                                                 CNTR_SALES_ENERGY
         IF( .NOT. TESTING_PLAN .AND. ((UNIT_OUTPUT_REPORT() .AND. 
     +        PRODUCTION_COSTING_PERIODS /= 1) .OR.
     +                             ANNUAL_OR_SPREAD_SHEET_REPORT)) THEN
            IF(GRX_CONVERGED)CALL ANNUAL_REPORT(YEAR,
     +                             CAP_LIMITED_DEMAND,
     +                             ENERGY_EXCHANGE_ADJUSTMENT,
     +                             ANNUAL_BASE,ANNUAL_PEAK,
     +                             NUMBER_OF_CONTRACTS,CNTRNM,
     +                             CNTR_ON_LI,CNTR_OFF_LI,KEPCO,
     +                             CNTR_WEIGHTED_CAPACITY,
     +                             ANNUAL_BTUS_GOCN12,
     +                             WABASH_VALLEY,REALLY_KEPCO,
     +                             CNTR_SALES_ENERGY,CNTR_SALES_REVENUE,
     +                             SAVE_YEAR)
            IF(SERVICE_TRANSACTIONS_ACTIVE .AND. .NOT. KEPCO) THEN
               IF(GRX_CONVERGED) CALL SERVICE_COST_ANNUAL_REPORT(KEPCO)
            ENDIF
         ENDIF
         IF(.NOT. TESTING_PLAN .AND. ENRG_LIMIT_REPORT())
     +             CALL ENRG_LIMITED_REPORT(EL_SO2_ANNUAL,EL_SO2_PERIOD)
      ENDIF
C
C LOLP REPORT
C
      IF(.NOT. TESTING_PLAN .AND. LOLP_REPORT() .AND. GRX_CONVERGED)
     +                CALL LOLP_MONTHLY_REPORT(END_POINT,CURRENT_YEAR)
C
C MOVED FROM CLREPORT. 
C
      IF(GRX_CONVERGED) CALL MARKETSYM_REPORT(NUNITS)
C
C FEDERAL MMBTU TAX
C
      MMBTU_FEDERAL_TAX = 0.
      MMBTU_FEDERAL_TAX_IN_ADJ_CLAUSE = 0.
      IF(BTU_TAX_ACTIVE_DISP_RPT) THEN
         DO I = 1, 6
            MMBTU_FEDERAL_TAX = MMBTU_FEDERAL_TAX +
     +                          ANNUAL_BTUS_FOR_BTU_TAX_GOCN12(I) * 
     +                           CAP_LIMT_BTU_TAX_RATES_GOCN12(I)/10.**6
         ENDDO
         DO I = 1, 3
            MMBTU_FEDERAL_TAX = MMBTU_FEDERAL_TAX +
     +                          ANNUAL_EL_MWH_FOR_BTU_TAX_H12(I) * 
     +                          ENRG_LIMT_ENRGY_TAX_RATES_H12(I)/10.**6
         ENDDO
         MMBTU_FEDERAL_TAX_IN_ADJ_CLAUSE = MMBTU_FEDERAL_TAX *
     +                                 BTU_TAX_IN_ADJUSTMENT_CLAUSE/100.
      ENDIF
C
      IF(DUKE()) THEN
C        VOIDR4 = BUYERS_SECTION_82_ENRG_RATE() !REMOVED 6/27/96
         IF(CATAWBA2_FILE_EXISTS) THEN
            IF(YEAR == 1) VOID_LOGICAL = UPDATE_CATAWBA_CONTRACT_DATA()
            VOIDR4 = DUKE_TOTAL_CAPACITY_CHARGES(YEAR)
         ENDIF
      ENDIF
      IF(CPL_ACTIVE()) THEN
         PA_CONTRACT_ACITVE = .FALSE.
!         
         CALL GET_PA_SWITCH(PA_CONTRACT_ACITVE)
         CALL GET_CPL_EMC_CAP_REVS
!         
         IF(PA_CONTRACT_ACITVE) THEN
            CALL CPL_PA_ANN_ENERGY
            CALL UPDATE_CPL_CAP_CALCS
         ENDIF
         CALL CPL_PA_ANN_CAPACITY
      ENDIF
!
! moved below by mark 3/20/10     
!      TEMP_L = ANNUAL_CO2_RETIREMENTS_PROCESS(YEAR)
!      TEMP_L = ANNUAL_CO2_RETROFIT_PROCESS(YEAR)
!      TEMP_L = ANNUAL_RETIRE_RETRO_PROCESS(YEAR)
!      CALL WRITE_STATE_RPS_REPORT(YEAR,I2_ZERO)

C      
      LAST_NUNITS = NUNITS
      PROCOST = SYSCAP
      YEAR = SAVE_YEAR
C
C      IF(.NOT. PRICE_PLANNING_FIRST_PASS) THEN  ! TEMP TEST. 6/18/96. GAT.
c      IF(.NOT. TRANSACT_ANALYST_ONLY() .OR. INIT_FILE_IS_ACTIVE()) THEN
      IF(INIT_FILE_IS_ACTIVE()) THEN
         VOID_INT2 = CL_EXPENSES_2_ASSET_CLASSES() ! This call must preceed the EL call
         CALL CALC_EL_ANN_ASSET_CLASS
         CALL CALC_ST_ANN_ASSET_CLASS
         VOID_LOGICAL = CALC_CONTRACT_CLASS_INFO(CNTR_WEIGHTED_CAPACITY,
     +                                           REALLY_KEPCO)
!
         IF(GRX_CONVERGED) CALL WRITE_ASSET_PROD_REPORT
      ENDIF

      if(year+base_year == 2015) then
         temp_l4 = temp_l4
      endif
      TEMP_L = ANNUAL_CO2_RETIREMENTS_PROCESS(YEAR)
      TEMP_L =  ANNUAL_CO2_RETROFIT_PROCESS(YEAR)
      TEMP_L = ANNUAL_RETIRE_RETRO_PROCESS(YEAR)
      TEMP_L = RPS_PROGRAMS_ANNUAL_CALC(YEAR)
      TEMP_L = WRITE_HOURLY_STORAGE_REPORT()
      CALL ZERO_ITER_PRICE()
      IF(GRX_CONVERGED) CALL WRITE_STATE_RPS_REPORT(YEAR,I2_ZERO)
C
C DEALLOCATE ARRAYS NOT USED BY SP_CAPEX
C
!      CALL DEALLOCATE_DR_BOOTH_ARRAYS()
!      CALL DEALLOCATE_EMISSIONS_BY_FUEL()
      VOID_LOGICAL = DEALLO_MONTH_MARG_COST_ARRAYS() ! INSIDE CAL_MARGINAL_COST
!
! 090706. TEST FOR AVOIDING REALLOCATION
!
      VOID_LOGICAL = DEALLO_ANNUAL_MARG_COSTS_ARRAYS() ! INSIDE CAL_MARGINAL_COST
!
      VOID_LOGICAL = DEALLO_CAL_HOURLY_MC_AFTER_EL()
      VOID_LOGICAL = DEALLOCATE_MONTHLY_TRANS_LOADS()
      VOID_LOGICAL = DEALLOCATE_MONTHLY_GAS_DEMAND()
!      CALL FREE_EMISS_BY_UNIT_BY_FUEL() ! FIXED SIZED THE THREE ARRAYS
C ---- CAPEX
      ENDIF ! SP_CAPEX
C ---- CAPEX
C
C DEALLOCATE ARRAYS USED BY PR_COST AND SP_CAPEX
C      
C PROCOST ARRAYS
!      IF(ALLOCATED(THIS_YEARS_FUEL_SUPPLY_ID)) 
!     +                         DEALLOCATE(THIS_YEARS_FUEL_SUPPLY_ID)
! deallocated and allocated at start of routine. Memory isn't needed. msg
c      IF(ALLOCATED(BLENDED_BTU_COST)) THEN
c         DEALLOCATE(BLENDED_BTU_COST,STAT=ERROR) ! 3/2010 msg
c      ENDIF
c      IF(ALLOCATED(ANNUAL_BLENDED_BTU_COST)) THEN
c         DEALLOCATE(ANNUAL_BLENDED_BTU_COST,STAT=ERROR)
c         DEALLOCATE(ANNUAL_FUEL_BTU_COST,STAT=ERROR)
c         DEALLOCATE(ANNUAL_DISP_BTU_COST,STAT=ERROR)
c      ENDIF
      CALL DEALLOCATE_DISPAT_ARRAYS()
C
C
      RETURN
      ENTRY GET_PROCOST_LAST_NUNITS()
         IF(CAPACITY_PLANNING_METHOD() == 'MX'  .AND.   
     +                                  GREEN_MRX_METHOD() == 'GX') THEN
            GET_PROCOST_LAST_NUNITS = GRX_NUNITS
         ELSE
            GET_PROCOST_LAST_NUNITS = LAST_NUNITS
         ENDIF
      RETURN
C***********************************************************************
      ENTRY YES_GAS_MODEL_DATA_AVAILABLE()
C***********************************************************************
         YES_GAS_MODEL_DATA_AVAILABLE = GAS_DATA_AVAILABLE
      RETURN
C***********************************************************************
      ENTRY GET_HEAT_RATE_FACTOR(R_UNITS)
C***********************************************************************
         GET_HEAT_RATE_FACTOR = HEAT_RATE_FACTOR(R_UNITS)
      RETURN
C***********************************************************************
      ENTRY RECALCULATE_FUEL_COSTS(R_UNITS)
C***********************************************************************
C
C EMISSIONS BLENDING ADDED 12/30/92
C MOVED FROM FUEL UNITS 9/27/94
C
         DO I = 1, R_UNITS
            IF(EMISS_BLENDING_RATE(I) > 0.) THEN
               BLENDED_BTU_COST(I) = 
     +                           (1.-EMISS_BLENDING_RATE(I))*PBTUCT(I) +
     +                       EMISS_BLENDING_RATE(I) * EMISS_FUEL_COST(I)
            ELSE
               BLENDED_BTU_COST(I) = PBTUCT(I)
            ENDIF
            IF(ABS(FUELMX(I)) .NE. 1.) THEN
               FUEL_BTU_COST(I) = ABS(FUELMX(I)) * 
     +             BLENDED_BTU_COST(I)+(1. - ABS(FUELMX(I))) * SBTUCT(I)
            ELSE
               FUEL_BTU_COST(I) = BLENDED_BTU_COST(I)
            ENDIF
            FUEL_ID = FUEL_SUPPLY_ID(I)
            IF(FUELMX(I) < 0. .OR.
     +              (FUEL_INVENTORY_ACTIVE .AND. FUEL_ID /= 0 .AND. 
     +              MMBTU_FUEL_BALANCE(FUEL_INVENTORY_ID(FUEL_ID))
     +                                                      <=0.D0))THEN
               DISP_BTU_COST(I) = SBTUCT(I)
            ELSE
               DISP_BTU_COST(I) = FUEL_BTU_COST(I)
            ENDIF
         ENDDO
         RECALCULATE_FUEL_COSTS = R_UNITS
      RETURN
C***********************************************************************
      ENTRY GET_THIS_YEARS_FUEL_SUPPLY_ID(R_UNIT,R_YR)      
C***********************************************************************
         FUEL_SUPPLY_ID_4_THIS_YEAR = FUEL_SUPPLY_ID(R_UNIT)
         IF(FUEL_SUPPLY_ID_4_THIS_YEAR < 0) THEN
            FUEL_SUPPLY_ID_4_THIS_YEAR = 
     +         GET_VAR(FLOAT(
     +                FUEL_SUPPLY_ID_4_THIS_YEAR),R_YR,'FUEL SUPPLY ID')
         ENDIF
         GET_THIS_YEARS_FUEL_SUPPLY_ID = FUEL_SUPPLY_ID_4_THIS_YEAR
      RETURN
C***********************************************************************
!      ENTRY DEALLOCATE_FUEL_INVENTORY_ID
C***********************************************************************
!         DEALLOCATE(FUEL_INVENTORY_ID,STAT=ERROR)
!         DEALLOCATE_FUEL_INVENTORY_ID = ERROR
!      RETURN
C***********************************************************************
      ENTRY GET_ANNUAL_PEAK
C***********************************************************************
         GET_ANNUAL_PEAK = ANNUAL_PEAK
      RETURN
C***********************************************************************
      ENTRY GET_SYSTEM_CAPACITY
C***********************************************************************
         GET_SYSTEM_CAPACITY = FLOAT(SYSCAP)
      RETURN
C***********************************************************************
      ENTRY GET_TOTAL_SALES_ENERGY
C***********************************************************************
         GET_TOTAL_SALES_ENERGY = TOTAL_SALES_ENERGY
      RETURN
C***********************************************************************
      ENTRY GET_TOTAL_SALES_REVENUE
C***********************************************************************
         GET_TOTAL_SALES_REVENUE = TOTAL_SALES_REVENUE
      RETURN
C***********************************************************************
      ENTRY GET_SALES_ENRGY_NOT_IN_FORECAST
C***********************************************************************
         GET_SALES_ENRGY_NOT_IN_FORECAST = SALES_ENERGY_NOT_IN_FORECAST
      RETURN
C***********************************************************************
      ENTRY GET_ENRG_LIMITED_PURCHASE_ENRGY
C***********************************************************************
         GET_ENRG_LIMITED_PURCHASE_ENRGY = ENRG_LIMITED_PURCHASE_ENERGY
      RETURN
C***********************************************************************
      ENTRY GET_ENERGY_EXCHANGE_ADJUSTMENT
C***********************************************************************
         GET_ENERGY_EXCHANGE_ADJUSTMENT = ENERGY_EXCHANGE_ADJUSTMENT
      RETURN
C***********************************************************************
      ENTRY GET_MAINTENANCE_RATE(R_UNIT)
C***********************************************************************
         GET_MAINTENANCE_RATE = MAINTENANCE_RATE(R_UNIT)
      RETURN
C***********************************************************************
      ENTRY GET_FUEL_COST
C***********************************************************************
         IF(YEAR > MAX_SIMULATION_YEARS) THEN
            GET_FUEL_COST = FUELCOST(MAX_SIMULATION_YEARS)
         ELSE
            GET_FUEL_COST = FUELCOST(YEAR)
         ENDIF
      RETURN
C***********************************************************************
      ENTRY GET_VAR_COST
C***********************************************************************
         IF(YEAR > MAX_SIMULATION_YEARS) THEN
            GET_VAR_COST = VARCOST(MAX_SIMULATION_YEARS)
         ELSE
            GET_VAR_COST = VARCOST(YEAR)
         ENDIF
      RETURN
C***********************************************************************
      ENTRY GET_INCREMENTAL_FUEL_COST(R_UNIT,R_BLOCK)
C***********************************************************************
!
! 01/06/04
!
!         GET_TOTAL_INCREMENTAL_COST = VCPMWH(R_UNIT) +
!     +                                     FUEL_ADDER_ADJUSTMENT(R_UNIT)
         IF(R_BLOCK < 2) THEN
            GET_INCREMENTAL_FUEL_COST = ! GET_TOTAL_INCREMENTAL_COST +
     +                    BLENDED_BTU_COST(R_UNIT)*COEFF(1,R_UNIT)/1000.
         ELSEIF(MW(2,R_UNIT) - MW(1,R_UNIT) > 0.) THEN
            INC_CAP = MW(2,R_UNIT) - MW(1,R_UNIT)
            A_HR = (COEFF(3,R_UNIT) - COEFF(2,R_UNIT))/(2.*INC_CAP)
            B_HR = COEFF(3,R_UNIT) - 2.* A_HR * INC_CAP
            SECOND_BLOCK_HEAT = A_HR*INC_CAP + B_HR
!            GET_TOTAL_INCREMENTAL_COST = 
!     +               GET_TOTAL_INCREMENTAL_COST +
            GET_INCREMENTAL_FUEL_COST =
     +                  BLENDED_BTU_COST(R_UNIT)*SECOND_BLOCK_HEAT/1000.
         ENDIF
      RETURN
C***********************************************************************
      ENTRY GET_TOTAL_INCREMENTAL_COST(R_UNIT,R_BLOCK)
C***********************************************************************
         GET_TOTAL_INCREMENTAL_COST = VCPMWH(R_UNIT) +
     +                                     FUEL_ADDER_ADJUSTMENT(R_UNIT)
  !
         IF(R_UNIT < 1 .OR. R_UNIT > NUNITS) THEN
            WRITE(4,*) "BAD UNIT INDEX IN GET_TOTAL_INCREMENTAL_COST"
            WRITE(4,*) "UNIT INDEX = ",R_UNIT
            RETURN
         ENDIF
!
! 06/27/05. FOR SRP
!
         IF(R_BLOCK == 2) THEN
            DISP_ADJUSTER = DISPADJ2(R_UNIT)
         ELSE
            DISP_ADJUSTER = DISPADJ(R_UNIT)
         ENDIF
         GET_TOTAL_INCREMENTAL_COST = GET_TOTAL_INCREMENTAL_COST +
     +                                                     DISP_ADJUSTER
!
         IF(COMMIT_ON_TOTAL_COST_ENV) THEN
            CALL GET_PRIM_TOTAL_EMISSION_COST(R_UNIT,
     +                                        PRIM_TOTAL_EMISSION_COST)
            GET_TOTAL_INCREMENTAL_COST = GET_TOTAL_INCREMENTAL_COST +
     +                                          PRIM_TOTAL_EMISSION_COST
         ENDIF
!
         TEMP_DISPATCH_MULT = DISPATCH_MULT(R_UNIT)
         IF(TEMP_DISPATCH_MULT < 0.) THEN
            TEMP_DISPATCH_MULT = 
     +            GET_VAR(TEMP_DISPATCH_MULT,YEAR,UNITNM(R_UNIT))
         ENDIF
!
         IF(R_BLOCK < 2) THEN
!            GET_TOTAL_INCREMENTAL_COST = GET_TOTAL_INCREMENTAL_COST +
!     +                    BLENDED_BTU_COST(R_UNIT)*COEFF(1,R_UNIT)/1000.
            GET_TOTAL_INCREMENTAL_COST = GET_TOTAL_INCREMENTAL_COST +
     +             HEAT_RATE_FACTOR(R_UNIT) *
     +                    BLENDED_BTU_COST(R_UNIT)*COEFF(1,R_UNIT)/1000.
         ELSEIF(MW(2,R_UNIT) - MW(1,R_UNIT) > 0.) THEN
            INC_CAP = MW(2,R_UNIT) - MW(1,R_UNIT)
            A_HR = (COEFF(3,R_UNIT) - COEFF(2,R_UNIT))/(2.*INC_CAP)
            B_HR = COEFF(3,R_UNIT) - 2.* A_HR * INC_CAP
            SECOND_BLOCK_HEAT = A_HR*INC_CAP + B_HR
!            GET_TOTAL_INCREMENTAL_COST = 
!     +               GET_TOTAL_INCREMENTAL_COST +
!     +                  BLENDED_BTU_COST(R_UNIT)*SECOND_BLOCK_HEAT/1000.
            GET_TOTAL_INCREMENTAL_COST = 
     +               GET_TOTAL_INCREMENTAL_COST +
     +             HEAT_RATE_FACTOR(R_UNIT) *
     +                  BLENDED_BTU_COST(R_UNIT)*SECOND_BLOCK_HEAT/1000.
         ENDIF
         GET_TOTAL_INCREMENTAL_COST = TEMP_DISPATCH_MULT * 
     +                                        GET_TOTAL_INCREMENTAL_COST 
      RETURN
C***********************************************************************
      ENTRY GET_TOTAL_INC_COST_PARAMS(R_UNIT,
     +                                R_BLENDED_BTU_COST,
     +                                R_1ST_FUEL,
     +                                R_1ST_NON_FUEL,
     +                                R_2ND_FUEL,
     +                                R_2ND_NON_FUEL)

C***********************************************************************
!
         IF(R_UNIT < 1 .OR. R_UNIT > NUNITS) THEN
            WRITE(4,*) "BAD INDEX IN GET_TOTAL_INC_COST_PARAMS"
            WRITE(4,*) "UNIT INDEX = ",R_UNIT
            RETURN
         ENDIF
         R_1ST_NON_FUEL = VCPMWH(R_UNIT) +
     +                                     FUEL_ADDER_ADJUSTMENT(R_UNIT)
         R_2ND_NON_FUEL = VCPMWH(R_UNIT) +
     +                                     FUEL_ADDER_ADJUSTMENT(R_UNIT)
         R_1ST_NON_FUEL = R_1ST_NON_FUEL + DISPADJ(R_UNIT)
         R_2ND_NON_FUEL = R_2ND_NON_FUEL + DISPADJ2(R_UNIT)
!
         IF(COMMIT_ON_TOTAL_COST_ENV) THEN
            CALL GET_PRIM_TOTAL_EMISSION_COST(R_UNIT,
     +                                        PRIM_TOTAL_EMISSION_COST)
            R_1ST_NON_FUEL = R_1ST_NON_FUEL + PRIM_TOTAL_EMISSION_COST
            R_2ND_NON_FUEL = R_2ND_NON_FUEL + PRIM_TOTAL_EMISSION_COST

         ENDIF
!
         R_1ST_FUEL = HEAT_RATE_FACTOR(R_UNIT) * COEFF(1,R_UNIT)/1000.
         IF(MW(2,R_UNIT) - MW(1,R_UNIT) < 0.00001) THEN
            R_2ND_FUEL = R_1ST_FUEL
         ELSE
            INC_CAP = MW(2,R_UNIT) - MW(1,R_UNIT)
            A_HR = (COEFF(3,R_UNIT) - COEFF(2,R_UNIT))/(2.*INC_CAP)
            B_HR = COEFF(3,R_UNIT) - 2.* A_HR * INC_CAP
            SECOND_BLOCK_HEAT = A_HR*INC_CAP + B_HR
            R_2ND_FUEL = 
     +             HEAT_RATE_FACTOR(R_UNIT) * SECOND_BLOCK_HEAT/1000.
         ENDIF
!
         TEMP_DISPATCH_MULT = DISPATCH_MULT(R_UNIT)
         IF(TEMP_DISPATCH_MULT < 0.) THEN
            TEMP_DISPATCH_MULT = 
     +            GET_VAR(TEMP_DISPATCH_MULT,YEAR,UNITNM(R_UNIT))
         ENDIF
!
         R_1ST_NON_FUEL = R_1ST_NON_FUEL * TEMP_DISPATCH_MULT
         R_2ND_NON_FUEL = R_2ND_NON_FUEL * TEMP_DISPATCH_MULT
         R_1ST_FUEL = R_1ST_FUEL * TEMP_DISPATCH_MULT
         R_2ND_FUEL = R_2ND_FUEL * TEMP_DISPATCH_MULT
 !         
         R_BLENDED_BTU_COST = BLENDED_BTU_COST(R_UNIT)
         GET_TOTAL_INC_COST_PARAMS = R_BLENDED_BTU_COST
!
      RETURN
C***********************************************************************
      ENTRY GET_DEMAND_AFTER_EL(R_ISEAS,R_PSMO,R_PEMO)
C***********************************************************************
         R_ISEAS = ISEAS
         R_PSMO = PSMO
         R_PEMO = PEMO
         GET_DEMAND_AFTER_EL = DEMAND_AFTER_DSM_AFTER_EL
      RETURN
C***********************************************************************
      ENTRY GET_THERMAL_ONLINE(R_UNIT)
C***********************************************************************
         GET_THERMAL_ONLINE = ONLINE(R_UNIT)
      RETURN
C 1100 FORMAT(1X,4(F12.0,','),F12.3,',',F12.3)
      END
C**********************************************************************
C
C             SUBROUTINE TO FIND HEAT RATES FOR UNIT BLOCKS     
C                   COPYRIGHT (C) 1990
C                        M.S. GERBER & ASSOCIATES, INC.
C                              ALL RIGHTS RESERVED
C
C**********************************************************************
C
      SUBROUTINE HR_CALC(NUS)
      INCLUDE 'SpinLib.MON'
      USE SIZECOM
      INCLUDE 'PRODCOM.MON'
      INCLUDE 'PROD2COM.MON'
      INCLUDE 'PROD3COM.MON'
      SAVE
      INTEGER*2 LSTBLOK,NUS
C
C ADDED 12/29/92 FOR FUEL LIMITS M.S.G.
C
      LOGICAL*1 DISPATCH_ON_AVERAGE/.FALSE./,ZERO_CAPACITY_ACTIVE_UNIT,
     +            DISPATCH_ON_TOTAL/.FALSE./
      CHARACTER*1 FIRST_BLOCK_DISP_SWITCH
      REAL*4 A_HR,B_HR,FIRST_BLOCK_HEAT,SECOND_BLOCK_HEAT,INC_CAP
C
C
      LSTBLOK = 0
C ZERO CAPACITY UNIT STUFF ADDED 10/25/96. GAT.     
      IF(ONLINE(NUS) <= DATE2 .AND. OFLINE(NUS) >= DATE1 .AND.
     +                                             MW(2,NUS) == 0.) THEN
         ZERO_CAPACITY_ACTIVE_UNIT = .TRUE.
      ELSE
         ZERO_CAPACITY_ACTIVE_UNIT = .FALSE.
      ENDIF
!      
      IF (MW(1,NUS) > 0. .OR. LDTYPE(NUS) == 'L' .OR.
     +                                   ZERO_CAPACITY_ACTIVE_UNIT) THEN
         NBLOK = NBLOK + 1
C        MWBLOK(NBLOK) = MW(1,NUS)
         UNIT(NBLOK) = NUS
         BLKNO(NBLOK) = 1
         LSTBLOK = 1
         IF(LDTYPE(NUS) == 'M' .OR. LDTYPE(NUS) == 'N') BLKNO(NBLOK) = 0
         IF(DISPATCH_ON_AVERAGE) THEN
            INHEAT(NBLOK) = COEFF(1,NUS)
         ELSEIF(DISPATCH_ON_TOTAL) THEN
            IF(MW(2,NUS) > MW(1,NUS)) THEN
               INC_CAP = MW(2,NUS) - MW(1,NUS)
               FIRST_BLOCK_HEAT = MW(1,NUS) * COEFF(1,NUS)
               A_HR = (COEFF(3,NUS) - COEFF(2,NUS))/(2.*INC_CAP)
               B_HR = COEFF(3,NUS) - 2.* A_HR * INC_CAP
               SECOND_BLOCK_HEAT = A_HR*INC_CAP**2. + B_HR*INC_CAP
               INHEAT(NBLOK) = (FIRST_BLOCK_HEAT + SECOND_BLOCK_HEAT) /
     +                                                       (MW(2,NUS))
            ELSE
               INHEAT(NBLOK) = COEFF(1,NUS)
            ENDIF
         ELSE
            INHEAT(NBLOK) = COEFF(2,NUS)
         ENDIF
         FUEL_LIMITED(NBLOK) = ABS(FUEL_SUPPLY_ID(NUS))
      ENDIF
      IF(MW(2,NUS) > MW(1,NUS) .OR. ZERO_CAPACITY_ACTIVE_UNIT) THEN
         NBLOK = NBLOK + 1
         LSTBLOK = LSTBLOK + 1
C        MWBLOK(NBLOK) = MW(2,NUS) - MW(1,NUS)
         BLKNO(NBLOK) = LSTBLOK
         UNIT(NBLOK) = NUS
         INHEAT(NBLOK) = COEFF(3,NUS)
         FUEL_LIMITED(NBLOK) = ABS(FUEL_SUPPLY_ID(NUS))
      ENDIF
      RETURN
      ENTRY SET_DISPATCH_AVERAGE_INC
         DISPATCH_ON_AVERAGE = FIRST_BLOCK_DISP_SWITCH() == 'A'
         DISPATCH_ON_TOTAL = FIRST_BLOCK_DISP_SWITCH() == 'F'
      RETURN
      END
C
C**********************************************************************
C
C     COPYRIGHT (C) 1992 M.S. GERBER & ASSOCIATES, INC. ALL RIGHT RESERVED
C
      SUBROUTINE CREATE_EMISS_BY_UNIT_BY_FUEL(NUNITS)
C
C**********************************************************************
      use eco
      use annual_cl_unit
      SAVE
      LOGICAL*1 PHASE_I,CALCULATE_NOX
      INTEGER*2 YR,UNIT_NO,NUNITS,I,J,L,R_ISEAS
      INTEGER*2 FUEL
      REAL R_SOX,R_NOX1,R_NOX2,R_CO2,R_OTH2,R_OTH3
      CHARACTER*(*) UNIT_NAME,FUEL_TYPE*1
      REAL SO2,I_SO2,NOX_BLK1,I_NOX_BLK1,
     +     NOX_BLK2,I_NOX_BLK2,
     +     CO2,I_CO2,
     +     EMIS_OTH2,I_EMIS_OTH2,
     +     EMIS_OTH3,I_EMIS_OTH3,GET_VAR,
     +     MIX_RATE,
     +     STORE_MIX_RATE,
     +     NOX_CONTROL_MULT,
     +     SOX_CONTROL_MULT,
     +     CO2_CONTROL_MULT,
     +     HG_CONTROL_MULT,
     +     OTHER3_CONTROL_MULT
C
      REAL FUEL_MIX_UNIT(MAX_CL_UNITS),BLEND_MIX_UNIT(MAX_CL_UNITS)

         EMISSION_RATES = 0.
         FUEL_MIX_UNIT = 1.
         BLEND_MIX_UNIT = 0.
      RETURN

      ENTRY GET_SEASON_EMISSIONS_RATES(R_ISEAS,YR,UNIT_NAME,PHASE_I,
     +                                 SO2,I_SO2,NOX_BLK1,I_NOX_BLK1,
     +                                 NOX_BLK2,I_NOX_BLK2,
     +                                 CO2,I_CO2,
     +                                 EMIS_OTH2,I_EMIS_OTH2,
     +                                 EMIS_OTH3,I_EMIS_OTH3,
     +                                 UNIT_NO,FUEL_TYPE,
     +                                 CALCULATE_NOX,
     +                                 NOX_CONTROL_MULT,
     +                                 SOX_CONTROL_MULT,
     +                                 CO2_CONTROL_MULT,
     +                                 HG_CONTROL_MULT,
     +                                 OTHER3_CONTROL_MULT)
C     ******************************************************************
      IF(PHASE_I) THEN
         IF(I_SO2 < 0.) THEN
            SO2 = GET_VAR(I_SO2,YR,UNIT_NAME)
            IF(SO2 < 0.) THEN ! 11/19/97. GAT. MONTHLY EMISSIONS
               SO2 = GET_VAR(SO2,R_ISEAS,FUEL_TYPE)
            ENDIF
         ELSE
            SO2 = I_SO2
         ENDIF
! 093004
            SO2 = SO2 * SOX_CONTROL_MULT         
      ELSE
         SO2 = 0.
      ENDIF
      IF(.NOT. CALCULATE_NOX) THEN
         NOX_BLK1 = 0.
         NOX_BLK2 = 0.
      ELSE
         IF(I_NOX_BLK1 < 0.) THEN
            NOX_BLK1 = GET_VAR(I_NOX_BLK1,YR,UNIT_NAME)
            IF(NOX_BLK1 < 0.) THEN ! 11/19/97. GAT. MONTHLY EMISSIONS
               NOX_BLK1 = GET_VAR(NOX_BLK1,R_ISEAS,FUEL_TYPE)
            ENDIF
         ELSE
            NOX_BLK1 = I_NOX_BLK1
         ENDIF
         IF(I_NOX_BLK2 < 0.) THEN
            NOX_BLK2 = GET_VAR(I_NOX_BLK2,YR,UNIT_NAME)
            IF(NOX_BLK2 < 0.) THEN ! 11/19/97. GAT. MONTHLY EMISSIONS
               NOX_BLK2 = GET_VAR(NOX_BLK2,R_ISEAS,FUEL_TYPE)
            ENDIF
         ELSE
            NOX_BLK2 = I_NOX_BLK2
         ENDIF
!
         NOX_BLK1 = NOX_BLK1 * NOX_CONTROL_MULT
         NOX_BLK2 = NOX_BLK2 * NOX_CONTROL_MULT
!         
      ENDIF
      IF(I_CO2 < 0.) THEN
         CO2 = GET_VAR(I_CO2,YR,UNIT_NAME)
         IF(CO2 < 0.) THEN ! 11/19/97. GAT. MONTHLY EMISSIONS
            CO2 = GET_VAR(CO2,R_ISEAS,FUEL_TYPE)
         ENDIF
      ELSE
         CO2 = I_CO2
      ENDIF
      CO2 = CO2 * CO2_CONTROL_MULT         
      IF(I_EMIS_OTH2 < 0.) THEN
         EMIS_OTH2 = GET_VAR(I_EMIS_OTH2,YR,UNIT_NAME)
         IF(EMIS_OTH2 < 0.) THEN ! 11/19/97. GAT. MONTHLY EMISSIONS
            EMIS_OTH2 = GET_VAR(EMIS_OTH2,R_ISEAS,FUEL_TYPE)
         ENDIF
      ELSE
         EMIS_OTH2 = I_EMIS_OTH2
      ENDIF
      EMIS_OTH2 = EMIS_OTH2 * HG_CONTROL_MULT         
      IF(I_EMIS_OTH3 < 0.) THEN
         EMIS_OTH3 = GET_VAR(I_EMIS_OTH3,YR,UNIT_NAME)
         IF(EMIS_OTH3 < 0.) THEN ! 11/19/97. GAT. MONTHLY EMISSIONS
            EMIS_OTH3 = GET_VAR(EMIS_OTH3,R_ISEAS,FUEL_TYPE)
         ENDIF
      ELSE
         EMIS_OTH3 = I_EMIS_OTH3
      ENDIF
      EMIS_OTH3 = EMIS_OTH3 * OTHER3_CONTROL_MULT         
      FUEL = INDEX('PSB',FUEL_TYPE)
      EMISSION_RATES(1,FUEL,UNIT_NO) = SO2
      EMISSION_RATES(2,FUEL,UNIT_NO) = NOX_BLK1
      EMISSION_RATES(3,FUEL,UNIT_NO) = NOX_BLK2
      EMISSION_RATES(4,FUEL,UNIT_NO) = CO2
      EMISSION_RATES(5,FUEL,UNIT_NO) = EMIS_OTH2
      EMISSION_RATES(6,FUEL,UNIT_NO) = EMIS_OTH3
!
!      WRITE(4,*) 'SEASON EMIS UNITNO FUELMX(1)',UNIT_NO,FUEL_MIX_UNIT(1)
!
      RETURN
C
      ENTRY RETURN_PRIM_EMISSION_RATES(UNIT_NO,R_SOX,R_NOX1,R_NOX2,
     +                                 R_CO2,R_OTH2,R_OTH3)
         R_SOX = EMISSION_RATES(1,1,UNIT_NO)
         R_NOX1 = EMISSION_RATES(2,1,UNIT_NO)
         R_NOX2 = EMISSION_RATES(3,1,UNIT_NO)
         R_CO2 = EMISSION_RATES(4,1,UNIT_NO)
         R_OTH2 = EMISSION_RATES(5,1,UNIT_NO)
         R_OTH3 = EMISSION_RATES(6,1,UNIT_NO)
      RETURN
      ENTRY RETURN_SEC_EMISSION_RATES(UNIT_NO,R_SOX,R_NOX1,R_NOX2,
     +                                R_CO2,R_OTH2,R_OTH3)
         R_SOX = EMISSION_RATES(1,2,UNIT_NO)
         R_NOX1 = EMISSION_RATES(2,2,UNIT_NO)
         R_NOX2 = EMISSION_RATES(3,2,UNIT_NO)
         R_CO2 = EMISSION_RATES(4,2,UNIT_NO)
         R_OTH2 = EMISSION_RATES(5,2,UNIT_NO)
         R_OTH3 = EMISSION_RATES(6,2,UNIT_NO)
      RETURN
      ENTRY RETURN_BLEND_EMISSION_RATES(UNIT_NO,R_SOX,R_NOX1,R_NOX2,
     +                                 R_CO2,R_OTH2,R_OTH3)
         R_SOX = EMISSION_RATES(1,3,UNIT_NO)
         R_NOX1 = EMISSION_RATES(2,3,UNIT_NO)
         R_NOX2 = EMISSION_RATES(3,3,UNIT_NO)
         R_CO2 = EMISSION_RATES(4,3,UNIT_NO)
         R_OTH2 = EMISSION_RATES(5,3,UNIT_NO)
         R_OTH3 = EMISSION_RATES(6,3,UNIT_NO)
      RETURN
      ENTRY STORE_FUEL_MIX(UNIT_NO,STORE_MIX_RATE)
!         WRITE(4,*) 'STORE UNIT, FUELMX ',UNIT_NO,STORE_MIX_RATE
         FUEL_MIX_UNIT(UNIT_NO) = ABS(STORE_MIX_RATE)
!         WRITE(4,*) 'FUELMX(1)',FUEL_MIX_UNIT(1)
      RETURN
      ENTRY RETURN_FUEL_MIX(UNIT_NO,MIX_RATE)
         MIX_RATE = FUEL_MIX_UNIT(UNIT_NO)
!         WRITE(4,*) 'RETURN UNIT, FUELMX ',UNIT_NO,MIX_RATE
!         WRITE(4,*) 'FUELMX(1)',FUEL_MIX_UNIT(1)
      RETURN
      ENTRY STORE_BLENDING_MIX(UNIT_NO,MIX_RATE)
         BLEND_MIX_UNIT(UNIT_NO) = MIX_RATE
      RETURN
      ENTRY RETURN_BLENDING_MIX(UNIT_NO,MIX_RATE)
         MIX_RATE = BLEND_MIX_UNIT(UNIT_NO)
      RETURN
      END   
C**********************************************************************
      SUBROUTINE UPDATE_PRODUCTION_SWITCHES
C**********************************************************************
C      
         CALL UPDATE_MONTHLY_EL_RPT_ACTIVE
C         
         CALL UPDATE_SERVICE_REPORT_SWITCH         
C         
      RETURN
      END
C**********************************************************************
      SUBROUTINE UPDATE_SEASON_FOR_REPORTS(ISEAS)
C**********************************************************************
         INTEGER*2 ISEAS
         LOGICAL*1 VOID_L,UPDATE_SEASON_FOR_CT_RPT
C
         CALL UPDATE_SEASON_FOR_FUEL_RPT(ISEAS)
C
         CALL UPDATE_SEASON_FOR_EL_RPT(ISEAS)
C
! 083106. FOR SRP.
!
         VOID_L = UPDATE_SEASON_FOR_CT_RPT(ISEAS)
!
      RETURN
      END


