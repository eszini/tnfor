!     ******************************************************************
!     TRNSFRM3.FOR
!     Copyright(c) M.S. Gerber & Associates 2000
!
!     Created: 1/2/2003 9:09:04 AM
!     Author : MARK S GERBER
!     Last change: MSG 11/15/2006 3:50:26 PM
!     ******************************************************************

C     ************************************************************      
      SUBROUTINE SYSTEM_PEAK_FORECAST(FORCAST_ENRG,FORCAST_PEAK,
     +                  CLASS_LOADS,
     +                  CLASS_PEAKS,CLASS,YEAR,
     +                  END_POINT,DAY_LOAD_SHAPES,FORCAST_LOADS,
     +                  IMPORT_CAP,EXPORT_CAP)
C     ************************************************************
C
C  TAKES HISTORICAL TYPICAL DAY LOAD CURVE VALUES BY SEASON
C  BY EACH CLASS,  & FORECAST PEAK KW & TOTAL KWH,
C  FORMS FORECAST TYPICAL DAY LOAD CURVE VALUES BY SEASON FOR THE
C  CURRENT YEAR OF STUDY.
C
C  10/31/89. ORIGINAL CODE FROM FORCST.FOR AND SUBROUTINE FORCST.
C  CODE WAS MODIFIED TO REPLACE THE ORIGINAL HUERISTIC CREATION
C  OF FORECASTED DAY TYPES BY A LINEAR TRANSFORMATION OF THE LOAD
C  CURVE. THE LINEAR TRANSFORMATION IS CONSTRAINED BY TWO VARIABLES:
C  THE RATIO OF FORECASTED PEAK TO HISTORICAL PEAK, AND THE RATIO
C  OF FORECASTED ENERGY TO HISTORICAL ENERGY. THUS, THE TRANSFORMATION
C  ENSURES THAT THE DAY TYPE FORECASTED PEAK AND ENERGY IS MAINTAINED.
C
C     11/9/89. MODIFIED TO ALLOW FOR THREE DAY TYPES (AVE WKDAY, AVE
C     WKEND DAY, AVE PK DAY). CHANGES INCLUDE UP'ING THE DAY INDEX TO
C     3, PASSING TWO NEW VARIABLES, 
C     MAKING INTERCEPT AND SLOPE VARIABLES ARRAYS, AND CREATING A
C     WEIGHTED LINEAR TRANSFORM FOR THE AVE PK DAY TYPE BASED UPON
C     THE NUMBER OF WKDAYS AND WKEND DAYS THAT COMPOSE THE AVE PK DAY.
C
C
C
C  DAY TYPE 1 = WEEKDAYS
C  DAY TYPE 2 = WEEKENDS WITH HOLIDAYS
C
C  CLASS # CLASS = 1: COMMERICAL
C  CLASS # CLASS = 2: RESIDENTIAL
C  CLASS # CLASS = 3: INDUSTRIAL
C  CLASS # CLASS = 4: OTHER 1
C  CLASS # CLASS = 5: OTHER 2
C  CLASS # CLASS = 6: OTHER 3
C  CLASS # CLASS = 7: SYSTEM 
C
C     
      INCLUDE 'SpinLib.MON'
      USE SIZECOM
      INCLUDE 'LAMCOM.MON'
      CHARACTER*20 MONTH_NAME
C    +(12)/'January','February','March','April',
C    +         'May','June','July','August','September','October',
C    +         'November','December'/
      CHARACTER*9 DAY_NAME(3)/' weekdays',' weekends',' peakdays'/
      CHARACTER*11 CLASS_NAME(7)/'Commerical','Residential',
     +          'Industrial','Other 1','Other 2','Other 3','System'/
      INTEGER*2 SEASON,DAY,HOUR,LRECL,
     +          YEAR,CLASS,END_POINT,THREE_DAYS,TOTAL_DAYS
C     REAL PEAK_GROWTH_RATE ! REMOVED 3/3/92
      REAL FORCAST_DAILY_ENRG,BASE_YEAR_DAILY_ENRG,
     +     FORCAST_ENRG(2,12),
     +     CLASS_LOADS(24,2,12),CLASS_PEAKS(2,12),FORCAST_PEAK(2,12),
     +     SUM_OF_LOADS(12),SUM,
     +     BASE_YEAR_AVE_DAILY_ENRG,FORECAST_AVE_DAILY_ENRG,
     +     BASE_YEAR_LOAD_FACTOR,
     +     FORECAST_LOAD_FACTOR,P1,P2,DENOMINATOR,
     +     LOAD_FACTOR_CHANGE,LOAD_FACTOR_TEST1,LOAD_FACTOR_TEST2,
     +     DAY_LOAD_SHAPES(24,3,12),MAX_RR(12),AVE_RR(12),RR_PEAK,
     +     RR_ENERGY,IMPORT_CAP,EXPORT_CAP,RR_MULT,R_IMPORT_CAP,
     +     R_EXPORT_CAP
C
C
      INTEGER*2 BASE_YEAR
      CHARACTER*256 OUTPUT_DIRECTORY
      CHARACTER*256 FILE_NAME
      LOGICAL*4   INTERCHANGE_FILE_EXISTS/.FALSE./,ECON_FILE_OPENED
C
C INCLUDE COMMON BLOCK OF ALL FORECAST TYPICAL CURVES FOR THIS YEAR
C
      REAL FORCAST_LOADS(24,3,12,7)
C
C     INCLUDE 'TRANCOM.MON' !TRANCOM.MON MOVED INTO LAMCOM.MON 8/12/93
C
C      
C      
C      
C     INCLUDE 'OVLYCOM.MON FOR BIN FILE NAME'
C
C     INCLUDE 'OVLYCOM.MON'
      CHARACTER*2 ECON_OL
C
      INTEGER*2 ECON_YEAR,R_YEAR,R_SEASON
      REAL  S_CUM_EXTENSION_MULT(12),S_EXTENSION_MULT(12),
     +      R_EXTENSION_MULT
      SAVE  S_CUM_EXTENSION_MULT,S_EXTENSION_MULT
C
      REAL*4   ENERGY_MIX,PRIMARY_ENERGY_COST,SECONDARY_ENERGY_COST,
     +         PRIMARY_EMISSIONS_RATE(5),
     +         SECONDARY_EMISSIONS_RATE(5),
     +         EMISSIONS_CREDIT_PRICE(5),
     +         MAX_ALLOCATOR,
     +         PRIMARY_ENERGY_COST_ADDER,SECONDARY_ENERGY_COST_ADDER,
     +         TOTAL_EXTERNAL_FACTOR
      LOGICAL*1 USE_EXTERNAL_HOURLY_LOADS,USE_EXT_LOAD_SOURCE
C     
C      
! END OF DATA DECLARATIONS      
C
      USE_EXTERNAL_HOURLY_LOADS = USE_EXT_LOAD_SOURCE()
      DO SEASON = 1, 12
        SUM_OF_LOADS(SEASON) = 0.0
      ENDDO
C
C NOW READ IN RUNNING RATE FORECASTS
C
      IF(YEAR == 1) THEN
         CALL GET_ECON_OL(ECON_OL,LRECL)
         FILE_NAME = trim(OUTPUT_DIRECTORY())//ECON_OL//'ECINT.BIN'
         INQUIRE(FILE=FILE_NAME,EXIST=INTERCHANGE_FILE_EXISTS)
         IF(INTERCHANGE_FILE_EXISTS) OPEN(84,FILE=FILE_NAME,
     +                                       RECL=LRECL,ACCESS='DIRECT')
      ENDIF
      IF(INTERCHANGE_FILE_EXISTS) THEN
         READ(84,REC=YEAR) (MAX_RR(SEASON),AVE_RR(SEASON),SEASON=1,12),
     +         IMPORT_CAP,EXPORT_CAP,RR_MULT,
     +         ENERGY_MIX,PRIMARY_ENERGY_COST,SECONDARY_ENERGY_COST,
     +         PRIMARY_EMISSIONS_RATE,SECONDARY_EMISSIONS_RATE,
     +         EMISSIONS_CREDIT_PRICE
         IF(PRIMARY_ENERGY_COST /= -999. .AND. 
     +                              SECONDARY_ENERGY_COST /= -999.) THEN
            MAX_ALLOCATOR = -9999999.
            DO SEASON = 1, 12
               MAX_ALLOCATOR = MAX(MAX_ALLOCATOR,MAX_RR(SEASON))
            ENDDO
            IF(MAX_ALLOCATOR /= 0.) THEN
               MAX_ALLOCATOR = 1./MAX_ALLOCATOR
            ELSE
               WRITE(4,*) "MAXIMUM RR IN ECONOMY INTERCHANGE IS ZERO"
            ENDIF
            PRIMARY_ENERGY_COST = PRIMARY_ENERGY_COST*ENERGY_MIX
            PRIMARY_ENERGY_COST_ADDER = ENERGY_MIX * (
     +         PRIMARY_EMISSIONS_RATE(1)*EMISSIONS_CREDIT_PRICE(1) +
     +         PRIMARY_EMISSIONS_RATE(2)*EMISSIONS_CREDIT_PRICE(2) +
     +         PRIMARY_EMISSIONS_RATE(3)*EMISSIONS_CREDIT_PRICE(3) +
     +         PRIMARY_EMISSIONS_RATE(4)*EMISSIONS_CREDIT_PRICE(4) +
     +         PRIMARY_EMISSIONS_RATE(5)*EMISSIONS_CREDIT_PRICE(5))
C      
            SECONDARY_ENERGY_COST =SECONDARY_ENERGY_COST*(1.-ENERGY_MIX)
            SECONDARY_ENERGY_COST_ADDER = (1.-ENERGY_MIX) * (
     +         SECONDARY_EMISSIONS_RATE(1)*EMISSIONS_CREDIT_PRICE(1) +
     +         SECONDARY_EMISSIONS_RATE(2)*EMISSIONS_CREDIT_PRICE(2) +
     +         SECONDARY_EMISSIONS_RATE(3)*EMISSIONS_CREDIT_PRICE(3) +
     +         SECONDARY_EMISSIONS_RATE(4)*EMISSIONS_CREDIT_PRICE(4) +
     +         SECONDARY_EMISSIONS_RATE(5)*EMISSIONS_CREDIT_PRICE(5)) 
            TOTAL_EXTERNAL_FACTOR = 
     +            PRIMARY_ENERGY_COST + PRIMARY_ENERGY_COST_ADDER +
     +            SECONDARY_ENERGY_COST + SECONDARY_ENERGY_COST_ADDER
            DO SEASON = 1,12
               MAX_RR(SEASON)=RR_MULT * MAX_RR(SEASON) * 
     +                  MAX_ALLOCATOR * TOTAL_EXTERNAL_FACTOR
               AVE_RR(SEASON)=RR_MULT * AVE_RR(SEASON) *
     +                  MAX_ALLOCATOR * TOTAL_EXTERNAL_FACTOR
            ENDDO
C     
         ELSE
            IF(RR_MULT /= 1.) THEN
               DO SEASON = 1, 12
                     MAX_RR(SEASON) = RR_MULT * MAX_RR(SEASON)
                     AVE_RR(SEASON) = RR_MULT * AVE_RR(SEASON)
               ENDDO
            ENDIF
         ENDIF
      ELSE
         DO SEASON = 1, 12
            MAX_RR(SEASON) = 0.
            AVE_RR(SEASON) = 0.
         ENDDO
      ENDIF
C
C
C  BEGIN FORECAST LOOP BY SEASON AND DAY TYPE
C      
      DO SEASON = 1, 12
         RR_PEAK = 0.
         RR_ENERGY = 0.
         TOTAL_DAYS = 0
C
C
C
         DO DAY = 1, 3
C
            LOAD_FACTOR_TEST1=0
            LOAD_FACTOR_TEST2=0 
C
C           FIND THE SLOPE AND INTERCEPT FOR THE FIRST TWO DAY TYPES
C
            IF(DAY < 3) THEN
C
C           COMPUTE AVERAGE DAILY ENERGY FOREC & HISTOR THIS DAY TYPE.
C
            FORCAST_DAILY_ENRG = FORCAST_ENRG(DAY,SEASON) / 
     +                     FLOAT(HISTORICAL_DAY_COUNT(DAY,SEASON))
            BASE_YEAR_DAILY_ENRG = 0.
            DO HOUR = 1,24
               BASE_YEAR_DAILY_ENRG = BASE_YEAR_DAILY_ENRG + 
     +                                CLASS_LOADS(HOUR,DAY,SEASON)
            ENDDO
            RR_PEAK = MAX(RR_PEAK,CLASS_PEAKS(DAY,SEASON))
            RR_ENERGY = RR_ENERGY + BASE_YEAR_DAILY_ENRG *
     +                     FLOAT(HISTORICAL_DAY_COUNT(DAY,SEASON))
            TOTAL_DAYS = TOTAL_DAYS + HISTORICAL_DAY_COUNT(DAY,SEASON)
C
C  FIND GROWTH RATE IN (COINCIDENT) PEAK & IN DAILY MWH
C  (GROWTH RATE IN PEAK FOR DAY TYPE 2 ASSUMED = THAT FOR DAY TYPE 1)
C
C           PEAK_GROWTH_RATE = FORCAST_PEAK(DAY,SEASON) / 
C    +                            CLASS_PEAKS(DAY,SEASON) !NOT USED 3/3/92
C
C
C   WE WANT TO CREATE A NEW LOAD SHAPE BASED UPON NEW
C   ENERGY AND PEAK VALUES. CREATE A LINEAR RELATIONSHIP BETWEEN THE
C   OLD AVERAGE DAY TYPE AND THE NEW AVERAGE DAY TYPE. THE TWO POINTS
C   THAT DETERMINE THE LINE ARE THE HISTORICAL PEAK AND AVERAGE DAILY
C   ENERGY AND THE NEW PEAK AND AVERAGE DAILY ENERGY. THE LINE IS
C   CHARACTERIZED BY A SLOPE AND AN INTERCEPT.
C
C
            BASE_YEAR_AVE_DAILY_ENRG = BASE_YEAR_DAILY_ENRG/24
            FORECAST_AVE_DAILY_ENRG = FORCAST_DAILY_ENRG/24 
            SLOPE(DAY,SEASON) = (CLASS_PEAKS(DAY,SEASON)-
     +              BASE_YEAR_AVE_DAILY_ENRG)/(FORCAST_PEAK(DAY,SEASON)-
     +                                          FORECAST_AVE_DAILY_ENRG)
            INTERCEPT(DAY,SEASON) = CLASS_PEAKS(DAY,SEASON)-
     +                        SLOPE(DAY,SEASON)*FORCAST_PEAK(DAY,SEASON)
C
C
C   CALCULATE THE OLD AND NEW LOAD FACTORS FOR THE DATA.
C
            BASE_YEAR_LOAD_FACTOR = BASE_YEAR_AVE_DAILY_ENRG/
     +                                           CLASS_PEAKS(DAY,SEASON)
C
            FORECAST_LOAD_FACTOR = FORECAST_AVE_DAILY_ENRG/
     +                                          FORCAST_PEAK(DAY,SEASON) 
C
C
C    CHECK TO SEE WHETHER THE LOAD FACTOR EXCEEDS 1.0
C
            IF(FORECAST_LOAD_FACTOR > 1.) LOAD_FACTOR_TEST1 = 1
C
C
C   CHECK TO SEE WHETHER THE LOAD FACTOR CHANGES BY MORE
C                 THAN TWENTY POINTS      
C
C
            LOAD_FACTOR_CHANGE = ABS(FORECAST_LOAD_FACTOR-
     +                                     BASE_YEAR_LOAD_FACTOR)
            IF(LOAD_FACTOR_CHANGE > .2) LOAD_FACTOR_TEST2 = 1
C
C           CREATE THE SLOPE AND INTERCEPT FOR THE AVE PEAK DAY TYPE
            ELSE
C
               P1 = DBLE(DBLE(4.0)-FLOAT(WEEKEND_PEAK_DAYS(SEASON)))/
     +                                                         DBLE(4.0)
               P2 = DBLE(1 - P1)
               DENOMINATOR = DBLE(SLOPE(2,SEASON)*P1 + 
     +                                               SLOPE(1,SEASON)*P2)
               IF(DENOMINATOR == 0.0) THEN ! ASSUME EXTERNAL LOADS FOR NOW.
                  INTERCEPT(3,SEASON)= 0.0
                  SLOPE(3,SEASON) = 0.0
               ELSE
                  INTERCEPT(3,SEASON)= DBLE((SLOPE(2,SEASON)*P1*
     +                         INTERCEPT(1,SEASON) + SLOPE(1,SEASON)*P2*
     +                                 INTERCEPT(2,SEASON)))/DENOMINATOR
                  SLOPE(3,SEASON)=DBLE(SLOPE(1,SEASON)*SLOPE(2,SEASON))/
     +                                    DENOMINATOR
               ENDIF
             ENDIF
C
C   LINEARLY TRANSFORM OLD DATA BY DAY TYPE TO NEW DATA BY DAY TYPE
C
            SUM = 0.0
            DO HOUR = 1 , 24
               IF(SLOPE(DAY,SEASON) /= 0.) THEN
                  FORCAST_LOADS(HOUR,DAY,SEASON,CLASS)=
     +                   (DAY_LOAD_SHAPES(HOUR,DAY,SEASON) -
     +                          INTERCEPT(DAY,SEASON))/SLOPE(DAY,SEASON)
               ELSE
                  FORCAST_LOADS(HOUR,DAY,SEASON,CLASS) = 
     +                                  DAY_LOAD_SHAPES(HOUR,DAY,SEASON)               
               ENDIF
               SUM = SUM +  FORCAST_LOADS(HOUR,DAY,SEASON,CLASS)
            ENDDO
C
C  CHECK THAT TOTAL ALLOCATED ENERGY = TOTAL FORECAST ENERGY
C
C     
            IF(DAY == 1) THREE_DAYS = HISTORICAL_DAY_COUNT(DAY,SEASON) -
     +                                     4 + WEEKEND_PEAK_DAYS(SEASON)
            IF(DAY == 2) THREE_DAYS = HISTORICAL_DAY_COUNT(DAY,SEASON) -
     +                                         WEEKEND_PEAK_DAYS(SEASON)
            IF(DAY == 3) THREE_DAYS = 4
C
            SUM_OF_LOADS(SEASON) = SUM_OF_LOADS(SEASON) + SUM* 
     +                                                 FLOAT(THREE_DAYS)
C
C     WARN IF LOAD FACTOR EXCEEDS 1.0
C
            IF(LOAD_FACTOR_TEST1 == 1 .AND. 
     +                           .NOT. USE_EXTERNAL_HOURLY_LOADS) THEN
               WRITE(4,*) 'For the ',trim(CLASS_NAME(CLASS)),
     +                    ' class during ',
     +         trim(MONTH_NAME(SEASON)),trim(DAY_NAME(DAY)),
     +           ' in year',BASE_YEAR()+YEAR,','
               WRITE(4,*) 'for end point',END_POINT
               WRITE(4,*) 'The load factor exceeded 1.0. Check the'
               WRITE(4,*) 'peak and energy growth forecasts'
               WRITE(4,*) ' '
!
! NOT FATAL FOR SRP. 11/25/98. GAT.
!
!               STOP 'Error in SYSTEM_PEAK_FORECAST. Check MIDAS.ERR
!     +               file.'
            ENDIF
C  
C     WARN IF LOAD FACTORS CHANGE RAPIDLY
C
            IF(LOAD_FACTOR_TEST2.EQ.1 .AND. .NOT. 
     +                                 USE_EXTERNAL_HOURLY_LOADS) THEN 
               WRITE(4,*) 'For the ',trim(CLASS_NAME(CLASS)),
     +                    ' class during ',
     +         trim(MONTH_NAME(SEASON)),trim(DAY_NAME(DAY)),
     +           ' in year',BASE_YEAR()+YEAR,','
               WRITE(4,*) 'for end point',END_POINT
               WRITE(4,*) 'the load factor changed dramatically.'
               WRITE(4,*) 'Check the peak and energy growth forecasts'
               WRITE(4,*) ' '
            ENDIF
C
C
         ENDDO  ! END DAY TYPE LOOP
C
C        ECONOMY INTERCHANGE SECTION
C
         RR_SLOPE(SEASON) = 1
         IF(INTERCHANGE_FILE_EXISTS) THEN
            RR_ENERGY = RR_ENERGY/FLOAT(TOTAL_DAYS*24)
            IF(MAX_RR(SEASON) .NE. AVE_RR(SEASON)) RR_SLOPE(SEASON) = 
     +               (RR_PEAK-RR_ENERGY)/(MAX_RR(SEASON)-AVE_RR(SEASON))
            RR_INTERCEPT(SEASON)=RR_PEAK-RR_SLOPE(SEASON)*MAX_RR(SEASON)
         ELSE
            RR_ENERGY = 0.
            RR_INTERCEPT(SEASON) = 0.
         ENDIF
C
      ENDDO   ! END SEASON LOOP
      RETURN
C      
      ENTRY CALC_ECONOMY_EXTENSION_MULT(R_YEAR)
C      
         IF(.NOT. INTERCHANGE_FILE_EXISTS) RETURN
         ECON_YEAR = MAX(R_YEAR - 1,1)

         READ(84,REC=ECON_YEAR) 
     +         (MAX_RR(SEASON),AVE_RR(SEASON),SEASON=1,12),
     +         R_IMPORT_CAP,R_EXPORT_CAP,RR_MULT,
     +         ENERGY_MIX,PRIMARY_ENERGY_COST,SECONDARY_ENERGY_COST,
     +         PRIMARY_EMISSIONS_RATE,SECONDARY_EMISSIONS_RATE,
     +         EMISSIONS_CREDIT_PRICE
C
         ECON_YEAR = MAX(R_YEAR,2)
         READ(84,REC=ECON_YEAR) 
     +         (MAX_RR(SEASON),S_EXTENSION_MULT(SEASON),SEASON=1,12),
     +         R_IMPORT_CAP,R_EXPORT_CAP,RR_MULT,
     +         ENERGY_MIX,PRIMARY_ENERGY_COST,SECONDARY_ENERGY_COST,
     +         PRIMARY_EMISSIONS_RATE,SECONDARY_EMISSIONS_RATE,
     +         EMISSIONS_CREDIT_PRICE
C
         DO SEASON = 1, 12
            S_CUM_EXTENSION_MULT(SEASON) = 1.
            S_EXTENSION_MULT(SEASON) = S_EXTENSION_MULT(SEASON)/
     +                                                    AVE_RR(SEASON)
         ENDDO
C     
      RETURN
C      
      ENTRY GET_ECONOMY_EXTENSION_MULT(R_SEASON,R_EXTENSION_MULT)
C
         S_CUM_EXTENSION_MULT(R_SEASON)=S_CUM_EXTENSION_MULT(R_SEASON)* 
     +                                        S_EXTENSION_MULT(R_SEASON)
         R_EXTENSION_MULT = S_CUM_EXTENSION_MULT(R_SEASON) 
C
      RETURN
C      
      END

