/*
 * -----------------------------------------------------------------------------------
 *
 *	chg_alloc_t06
 *
 *
 * -----------------------------------------------------------------------------------
 */


/*
 *	chg_alloc_t06
 *	agregar check alloc de sentencias con allocate tipo 06 
 *	recibe numero de file donde encontro allocate y la linea del allocate
 *
 *	Atenti:
 *	esto corrije un solo allocate x vez !!!
 *
 */

int	chg_alloc_t06(num_f,nf_alloc,add_lines,num_alloc)
int	num_f;
int	nf_alloc;
int	*add_lines;
int	num_alloc;
{

	int 	h,i,j,k,k1,k2;
	int	l1,l2;
	int	c1,c2,c3,c4,c5;
	int	f1,f2,f3,f4,f5;
	int	f_proceso;
	int	f_stat;
	int	f_hay_alloc;
	int	f_try;
	int	n_f;
	char	base_name[MAXV];
	char	prog_name[MAXV];
	char	exte_name[MAXV];
	char	b0[MAXB];
	char	b1[MAXB];
	char	b2[MAXB];
	char	b3[MAXB];
	char	b4[MAXB];
	char	b5[MAXB];
	char	blanks[64];
	int	pf,uf,nf,qf;
	int	tipo_ext;

	int	pri_l,ult_l;
	int	ult_u,pri_d;	/* ultimo use, primera declaracion */
	int	mod_type;	/* 0 no se, 1 subroutine 2 function */
	int	linea_use;	/* linea en la que hay que poner el use */
	int	agrego_lines;	/* lineas que se agregan al final x hacer_lugar */

	char	m0[MSTR];

	memset(b4,'X',MAXB);
	memset(m0,0,MSTR);
	strcpy(base_name,"empty");

	nf = num_f;

	tipo_ext = 0;
	c2 = 0;
	c3 = 0;
	c4 = 0;

	/* primera y ultima linea del fuente */
	pf = (*tb[nf]).pf;
	uf = (*tb[nf]).uf;
	qf = uf - pf +1;


	/* nombre y ext del file  */
	strcpy(prog_name,f_name(pf));
	strcpy(exte_name,e_name(pf));

	if (!strncmp(exte_name,"for",3))
		tipo_ext = 1;

	if (!strncmp(exte_name,"f90",3))
		tipo_ext = 2;


	/* proceso linea i */
	strcpy(b0,(*fnp[nf_alloc]).l );
	strcpy(b1, pasar_a_minusc(b0));

	l2 = strlen(b1);

	f_proceso = 1;
	if (linea_vacia(b1) || es_linea_comentario(b1))
		f_proceso = 0;


	/* solo proceso lineas que no son comentario ni vacias */
	if (f_proceso)
	{	


		grabar_mapa(6,0," ",num_alloc,0,0);
		grabar_mapa(2,0,b1,lne(nf_alloc),pf,uf);


		if (!busco_pri_l(pf,uf,nf_alloc,&pri_l,&mod_type))
			error(9001);

		grabar_mapa(3,0,(*fnp[pri_l]).l,0,lne(pri_l),0);

		if (!busco_ult_l(pf,uf,nf_alloc,&ult_l,mod_type))
			error(9002);

		grabar_mapa(4,0,(*fnp[ult_l]).l,0,0,lne(ult_l));


		/* busco donde colocar el use ... allocate_vars */
		ult_u = 0;
		busco_ult_u(pri_l,ult_l,pri_l,&ult_u);

#if 0
		fprintf (hfou5,"ult l use : %6d                    |%s|\n",lne(ult_u),(*fnp[ult_u]).l);
#endif

		/* busco primer declaracion de variables */
		pri_d = 0;
		busco_pri_d(pri_l,ult_l,pri_l,&pri_d);

#if 0
		fprintf (hfou5,"pri l dec : %6d                    |%s|\n",lne(pri_d),(*fnp[pri_d]).l);
#endif

		f_try = 0;

		if (!f_try && ult_u)
		{
			linea_use = ult_u+1;
			f_try = 1;
		}

		if (!f_try && pri_d)
		{
			linea_use = pri_d;
			grabar_mapa(5,0,(*fnp[linea_use]).l,lne(linea_use),lne(pri_l),lne(ult_l));
			f_try = 1;
		}

		if (!f_try)
		{	
			for (h=pf; h<=uf; h++)
				fprintf (hfou6,"%6d,|%s|\n",h,(*fnp[h]).l);
			printf ("allocate: |%s| \n",(*fnp[nf_alloc]).l );
			printf ("pri_l  %d |%s| \n",pri_l,(*fnp[pri_l]).l );
			printf ("ult_l  %d |%s| \n",ult_l,(*fnp[ult_l]).l );
			error(9003);
		}


		/* a partir de aqui ... a hacer los cambios !! 
		 *
		 * 1) correr todo 1 linea para abajo, y agregar el use allocate_vars.f90 
		 * 2) en la linea del allocate, agregar  stat= ... var de error 
		 * 3) correr todo 1 linea para abajo, y agregar call check_alloc ...
		 *    con variables :
		 *    identificador (string ... nombre de programa con un numero de allocate )
		 *    nombre de la variable ...	
		 *    variable de error 
		 *    opcional ... extra_info ?? 
		 */


		/*
		 * La linea para poner use allocate_vars es linea_use
		 * correr todo para abajo una linea desde ahi ...
		 *
		 */
 
		agrego_lines = 3;
		*add_lines = 0;


		if (!busco_use_allocate(pri_l,ult_l))
		{
			hacer_lugar(pf,qf_src-1,linea_use,agrego_lines);

			c5 = n_blanks_beg( (*fnp[pri_l]).l );
			memset(blanks,0,sizeof(blanks));
			memset(blanks,32,c5);

			strcpy( (*fnp[linea_use]).l  ,blanks);
			strcat( (*fnp[linea_use]).l  ,"use allocate_vars");

			strcpy( (*fnp[linea_use+1]).l  ,blanks);
			strcat( (*fnp[linea_use+1]).l  ,"use miscmod");

			if (busco_use_miscmod(pri_l,ult_l))
			{
				strcpy( (*fnp[linea_use+1]).l  ,"     ");
			}

			strcpy( (*fnp[linea_use+2]).l,"     ");
			*add_lines = agrego_lines;
		}


		flag_alloc_ok = 1;

	}

	
}


